syntax = "proto3";

package noble.orbiter.v1;

import "cosmos/base/query/v1beta1/pagination.proto";
import "cosmos/query/v1/query.proto";
import "google/api/annotations.proto";

option go_package = "github.com/noble-assets/orbiter/types";

// Query defines the gRPC query service for the Orbiter module.
service Query {
  rpc PendingPayloads(QueryPendingPayloadsRequest) returns (QueryPendingPayloadsResponse) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get = "/noble/orbiter/v1/pending-payloads";
  }
}

message QueryPendingPayloadsRequest {
  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryPendingPayloadsResponse {
  // Hex-formatted hashes of the currently pending payloads
  repeated string hashes = 1;

  // pagination defines the pagination in the response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}
