syntax = "proto3";

package noble.orbiter.component.adapter.v1;

import "amino/amino.proto";
import "cosmos/msg/v1/msg.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "noble/orbiter/component/adapter/v1/adapter.proto";
import "noble/orbiter/core/v1/orbiter.proto";

option go_package = "github.com/noble-assets/orbiter/types/component/adapter";

// Msg defines the RPC methods for the Adapter component.
service Msg {
  option (cosmos.msg.v1.service) = true;

  // UpdateParams updates the Adapter component params.
  rpc UpdateParams(MsgUpdateParams) returns (MsgUpdateParamsResponse);

  //
  rpc CCTPEntrypoint(MsgCCTPEntrypoint) returns (MsgCCTPEntrypointResponse);
}

// MsgUpdateParams is the request to update the adapter component parameters.
message MsgUpdateParams {
  option (cosmos.msg.v1.signer) = "signer";
  option (amino.name) = "noble/orbiter/component/adapter/v1/MsgUpdateParams";
  string signer = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  Params params = 2 [
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];
}

// MsgUpdateParamsResponse is the response to the MsgUpdateParams.
message MsgUpdateParamsResponse {}

// MsgCCTPEntrypoint ... TODO
message MsgCCTPEntrypoint {
  option (cosmos.msg.v1.signer) = "signer";
  option (amino.name) = "noble/orbiter/component/adapter/v1/MsgCCTPEntrypoint";

  string signer = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  bytes transfer_message = 2;
  bytes transfer_attestation = 3;

  bytes payload_message = 4;
  bytes payload_attestation = 5;

  noble.orbiter.core.v1.Payload payload = 6;
}

// MsgCCTPEntrypointResponse is the response to the MsgCCTPEntrypoint.
message MsgCCTPEntrypointResponse {}
