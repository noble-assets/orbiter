syntax = "proto3";

package noble.orbiter.component.dispatcher.v1;

import "cosmos/query/v1/query.proto";
import "google/api/annotations.proto";
import "noble/orbiter/component/dispatcher/v1/dispatcher.proto";

option go_package = "github.com/noble-assets/orbiter/types/component/dispatcher";

// Query defines the gRPC query service for the Orbiter
// dispatcher component.
service Query {
  // DispatchedCounts retrieves the dispatched counts for a specific route.
  rpc DispatchedCounts(QueryDispatchedCountsRequest) returns (QueryDispatchedCountsResponse) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get = "/noble/orbiter/dispatcher/v1/dispatched/counts/{source_protocol_id}/{source_counterparty_id}/{destination_protocol_id}/{destination_counterparty_id}";
  }

  // DispatchedCountsBySourceProtocolID retrieves all the dispatched counts for a specific source protocol ID.
  rpc DispatchedCountsBySourceProtocolID(QueryDispatchedCountsByProtocolIDRequest) returns (QueryDispatchedCountsResponse) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get = "/noble/orbiter/dispatcher/v1/dispatched/counts/by-source/{protocol_id}";
  }

  // DispatchedCountsByDestinationProtocolID retrieves all the dispatched counts for a specific destination protocol ID.
  rpc DispatchedCountsByDestinationProtocolID(QueryDispatchedCountsByProtocolIDRequest) returns (QueryDispatchedCountsResponse) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get = "/noble/orbiter/dispatcher/v1/dispatched/counts/by-destination/{protocol_id}";
  }

  // DispatchedAmounts retrieves the dispatched amounts for a specific route.
  rpc DispatchedAmounts(QueryDispatchedAmountsRequest) returns (QueryDispatchedAmountsResponse) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get = "/noble/orbiter/dispatcher/v1/dispatched/amounts/{source_protocol_id}/{source_counterparty_id}/{destination_protocol_id}/{destination_counterparty_id}";
  }

  // DispatchedAmountsBySourceProtocolID retrieves all the dispatched amounts for a specific source protocol ID.
  rpc DispatchedAmountsBySourceProtocolID(QueryDispatchedAmountsByProtocolIDRequest) returns (QueryDispatchedAmountsResponse) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get = "/noble/orbiter/dispatcher/v1/dispatched/amounts/by-source/{protocol_id}";
  }

  // DispatchedAmountsByDestinationProtocolID retrieves all the dispatched amounts for a specific destination protocol ID.
  rpc DispatchedAmountsByDestinationProtocolID(QueryDispatchedAmountsByProtocolIDRequest) returns (QueryDispatchedAmountsResponse) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get = "/noble/orbiter/dispatcher/v1/dispatched/amounts/by-destination/{protocol_id}";
  }
}

// QueryDispatchedCountsRequest is the request type for the Query/DispatchedCounts RPC method.
message QueryDispatchedCountsRequest {
  // source_protocol_id is the source protocol identifier.
  string source_protocol_id = 1;
  // source_counterparty_id is the source counterparty identifier.
  string source_counterparty_id = 2;
  // destination_protocol_id is the destination protocol identifier.
  string destination_protocol_id = 3;
  // destination_counterparty_id is the destination counterparty identifier.
  string destination_counterparty_id = 4;
}

// QueryDispatchedAmountsByProtocolIDRequest is the request type for the Query/DispatchedCountsBy* methods.
message QueryDispatchedCountsByProtocolIDRequest {
  // source_protocol_id is the protocol identifier.
  string protocol_id = 1;
}

// QueryDispatchedCountsResponse is the response type for the Query/DispatchedCounts* RPC methods.
message QueryDispatchedCountsResponse {
  repeated DispatchCountEntry counts = 1;
}

// QueryDispatchedAmountsRequest is the request type for the Query/DispatchedAmounts RPC method.
message QueryDispatchedAmountsRequest {
  // source_protocol_id is the source protocol identifier.
  string source_protocol_id = 1;
  // source_counterparty_id is the source counterparty identifier.
  string source_counterparty_id = 2;
  // destination_protocol_id is the destination protocol identifier.
  string destination_protocol_id = 3;
  // destination_counterparty_id is the destination counterparty identifier.
  string destination_counterparty_id = 4;
  // denom is the denomination of the amounts requested.
  string denom = 5;
}

// QueryDispatchedAmountsByProtocolIDRequest is the request type for the Query/DispatchedAmountsBy* methods.
message QueryDispatchedAmountsByProtocolIDRequest {
  // source_protocol_id is the protocol identifier.
  string protocol_id = 1;
}

// QueryDispatchedAmountsResponse is the response type for the Query/DispatchedAmounts* RPC methods.
message QueryDispatchedAmountsResponse {
  repeated DispatchedAmountEntry amounts = 1;
}
