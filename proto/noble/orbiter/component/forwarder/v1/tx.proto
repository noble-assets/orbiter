syntax = "proto3";

package noble.orbiter.component.forwarder.v1;

import "amino/amino.proto";
import "cosmos/msg/v1/msg.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "noble/orbiter/core/v1/id.proto";

option go_package = "orbiter.dev/types/component/forwarder";

// Msg defines the RPC methods for the Orbiter module.
service Msg {
  option (cosmos.msg.v1.service) = true;

  // PauseProtocol pauses an entire forwarding protocol.
  rpc PauseProtocol(MsgPauseProtocol) returns (MsgPauseProtocolResponse);
  // UnpauseProtocol resumes an entire forwarding protocol.
  rpc UnpauseProtocol(MsgUnpauseProtocol) returns (MsgUnpauseProtocolResponse);
  // PauseCrossChain pauses specific counterparty for a protocol.
  rpc PauseCrossChain(MsgPauseCrossChain) returns (MsgPauseCrossChainResponse);
  // UnpauseCrossChain resumes specific counterparty pairs for a protocol.
  rpc UnpauseCrossChain(MsgUnpauseCrossChain) returns (MsgUnpauseCrossChainResponse);

  rpc ReplaceDepositForBurn(MsgReplaceDepositForBurn) returns (MsgReplaceDepositForBurnResponse);
}

// MsgPauseProtocol pauses an entire forwarding protocol.
message MsgPauseProtocol {
  option (cosmos.msg.v1.signer) = "signer";
  option (amino.name) = "orbiter/forwarder/PauseProtocol";

  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  // Address of the signer who is requesting to pause the protocol.
  string signer = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // Bridge protocol to pause.
  noble.orbiter.core.v1.ProtocolID protocol_id = 2;
}

// MsgPauseProtocolResponse is the response type from a MsgPauseProtocol request.
message MsgPauseProtocolResponse {}

// MsgPauseCrossChain pauses specific counterparty pairs for a protocol.
message MsgPauseCrossChain {
  option (cosmos.msg.v1.signer) = "signer";
  option (amino.name) = "orbiter/forwarder/PauseCrossChain";

  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  // Address of the signer who is requesting to pause the counterparty pairs.
  string signer = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // Bridge protocol to pause.
  noble.orbiter.core.v1.ProtocolID protocol_id = 2;
  // List of identifiers of destinations that must be paused.
  repeated string counterparty_ids = 3;
}

// MsgPauseCrossChainResponse is the response type
// from a MsgPauseCrossChain request.
message MsgPauseCrossChainResponse {}

// MsgUnpauseProtocol resumes an entire forwarding protocol.
message MsgUnpauseProtocol {
  option (cosmos.msg.v1.signer) = "signer";
  option (amino.name) = "orbiter/forwarder/UnpauseProtocol";

  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  // Address of the signer who is requesting to unpause the protocol.
  string signer = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // Bridge protocol to unpause.
  noble.orbiter.core.v1.ProtocolID protocol_id = 2;
}

// MsgUnpauseProtocolResponse is the response type from a MsgUnpauseProtocol request.
message MsgUnpauseProtocolResponse {}

// MsgUnpauseCrossChain resumes specific counterparty pairs for a protocol.
message MsgUnpauseCrossChain {
  option (cosmos.msg.v1.signer) = "signer";
  option (amino.name) = "orbiter/forwarder/UnpauseCrossChain";

  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  // Address of the signer who is requesting to unpause the counterparty pairs.
  string signer = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // Bridge protocol to unpause.
  noble.orbiter.core.v1.ProtocolID protocol_id = 2;
  // List of identifiers of destinations that must be unpaused.
  repeated string counterparty_ids = 3;
}

// MsgUnpauseCrossChainResponse is the response type
// from a MsgUnpauseCrossChain request.
message MsgUnpauseCrossChainResponse {}

// MsgReplaceDepositForBurnResponse allows the orbiter authority
// to replace a sent deposit for burn message.
message MsgReplaceDepositForBurn {
  option (cosmos.msg.v1.signer) = "signer";
  option (amino.name) = "orbiter/forwarder/ReplaceDepositForBurn";

  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  string signer = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  bytes original_message = 2;
  bytes original_attestation = 3;
  bytes new_destination_caller = 4;
  bytes new_mint_recipient = 5;
}

// MsgReplaceDepositForBurnResponse is the response type from
// a MsgReplaceDepositForBurn request.
message MsgReplaceDepositForBurnResponse {}
