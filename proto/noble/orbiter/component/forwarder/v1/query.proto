syntax = "proto3";

package noble.orbiter.component.forwarder.v1;

import "amino/amino.proto";
import "cosmos/query/v1/query.proto";
import "google/api/annotations.proto";
import "noble/orbiter/core/v1/id.proto";
import "cosmos/base/query/v1beta1/pagination.proto";

option go_package = "github.com/noble-assets/orbiter/types/component/forwarder";

// Query defines the gRPC query service for the Orbiter
// forwarder component.
service Query {
  // PausedProtocols retrieves all paused protocol IDs.
  rpc PausedProtocols(QueryPausedProtocolsRequest) returns (QueryPausedProtocolsResponse) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get = "/noble/orbiter/forwarder/v1/paused/protocols";
  }

  // PausedCrossChains retrieves all paused counterparties for a specific protocol.
  rpc PausedCrossChains(QueryPausedCrossChainsRequest) returns (QueryPausedCrossChainsResponse) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get = "/noble/orbiter/forwarder/v1/paused/protocols/{protocol_id}/counterparties";
  }

  // IsProtocolPaused checks if a specific protocol is paused.
  rpc IsProtocolPaused(QueryIsProtocolPausedRequest) returns (QueryIsProtocolPausedResponse) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get = "/noble/orbiter/forwarder/v1/paused/protocols/{protocol_id}";
  }

  // IsCrossChainPaused checks if a specific counterparty for a protocol is paused.
  rpc IsCrossChainPaused(QueryIsCrossChainPausedRequest) returns (QueryIsCrossChainPausedResponse) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get = "/noble/orbiter/forwarder/v1/paused/protocols/{protocol_id}/counterparties/{counterparty_id}";
  }
}

// QueryPausedProtocolsRequest is the request type for the Query/PausedProtocol RPC method.
message QueryPausedProtocolsRequest {}

// QueryPausedProtocolsResponse is the response type for the Query/PausedProtocol RPC method.
message QueryPausedProtocolsResponse {
  repeated noble.orbiter.core.v1.ProtocolID protocol_ids = 1 [(amino.dont_omitempty) = true];
}

// QueryPausedCrossChainsRequest is the request type for the Query/PausedCrossChains RPC method.
message QueryPausedCrossChainsRequest {
  // protocol_id is the protocol to query paused counterparties for.
  string protocol_id = 1;

  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

// QueryPausedCrossChainsResponse is the response type for the Query/PausedCrossChains RPC method.
message QueryPausedCrossChainsResponse {
  // counterparty_ids is the list of paused counterparty identifiers for the specified protocol ID.
  repeated string counterparty_ids = 1;

  // pagination defines the pagination in the response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryIsProtocolPausedRequest is the request type for the Query/IsProtocolPaused RPC method.
message QueryIsProtocolPausedRequest {
  // protocol_id is the protocol to check.
  string protocol_id = 1;
}

// QueryIsProtocolPausedResponse is the response type for the Query/IsProtocolPaused RPC method.
message QueryIsProtocolPausedResponse {
  // is_paused indicates whether the protocol is paused.
  bool is_paused = 1;
}

// QueryIsCrossChainPausedRequest is the request type for the Query/IsCrossChainPaused RPC method.
message QueryIsCrossChainPausedRequest {
  // protocol_id is the protocol to check.
  string protocol_id = 1;
  // counterparty_id is the counterparty identifier to check.
  string counterparty_id = 2;
}

// QueryIsCrossChainPausedResponse is the response type for the Query/IsCrossChainPaused RPC method.
message QueryIsCrossChainPausedResponse {
  // is_paused indicates whether the counterparty is paused.
  bool is_paused = 1;
}
