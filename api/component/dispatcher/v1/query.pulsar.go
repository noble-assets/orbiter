// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package dispatcherv1

import (
	_ "cosmossdk.io/api/cosmos/query/v1"
	fmt "fmt"
	runtime "github.com/cosmos/cosmos-proto/runtime"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	io "io"
	reflect "reflect"
	sync "sync"
)

var (
	md_QueryDispatchedCountsRequest                             protoreflect.MessageDescriptor
	fd_QueryDispatchedCountsRequest_source_protocol_id          protoreflect.FieldDescriptor
	fd_QueryDispatchedCountsRequest_source_counterparty_id      protoreflect.FieldDescriptor
	fd_QueryDispatchedCountsRequest_destination_protocol_id     protoreflect.FieldDescriptor
	fd_QueryDispatchedCountsRequest_destination_counterparty_id protoreflect.FieldDescriptor
)

func init() {
	file_noble_orbiter_component_dispatcher_v1_query_proto_init()
	md_QueryDispatchedCountsRequest = File_noble_orbiter_component_dispatcher_v1_query_proto.Messages().ByName("QueryDispatchedCountsRequest")
	fd_QueryDispatchedCountsRequest_source_protocol_id = md_QueryDispatchedCountsRequest.Fields().ByName("source_protocol_id")
	fd_QueryDispatchedCountsRequest_source_counterparty_id = md_QueryDispatchedCountsRequest.Fields().ByName("source_counterparty_id")
	fd_QueryDispatchedCountsRequest_destination_protocol_id = md_QueryDispatchedCountsRequest.Fields().ByName("destination_protocol_id")
	fd_QueryDispatchedCountsRequest_destination_counterparty_id = md_QueryDispatchedCountsRequest.Fields().ByName("destination_counterparty_id")
}

var _ protoreflect.Message = (*fastReflection_QueryDispatchedCountsRequest)(nil)

type fastReflection_QueryDispatchedCountsRequest QueryDispatchedCountsRequest

func (x *QueryDispatchedCountsRequest) ProtoReflect() protoreflect.Message {
	return (*fastReflection_QueryDispatchedCountsRequest)(x)
}

func (x *QueryDispatchedCountsRequest) slowProtoReflect() protoreflect.Message {
	mi := &file_noble_orbiter_component_dispatcher_v1_query_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_QueryDispatchedCountsRequest_messageType fastReflection_QueryDispatchedCountsRequest_messageType
var _ protoreflect.MessageType = fastReflection_QueryDispatchedCountsRequest_messageType{}

type fastReflection_QueryDispatchedCountsRequest_messageType struct{}

func (x fastReflection_QueryDispatchedCountsRequest_messageType) Zero() protoreflect.Message {
	return (*fastReflection_QueryDispatchedCountsRequest)(nil)
}
func (x fastReflection_QueryDispatchedCountsRequest_messageType) New() protoreflect.Message {
	return new(fastReflection_QueryDispatchedCountsRequest)
}
func (x fastReflection_QueryDispatchedCountsRequest_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_QueryDispatchedCountsRequest
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_QueryDispatchedCountsRequest) Descriptor() protoreflect.MessageDescriptor {
	return md_QueryDispatchedCountsRequest
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_QueryDispatchedCountsRequest) Type() protoreflect.MessageType {
	return _fastReflection_QueryDispatchedCountsRequest_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_QueryDispatchedCountsRequest) New() protoreflect.Message {
	return new(fastReflection_QueryDispatchedCountsRequest)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_QueryDispatchedCountsRequest) Interface() protoreflect.ProtoMessage {
	return (*QueryDispatchedCountsRequest)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_QueryDispatchedCountsRequest) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.SourceProtocolId != "" {
		value := protoreflect.ValueOfString(x.SourceProtocolId)
		if !f(fd_QueryDispatchedCountsRequest_source_protocol_id, value) {
			return
		}
	}
	if x.SourceCounterpartyId != "" {
		value := protoreflect.ValueOfString(x.SourceCounterpartyId)
		if !f(fd_QueryDispatchedCountsRequest_source_counterparty_id, value) {
			return
		}
	}
	if x.DestinationProtocolId != "" {
		value := protoreflect.ValueOfString(x.DestinationProtocolId)
		if !f(fd_QueryDispatchedCountsRequest_destination_protocol_id, value) {
			return
		}
	}
	if x.DestinationCounterpartyId != "" {
		value := protoreflect.ValueOfString(x.DestinationCounterpartyId)
		if !f(fd_QueryDispatchedCountsRequest_destination_counterparty_id, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_QueryDispatchedCountsRequest) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "noble.orbiter.component.dispatcher.v1.QueryDispatchedCountsRequest.source_protocol_id":
		return x.SourceProtocolId != ""
	case "noble.orbiter.component.dispatcher.v1.QueryDispatchedCountsRequest.source_counterparty_id":
		return x.SourceCounterpartyId != ""
	case "noble.orbiter.component.dispatcher.v1.QueryDispatchedCountsRequest.destination_protocol_id":
		return x.DestinationProtocolId != ""
	case "noble.orbiter.component.dispatcher.v1.QueryDispatchedCountsRequest.destination_counterparty_id":
		return x.DestinationCounterpartyId != ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.orbiter.component.dispatcher.v1.QueryDispatchedCountsRequest"))
		}
		panic(fmt.Errorf("message noble.orbiter.component.dispatcher.v1.QueryDispatchedCountsRequest does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryDispatchedCountsRequest) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "noble.orbiter.component.dispatcher.v1.QueryDispatchedCountsRequest.source_protocol_id":
		x.SourceProtocolId = ""
	case "noble.orbiter.component.dispatcher.v1.QueryDispatchedCountsRequest.source_counterparty_id":
		x.SourceCounterpartyId = ""
	case "noble.orbiter.component.dispatcher.v1.QueryDispatchedCountsRequest.destination_protocol_id":
		x.DestinationProtocolId = ""
	case "noble.orbiter.component.dispatcher.v1.QueryDispatchedCountsRequest.destination_counterparty_id":
		x.DestinationCounterpartyId = ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.orbiter.component.dispatcher.v1.QueryDispatchedCountsRequest"))
		}
		panic(fmt.Errorf("message noble.orbiter.component.dispatcher.v1.QueryDispatchedCountsRequest does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_QueryDispatchedCountsRequest) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "noble.orbiter.component.dispatcher.v1.QueryDispatchedCountsRequest.source_protocol_id":
		value := x.SourceProtocolId
		return protoreflect.ValueOfString(value)
	case "noble.orbiter.component.dispatcher.v1.QueryDispatchedCountsRequest.source_counterparty_id":
		value := x.SourceCounterpartyId
		return protoreflect.ValueOfString(value)
	case "noble.orbiter.component.dispatcher.v1.QueryDispatchedCountsRequest.destination_protocol_id":
		value := x.DestinationProtocolId
		return protoreflect.ValueOfString(value)
	case "noble.orbiter.component.dispatcher.v1.QueryDispatchedCountsRequest.destination_counterparty_id":
		value := x.DestinationCounterpartyId
		return protoreflect.ValueOfString(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.orbiter.component.dispatcher.v1.QueryDispatchedCountsRequest"))
		}
		panic(fmt.Errorf("message noble.orbiter.component.dispatcher.v1.QueryDispatchedCountsRequest does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryDispatchedCountsRequest) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "noble.orbiter.component.dispatcher.v1.QueryDispatchedCountsRequest.source_protocol_id":
		x.SourceProtocolId = value.Interface().(string)
	case "noble.orbiter.component.dispatcher.v1.QueryDispatchedCountsRequest.source_counterparty_id":
		x.SourceCounterpartyId = value.Interface().(string)
	case "noble.orbiter.component.dispatcher.v1.QueryDispatchedCountsRequest.destination_protocol_id":
		x.DestinationProtocolId = value.Interface().(string)
	case "noble.orbiter.component.dispatcher.v1.QueryDispatchedCountsRequest.destination_counterparty_id":
		x.DestinationCounterpartyId = value.Interface().(string)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.orbiter.component.dispatcher.v1.QueryDispatchedCountsRequest"))
		}
		panic(fmt.Errorf("message noble.orbiter.component.dispatcher.v1.QueryDispatchedCountsRequest does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryDispatchedCountsRequest) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "noble.orbiter.component.dispatcher.v1.QueryDispatchedCountsRequest.source_protocol_id":
		panic(fmt.Errorf("field source_protocol_id of message noble.orbiter.component.dispatcher.v1.QueryDispatchedCountsRequest is not mutable"))
	case "noble.orbiter.component.dispatcher.v1.QueryDispatchedCountsRequest.source_counterparty_id":
		panic(fmt.Errorf("field source_counterparty_id of message noble.orbiter.component.dispatcher.v1.QueryDispatchedCountsRequest is not mutable"))
	case "noble.orbiter.component.dispatcher.v1.QueryDispatchedCountsRequest.destination_protocol_id":
		panic(fmt.Errorf("field destination_protocol_id of message noble.orbiter.component.dispatcher.v1.QueryDispatchedCountsRequest is not mutable"))
	case "noble.orbiter.component.dispatcher.v1.QueryDispatchedCountsRequest.destination_counterparty_id":
		panic(fmt.Errorf("field destination_counterparty_id of message noble.orbiter.component.dispatcher.v1.QueryDispatchedCountsRequest is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.orbiter.component.dispatcher.v1.QueryDispatchedCountsRequest"))
		}
		panic(fmt.Errorf("message noble.orbiter.component.dispatcher.v1.QueryDispatchedCountsRequest does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_QueryDispatchedCountsRequest) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "noble.orbiter.component.dispatcher.v1.QueryDispatchedCountsRequest.source_protocol_id":
		return protoreflect.ValueOfString("")
	case "noble.orbiter.component.dispatcher.v1.QueryDispatchedCountsRequest.source_counterparty_id":
		return protoreflect.ValueOfString("")
	case "noble.orbiter.component.dispatcher.v1.QueryDispatchedCountsRequest.destination_protocol_id":
		return protoreflect.ValueOfString("")
	case "noble.orbiter.component.dispatcher.v1.QueryDispatchedCountsRequest.destination_counterparty_id":
		return protoreflect.ValueOfString("")
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.orbiter.component.dispatcher.v1.QueryDispatchedCountsRequest"))
		}
		panic(fmt.Errorf("message noble.orbiter.component.dispatcher.v1.QueryDispatchedCountsRequest does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_QueryDispatchedCountsRequest) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in noble.orbiter.component.dispatcher.v1.QueryDispatchedCountsRequest", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_QueryDispatchedCountsRequest) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryDispatchedCountsRequest) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_QueryDispatchedCountsRequest) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_QueryDispatchedCountsRequest) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*QueryDispatchedCountsRequest)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.SourceProtocolId)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.SourceCounterpartyId)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.DestinationProtocolId)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.DestinationCounterpartyId)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*QueryDispatchedCountsRequest)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.DestinationCounterpartyId) > 0 {
			i -= len(x.DestinationCounterpartyId)
			copy(dAtA[i:], x.DestinationCounterpartyId)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.DestinationCounterpartyId)))
			i--
			dAtA[i] = 0x22
		}
		if len(x.DestinationProtocolId) > 0 {
			i -= len(x.DestinationProtocolId)
			copy(dAtA[i:], x.DestinationProtocolId)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.DestinationProtocolId)))
			i--
			dAtA[i] = 0x1a
		}
		if len(x.SourceCounterpartyId) > 0 {
			i -= len(x.SourceCounterpartyId)
			copy(dAtA[i:], x.SourceCounterpartyId)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.SourceCounterpartyId)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.SourceProtocolId) > 0 {
			i -= len(x.SourceProtocolId)
			copy(dAtA[i:], x.SourceProtocolId)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.SourceProtocolId)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*QueryDispatchedCountsRequest)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: QueryDispatchedCountsRequest: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: QueryDispatchedCountsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field SourceProtocolId", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.SourceProtocolId = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field SourceCounterpartyId", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.SourceCounterpartyId = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field DestinationProtocolId", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.DestinationProtocolId = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field DestinationCounterpartyId", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.DestinationCounterpartyId = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_QueryDispatchedCountsByProtocolIDRequest             protoreflect.MessageDescriptor
	fd_QueryDispatchedCountsByProtocolIDRequest_protocol_id protoreflect.FieldDescriptor
)

func init() {
	file_noble_orbiter_component_dispatcher_v1_query_proto_init()
	md_QueryDispatchedCountsByProtocolIDRequest = File_noble_orbiter_component_dispatcher_v1_query_proto.Messages().ByName("QueryDispatchedCountsByProtocolIDRequest")
	fd_QueryDispatchedCountsByProtocolIDRequest_protocol_id = md_QueryDispatchedCountsByProtocolIDRequest.Fields().ByName("protocol_id")
}

var _ protoreflect.Message = (*fastReflection_QueryDispatchedCountsByProtocolIDRequest)(nil)

type fastReflection_QueryDispatchedCountsByProtocolIDRequest QueryDispatchedCountsByProtocolIDRequest

func (x *QueryDispatchedCountsByProtocolIDRequest) ProtoReflect() protoreflect.Message {
	return (*fastReflection_QueryDispatchedCountsByProtocolIDRequest)(x)
}

func (x *QueryDispatchedCountsByProtocolIDRequest) slowProtoReflect() protoreflect.Message {
	mi := &file_noble_orbiter_component_dispatcher_v1_query_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_QueryDispatchedCountsByProtocolIDRequest_messageType fastReflection_QueryDispatchedCountsByProtocolIDRequest_messageType
var _ protoreflect.MessageType = fastReflection_QueryDispatchedCountsByProtocolIDRequest_messageType{}

type fastReflection_QueryDispatchedCountsByProtocolIDRequest_messageType struct{}

func (x fastReflection_QueryDispatchedCountsByProtocolIDRequest_messageType) Zero() protoreflect.Message {
	return (*fastReflection_QueryDispatchedCountsByProtocolIDRequest)(nil)
}
func (x fastReflection_QueryDispatchedCountsByProtocolIDRequest_messageType) New() protoreflect.Message {
	return new(fastReflection_QueryDispatchedCountsByProtocolIDRequest)
}
func (x fastReflection_QueryDispatchedCountsByProtocolIDRequest_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_QueryDispatchedCountsByProtocolIDRequest
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_QueryDispatchedCountsByProtocolIDRequest) Descriptor() protoreflect.MessageDescriptor {
	return md_QueryDispatchedCountsByProtocolIDRequest
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_QueryDispatchedCountsByProtocolIDRequest) Type() protoreflect.MessageType {
	return _fastReflection_QueryDispatchedCountsByProtocolIDRequest_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_QueryDispatchedCountsByProtocolIDRequest) New() protoreflect.Message {
	return new(fastReflection_QueryDispatchedCountsByProtocolIDRequest)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_QueryDispatchedCountsByProtocolIDRequest) Interface() protoreflect.ProtoMessage {
	return (*QueryDispatchedCountsByProtocolIDRequest)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_QueryDispatchedCountsByProtocolIDRequest) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.ProtocolId != "" {
		value := protoreflect.ValueOfString(x.ProtocolId)
		if !f(fd_QueryDispatchedCountsByProtocolIDRequest_protocol_id, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_QueryDispatchedCountsByProtocolIDRequest) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "noble.orbiter.component.dispatcher.v1.QueryDispatchedCountsByProtocolIDRequest.protocol_id":
		return x.ProtocolId != ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.orbiter.component.dispatcher.v1.QueryDispatchedCountsByProtocolIDRequest"))
		}
		panic(fmt.Errorf("message noble.orbiter.component.dispatcher.v1.QueryDispatchedCountsByProtocolIDRequest does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryDispatchedCountsByProtocolIDRequest) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "noble.orbiter.component.dispatcher.v1.QueryDispatchedCountsByProtocolIDRequest.protocol_id":
		x.ProtocolId = ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.orbiter.component.dispatcher.v1.QueryDispatchedCountsByProtocolIDRequest"))
		}
		panic(fmt.Errorf("message noble.orbiter.component.dispatcher.v1.QueryDispatchedCountsByProtocolIDRequest does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_QueryDispatchedCountsByProtocolIDRequest) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "noble.orbiter.component.dispatcher.v1.QueryDispatchedCountsByProtocolIDRequest.protocol_id":
		value := x.ProtocolId
		return protoreflect.ValueOfString(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.orbiter.component.dispatcher.v1.QueryDispatchedCountsByProtocolIDRequest"))
		}
		panic(fmt.Errorf("message noble.orbiter.component.dispatcher.v1.QueryDispatchedCountsByProtocolIDRequest does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryDispatchedCountsByProtocolIDRequest) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "noble.orbiter.component.dispatcher.v1.QueryDispatchedCountsByProtocolIDRequest.protocol_id":
		x.ProtocolId = value.Interface().(string)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.orbiter.component.dispatcher.v1.QueryDispatchedCountsByProtocolIDRequest"))
		}
		panic(fmt.Errorf("message noble.orbiter.component.dispatcher.v1.QueryDispatchedCountsByProtocolIDRequest does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryDispatchedCountsByProtocolIDRequest) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "noble.orbiter.component.dispatcher.v1.QueryDispatchedCountsByProtocolIDRequest.protocol_id":
		panic(fmt.Errorf("field protocol_id of message noble.orbiter.component.dispatcher.v1.QueryDispatchedCountsByProtocolIDRequest is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.orbiter.component.dispatcher.v1.QueryDispatchedCountsByProtocolIDRequest"))
		}
		panic(fmt.Errorf("message noble.orbiter.component.dispatcher.v1.QueryDispatchedCountsByProtocolIDRequest does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_QueryDispatchedCountsByProtocolIDRequest) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "noble.orbiter.component.dispatcher.v1.QueryDispatchedCountsByProtocolIDRequest.protocol_id":
		return protoreflect.ValueOfString("")
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.orbiter.component.dispatcher.v1.QueryDispatchedCountsByProtocolIDRequest"))
		}
		panic(fmt.Errorf("message noble.orbiter.component.dispatcher.v1.QueryDispatchedCountsByProtocolIDRequest does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_QueryDispatchedCountsByProtocolIDRequest) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in noble.orbiter.component.dispatcher.v1.QueryDispatchedCountsByProtocolIDRequest", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_QueryDispatchedCountsByProtocolIDRequest) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryDispatchedCountsByProtocolIDRequest) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_QueryDispatchedCountsByProtocolIDRequest) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_QueryDispatchedCountsByProtocolIDRequest) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*QueryDispatchedCountsByProtocolIDRequest)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.ProtocolId)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*QueryDispatchedCountsByProtocolIDRequest)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.ProtocolId) > 0 {
			i -= len(x.ProtocolId)
			copy(dAtA[i:], x.ProtocolId)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.ProtocolId)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*QueryDispatchedCountsByProtocolIDRequest)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: QueryDispatchedCountsByProtocolIDRequest: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: QueryDispatchedCountsByProtocolIDRequest: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ProtocolId", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.ProtocolId = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var _ protoreflect.List = (*_QueryDispatchedCountsResponse_1_list)(nil)

type _QueryDispatchedCountsResponse_1_list struct {
	list *[]*DispatchCountEntry
}

func (x *_QueryDispatchedCountsResponse_1_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_QueryDispatchedCountsResponse_1_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_QueryDispatchedCountsResponse_1_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*DispatchCountEntry)
	(*x.list)[i] = concreteValue
}

func (x *_QueryDispatchedCountsResponse_1_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*DispatchCountEntry)
	*x.list = append(*x.list, concreteValue)
}

func (x *_QueryDispatchedCountsResponse_1_list) AppendMutable() protoreflect.Value {
	v := new(DispatchCountEntry)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_QueryDispatchedCountsResponse_1_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_QueryDispatchedCountsResponse_1_list) NewElement() protoreflect.Value {
	v := new(DispatchCountEntry)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_QueryDispatchedCountsResponse_1_list) IsValid() bool {
	return x.list != nil
}

var (
	md_QueryDispatchedCountsResponse        protoreflect.MessageDescriptor
	fd_QueryDispatchedCountsResponse_counts protoreflect.FieldDescriptor
)

func init() {
	file_noble_orbiter_component_dispatcher_v1_query_proto_init()
	md_QueryDispatchedCountsResponse = File_noble_orbiter_component_dispatcher_v1_query_proto.Messages().ByName("QueryDispatchedCountsResponse")
	fd_QueryDispatchedCountsResponse_counts = md_QueryDispatchedCountsResponse.Fields().ByName("counts")
}

var _ protoreflect.Message = (*fastReflection_QueryDispatchedCountsResponse)(nil)

type fastReflection_QueryDispatchedCountsResponse QueryDispatchedCountsResponse

func (x *QueryDispatchedCountsResponse) ProtoReflect() protoreflect.Message {
	return (*fastReflection_QueryDispatchedCountsResponse)(x)
}

func (x *QueryDispatchedCountsResponse) slowProtoReflect() protoreflect.Message {
	mi := &file_noble_orbiter_component_dispatcher_v1_query_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_QueryDispatchedCountsResponse_messageType fastReflection_QueryDispatchedCountsResponse_messageType
var _ protoreflect.MessageType = fastReflection_QueryDispatchedCountsResponse_messageType{}

type fastReflection_QueryDispatchedCountsResponse_messageType struct{}

func (x fastReflection_QueryDispatchedCountsResponse_messageType) Zero() protoreflect.Message {
	return (*fastReflection_QueryDispatchedCountsResponse)(nil)
}
func (x fastReflection_QueryDispatchedCountsResponse_messageType) New() protoreflect.Message {
	return new(fastReflection_QueryDispatchedCountsResponse)
}
func (x fastReflection_QueryDispatchedCountsResponse_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_QueryDispatchedCountsResponse
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_QueryDispatchedCountsResponse) Descriptor() protoreflect.MessageDescriptor {
	return md_QueryDispatchedCountsResponse
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_QueryDispatchedCountsResponse) Type() protoreflect.MessageType {
	return _fastReflection_QueryDispatchedCountsResponse_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_QueryDispatchedCountsResponse) New() protoreflect.Message {
	return new(fastReflection_QueryDispatchedCountsResponse)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_QueryDispatchedCountsResponse) Interface() protoreflect.ProtoMessage {
	return (*QueryDispatchedCountsResponse)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_QueryDispatchedCountsResponse) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if len(x.Counts) != 0 {
		value := protoreflect.ValueOfList(&_QueryDispatchedCountsResponse_1_list{list: &x.Counts})
		if !f(fd_QueryDispatchedCountsResponse_counts, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_QueryDispatchedCountsResponse) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "noble.orbiter.component.dispatcher.v1.QueryDispatchedCountsResponse.counts":
		return len(x.Counts) != 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.orbiter.component.dispatcher.v1.QueryDispatchedCountsResponse"))
		}
		panic(fmt.Errorf("message noble.orbiter.component.dispatcher.v1.QueryDispatchedCountsResponse does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryDispatchedCountsResponse) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "noble.orbiter.component.dispatcher.v1.QueryDispatchedCountsResponse.counts":
		x.Counts = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.orbiter.component.dispatcher.v1.QueryDispatchedCountsResponse"))
		}
		panic(fmt.Errorf("message noble.orbiter.component.dispatcher.v1.QueryDispatchedCountsResponse does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_QueryDispatchedCountsResponse) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "noble.orbiter.component.dispatcher.v1.QueryDispatchedCountsResponse.counts":
		if len(x.Counts) == 0 {
			return protoreflect.ValueOfList(&_QueryDispatchedCountsResponse_1_list{})
		}
		listValue := &_QueryDispatchedCountsResponse_1_list{list: &x.Counts}
		return protoreflect.ValueOfList(listValue)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.orbiter.component.dispatcher.v1.QueryDispatchedCountsResponse"))
		}
		panic(fmt.Errorf("message noble.orbiter.component.dispatcher.v1.QueryDispatchedCountsResponse does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryDispatchedCountsResponse) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "noble.orbiter.component.dispatcher.v1.QueryDispatchedCountsResponse.counts":
		lv := value.List()
		clv := lv.(*_QueryDispatchedCountsResponse_1_list)
		x.Counts = *clv.list
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.orbiter.component.dispatcher.v1.QueryDispatchedCountsResponse"))
		}
		panic(fmt.Errorf("message noble.orbiter.component.dispatcher.v1.QueryDispatchedCountsResponse does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryDispatchedCountsResponse) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "noble.orbiter.component.dispatcher.v1.QueryDispatchedCountsResponse.counts":
		if x.Counts == nil {
			x.Counts = []*DispatchCountEntry{}
		}
		value := &_QueryDispatchedCountsResponse_1_list{list: &x.Counts}
		return protoreflect.ValueOfList(value)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.orbiter.component.dispatcher.v1.QueryDispatchedCountsResponse"))
		}
		panic(fmt.Errorf("message noble.orbiter.component.dispatcher.v1.QueryDispatchedCountsResponse does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_QueryDispatchedCountsResponse) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "noble.orbiter.component.dispatcher.v1.QueryDispatchedCountsResponse.counts":
		list := []*DispatchCountEntry{}
		return protoreflect.ValueOfList(&_QueryDispatchedCountsResponse_1_list{list: &list})
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.orbiter.component.dispatcher.v1.QueryDispatchedCountsResponse"))
		}
		panic(fmt.Errorf("message noble.orbiter.component.dispatcher.v1.QueryDispatchedCountsResponse does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_QueryDispatchedCountsResponse) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in noble.orbiter.component.dispatcher.v1.QueryDispatchedCountsResponse", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_QueryDispatchedCountsResponse) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryDispatchedCountsResponse) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_QueryDispatchedCountsResponse) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_QueryDispatchedCountsResponse) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*QueryDispatchedCountsResponse)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if len(x.Counts) > 0 {
			for _, e := range x.Counts {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*QueryDispatchedCountsResponse)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.Counts) > 0 {
			for iNdEx := len(x.Counts) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.Counts[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0xa
			}
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*QueryDispatchedCountsResponse)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: QueryDispatchedCountsResponse: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: QueryDispatchedCountsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Counts", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Counts = append(x.Counts, &DispatchCountEntry{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Counts[len(x.Counts)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_QueryDispatchedAmountsRequest                             protoreflect.MessageDescriptor
	fd_QueryDispatchedAmountsRequest_source_protocol_id          protoreflect.FieldDescriptor
	fd_QueryDispatchedAmountsRequest_source_counterparty_id      protoreflect.FieldDescriptor
	fd_QueryDispatchedAmountsRequest_destination_protocol_id     protoreflect.FieldDescriptor
	fd_QueryDispatchedAmountsRequest_destination_counterparty_id protoreflect.FieldDescriptor
	fd_QueryDispatchedAmountsRequest_denom                       protoreflect.FieldDescriptor
)

func init() {
	file_noble_orbiter_component_dispatcher_v1_query_proto_init()
	md_QueryDispatchedAmountsRequest = File_noble_orbiter_component_dispatcher_v1_query_proto.Messages().ByName("QueryDispatchedAmountsRequest")
	fd_QueryDispatchedAmountsRequest_source_protocol_id = md_QueryDispatchedAmountsRequest.Fields().ByName("source_protocol_id")
	fd_QueryDispatchedAmountsRequest_source_counterparty_id = md_QueryDispatchedAmountsRequest.Fields().ByName("source_counterparty_id")
	fd_QueryDispatchedAmountsRequest_destination_protocol_id = md_QueryDispatchedAmountsRequest.Fields().ByName("destination_protocol_id")
	fd_QueryDispatchedAmountsRequest_destination_counterparty_id = md_QueryDispatchedAmountsRequest.Fields().ByName("destination_counterparty_id")
	fd_QueryDispatchedAmountsRequest_denom = md_QueryDispatchedAmountsRequest.Fields().ByName("denom")
}

var _ protoreflect.Message = (*fastReflection_QueryDispatchedAmountsRequest)(nil)

type fastReflection_QueryDispatchedAmountsRequest QueryDispatchedAmountsRequest

func (x *QueryDispatchedAmountsRequest) ProtoReflect() protoreflect.Message {
	return (*fastReflection_QueryDispatchedAmountsRequest)(x)
}

func (x *QueryDispatchedAmountsRequest) slowProtoReflect() protoreflect.Message {
	mi := &file_noble_orbiter_component_dispatcher_v1_query_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_QueryDispatchedAmountsRequest_messageType fastReflection_QueryDispatchedAmountsRequest_messageType
var _ protoreflect.MessageType = fastReflection_QueryDispatchedAmountsRequest_messageType{}

type fastReflection_QueryDispatchedAmountsRequest_messageType struct{}

func (x fastReflection_QueryDispatchedAmountsRequest_messageType) Zero() protoreflect.Message {
	return (*fastReflection_QueryDispatchedAmountsRequest)(nil)
}
func (x fastReflection_QueryDispatchedAmountsRequest_messageType) New() protoreflect.Message {
	return new(fastReflection_QueryDispatchedAmountsRequest)
}
func (x fastReflection_QueryDispatchedAmountsRequest_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_QueryDispatchedAmountsRequest
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_QueryDispatchedAmountsRequest) Descriptor() protoreflect.MessageDescriptor {
	return md_QueryDispatchedAmountsRequest
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_QueryDispatchedAmountsRequest) Type() protoreflect.MessageType {
	return _fastReflection_QueryDispatchedAmountsRequest_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_QueryDispatchedAmountsRequest) New() protoreflect.Message {
	return new(fastReflection_QueryDispatchedAmountsRequest)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_QueryDispatchedAmountsRequest) Interface() protoreflect.ProtoMessage {
	return (*QueryDispatchedAmountsRequest)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_QueryDispatchedAmountsRequest) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.SourceProtocolId != "" {
		value := protoreflect.ValueOfString(x.SourceProtocolId)
		if !f(fd_QueryDispatchedAmountsRequest_source_protocol_id, value) {
			return
		}
	}
	if x.SourceCounterpartyId != "" {
		value := protoreflect.ValueOfString(x.SourceCounterpartyId)
		if !f(fd_QueryDispatchedAmountsRequest_source_counterparty_id, value) {
			return
		}
	}
	if x.DestinationProtocolId != "" {
		value := protoreflect.ValueOfString(x.DestinationProtocolId)
		if !f(fd_QueryDispatchedAmountsRequest_destination_protocol_id, value) {
			return
		}
	}
	if x.DestinationCounterpartyId != "" {
		value := protoreflect.ValueOfString(x.DestinationCounterpartyId)
		if !f(fd_QueryDispatchedAmountsRequest_destination_counterparty_id, value) {
			return
		}
	}
	if x.Denom != "" {
		value := protoreflect.ValueOfString(x.Denom)
		if !f(fd_QueryDispatchedAmountsRequest_denom, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_QueryDispatchedAmountsRequest) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "noble.orbiter.component.dispatcher.v1.QueryDispatchedAmountsRequest.source_protocol_id":
		return x.SourceProtocolId != ""
	case "noble.orbiter.component.dispatcher.v1.QueryDispatchedAmountsRequest.source_counterparty_id":
		return x.SourceCounterpartyId != ""
	case "noble.orbiter.component.dispatcher.v1.QueryDispatchedAmountsRequest.destination_protocol_id":
		return x.DestinationProtocolId != ""
	case "noble.orbiter.component.dispatcher.v1.QueryDispatchedAmountsRequest.destination_counterparty_id":
		return x.DestinationCounterpartyId != ""
	case "noble.orbiter.component.dispatcher.v1.QueryDispatchedAmountsRequest.denom":
		return x.Denom != ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.orbiter.component.dispatcher.v1.QueryDispatchedAmountsRequest"))
		}
		panic(fmt.Errorf("message noble.orbiter.component.dispatcher.v1.QueryDispatchedAmountsRequest does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryDispatchedAmountsRequest) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "noble.orbiter.component.dispatcher.v1.QueryDispatchedAmountsRequest.source_protocol_id":
		x.SourceProtocolId = ""
	case "noble.orbiter.component.dispatcher.v1.QueryDispatchedAmountsRequest.source_counterparty_id":
		x.SourceCounterpartyId = ""
	case "noble.orbiter.component.dispatcher.v1.QueryDispatchedAmountsRequest.destination_protocol_id":
		x.DestinationProtocolId = ""
	case "noble.orbiter.component.dispatcher.v1.QueryDispatchedAmountsRequest.destination_counterparty_id":
		x.DestinationCounterpartyId = ""
	case "noble.orbiter.component.dispatcher.v1.QueryDispatchedAmountsRequest.denom":
		x.Denom = ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.orbiter.component.dispatcher.v1.QueryDispatchedAmountsRequest"))
		}
		panic(fmt.Errorf("message noble.orbiter.component.dispatcher.v1.QueryDispatchedAmountsRequest does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_QueryDispatchedAmountsRequest) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "noble.orbiter.component.dispatcher.v1.QueryDispatchedAmountsRequest.source_protocol_id":
		value := x.SourceProtocolId
		return protoreflect.ValueOfString(value)
	case "noble.orbiter.component.dispatcher.v1.QueryDispatchedAmountsRequest.source_counterparty_id":
		value := x.SourceCounterpartyId
		return protoreflect.ValueOfString(value)
	case "noble.orbiter.component.dispatcher.v1.QueryDispatchedAmountsRequest.destination_protocol_id":
		value := x.DestinationProtocolId
		return protoreflect.ValueOfString(value)
	case "noble.orbiter.component.dispatcher.v1.QueryDispatchedAmountsRequest.destination_counterparty_id":
		value := x.DestinationCounterpartyId
		return protoreflect.ValueOfString(value)
	case "noble.orbiter.component.dispatcher.v1.QueryDispatchedAmountsRequest.denom":
		value := x.Denom
		return protoreflect.ValueOfString(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.orbiter.component.dispatcher.v1.QueryDispatchedAmountsRequest"))
		}
		panic(fmt.Errorf("message noble.orbiter.component.dispatcher.v1.QueryDispatchedAmountsRequest does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryDispatchedAmountsRequest) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "noble.orbiter.component.dispatcher.v1.QueryDispatchedAmountsRequest.source_protocol_id":
		x.SourceProtocolId = value.Interface().(string)
	case "noble.orbiter.component.dispatcher.v1.QueryDispatchedAmountsRequest.source_counterparty_id":
		x.SourceCounterpartyId = value.Interface().(string)
	case "noble.orbiter.component.dispatcher.v1.QueryDispatchedAmountsRequest.destination_protocol_id":
		x.DestinationProtocolId = value.Interface().(string)
	case "noble.orbiter.component.dispatcher.v1.QueryDispatchedAmountsRequest.destination_counterparty_id":
		x.DestinationCounterpartyId = value.Interface().(string)
	case "noble.orbiter.component.dispatcher.v1.QueryDispatchedAmountsRequest.denom":
		x.Denom = value.Interface().(string)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.orbiter.component.dispatcher.v1.QueryDispatchedAmountsRequest"))
		}
		panic(fmt.Errorf("message noble.orbiter.component.dispatcher.v1.QueryDispatchedAmountsRequest does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryDispatchedAmountsRequest) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "noble.orbiter.component.dispatcher.v1.QueryDispatchedAmountsRequest.source_protocol_id":
		panic(fmt.Errorf("field source_protocol_id of message noble.orbiter.component.dispatcher.v1.QueryDispatchedAmountsRequest is not mutable"))
	case "noble.orbiter.component.dispatcher.v1.QueryDispatchedAmountsRequest.source_counterparty_id":
		panic(fmt.Errorf("field source_counterparty_id of message noble.orbiter.component.dispatcher.v1.QueryDispatchedAmountsRequest is not mutable"))
	case "noble.orbiter.component.dispatcher.v1.QueryDispatchedAmountsRequest.destination_protocol_id":
		panic(fmt.Errorf("field destination_protocol_id of message noble.orbiter.component.dispatcher.v1.QueryDispatchedAmountsRequest is not mutable"))
	case "noble.orbiter.component.dispatcher.v1.QueryDispatchedAmountsRequest.destination_counterparty_id":
		panic(fmt.Errorf("field destination_counterparty_id of message noble.orbiter.component.dispatcher.v1.QueryDispatchedAmountsRequest is not mutable"))
	case "noble.orbiter.component.dispatcher.v1.QueryDispatchedAmountsRequest.denom":
		panic(fmt.Errorf("field denom of message noble.orbiter.component.dispatcher.v1.QueryDispatchedAmountsRequest is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.orbiter.component.dispatcher.v1.QueryDispatchedAmountsRequest"))
		}
		panic(fmt.Errorf("message noble.orbiter.component.dispatcher.v1.QueryDispatchedAmountsRequest does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_QueryDispatchedAmountsRequest) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "noble.orbiter.component.dispatcher.v1.QueryDispatchedAmountsRequest.source_protocol_id":
		return protoreflect.ValueOfString("")
	case "noble.orbiter.component.dispatcher.v1.QueryDispatchedAmountsRequest.source_counterparty_id":
		return protoreflect.ValueOfString("")
	case "noble.orbiter.component.dispatcher.v1.QueryDispatchedAmountsRequest.destination_protocol_id":
		return protoreflect.ValueOfString("")
	case "noble.orbiter.component.dispatcher.v1.QueryDispatchedAmountsRequest.destination_counterparty_id":
		return protoreflect.ValueOfString("")
	case "noble.orbiter.component.dispatcher.v1.QueryDispatchedAmountsRequest.denom":
		return protoreflect.ValueOfString("")
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.orbiter.component.dispatcher.v1.QueryDispatchedAmountsRequest"))
		}
		panic(fmt.Errorf("message noble.orbiter.component.dispatcher.v1.QueryDispatchedAmountsRequest does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_QueryDispatchedAmountsRequest) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in noble.orbiter.component.dispatcher.v1.QueryDispatchedAmountsRequest", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_QueryDispatchedAmountsRequest) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryDispatchedAmountsRequest) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_QueryDispatchedAmountsRequest) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_QueryDispatchedAmountsRequest) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*QueryDispatchedAmountsRequest)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.SourceProtocolId)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.SourceCounterpartyId)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.DestinationProtocolId)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.DestinationCounterpartyId)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Denom)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*QueryDispatchedAmountsRequest)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.Denom) > 0 {
			i -= len(x.Denom)
			copy(dAtA[i:], x.Denom)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Denom)))
			i--
			dAtA[i] = 0x2a
		}
		if len(x.DestinationCounterpartyId) > 0 {
			i -= len(x.DestinationCounterpartyId)
			copy(dAtA[i:], x.DestinationCounterpartyId)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.DestinationCounterpartyId)))
			i--
			dAtA[i] = 0x22
		}
		if len(x.DestinationProtocolId) > 0 {
			i -= len(x.DestinationProtocolId)
			copy(dAtA[i:], x.DestinationProtocolId)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.DestinationProtocolId)))
			i--
			dAtA[i] = 0x1a
		}
		if len(x.SourceCounterpartyId) > 0 {
			i -= len(x.SourceCounterpartyId)
			copy(dAtA[i:], x.SourceCounterpartyId)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.SourceCounterpartyId)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.SourceProtocolId) > 0 {
			i -= len(x.SourceProtocolId)
			copy(dAtA[i:], x.SourceProtocolId)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.SourceProtocolId)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*QueryDispatchedAmountsRequest)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: QueryDispatchedAmountsRequest: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: QueryDispatchedAmountsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field SourceProtocolId", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.SourceProtocolId = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field SourceCounterpartyId", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.SourceCounterpartyId = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field DestinationProtocolId", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.DestinationProtocolId = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field DestinationCounterpartyId", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.DestinationCounterpartyId = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 5:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Denom = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_QueryDispatchedAmountsByProtocolIDRequest             protoreflect.MessageDescriptor
	fd_QueryDispatchedAmountsByProtocolIDRequest_protocol_id protoreflect.FieldDescriptor
)

func init() {
	file_noble_orbiter_component_dispatcher_v1_query_proto_init()
	md_QueryDispatchedAmountsByProtocolIDRequest = File_noble_orbiter_component_dispatcher_v1_query_proto.Messages().ByName("QueryDispatchedAmountsByProtocolIDRequest")
	fd_QueryDispatchedAmountsByProtocolIDRequest_protocol_id = md_QueryDispatchedAmountsByProtocolIDRequest.Fields().ByName("protocol_id")
}

var _ protoreflect.Message = (*fastReflection_QueryDispatchedAmountsByProtocolIDRequest)(nil)

type fastReflection_QueryDispatchedAmountsByProtocolIDRequest QueryDispatchedAmountsByProtocolIDRequest

func (x *QueryDispatchedAmountsByProtocolIDRequest) ProtoReflect() protoreflect.Message {
	return (*fastReflection_QueryDispatchedAmountsByProtocolIDRequest)(x)
}

func (x *QueryDispatchedAmountsByProtocolIDRequest) slowProtoReflect() protoreflect.Message {
	mi := &file_noble_orbiter_component_dispatcher_v1_query_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_QueryDispatchedAmountsByProtocolIDRequest_messageType fastReflection_QueryDispatchedAmountsByProtocolIDRequest_messageType
var _ protoreflect.MessageType = fastReflection_QueryDispatchedAmountsByProtocolIDRequest_messageType{}

type fastReflection_QueryDispatchedAmountsByProtocolIDRequest_messageType struct{}

func (x fastReflection_QueryDispatchedAmountsByProtocolIDRequest_messageType) Zero() protoreflect.Message {
	return (*fastReflection_QueryDispatchedAmountsByProtocolIDRequest)(nil)
}
func (x fastReflection_QueryDispatchedAmountsByProtocolIDRequest_messageType) New() protoreflect.Message {
	return new(fastReflection_QueryDispatchedAmountsByProtocolIDRequest)
}
func (x fastReflection_QueryDispatchedAmountsByProtocolIDRequest_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_QueryDispatchedAmountsByProtocolIDRequest
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_QueryDispatchedAmountsByProtocolIDRequest) Descriptor() protoreflect.MessageDescriptor {
	return md_QueryDispatchedAmountsByProtocolIDRequest
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_QueryDispatchedAmountsByProtocolIDRequest) Type() protoreflect.MessageType {
	return _fastReflection_QueryDispatchedAmountsByProtocolIDRequest_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_QueryDispatchedAmountsByProtocolIDRequest) New() protoreflect.Message {
	return new(fastReflection_QueryDispatchedAmountsByProtocolIDRequest)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_QueryDispatchedAmountsByProtocolIDRequest) Interface() protoreflect.ProtoMessage {
	return (*QueryDispatchedAmountsByProtocolIDRequest)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_QueryDispatchedAmountsByProtocolIDRequest) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.ProtocolId != "" {
		value := protoreflect.ValueOfString(x.ProtocolId)
		if !f(fd_QueryDispatchedAmountsByProtocolIDRequest_protocol_id, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_QueryDispatchedAmountsByProtocolIDRequest) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "noble.orbiter.component.dispatcher.v1.QueryDispatchedAmountsByProtocolIDRequest.protocol_id":
		return x.ProtocolId != ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.orbiter.component.dispatcher.v1.QueryDispatchedAmountsByProtocolIDRequest"))
		}
		panic(fmt.Errorf("message noble.orbiter.component.dispatcher.v1.QueryDispatchedAmountsByProtocolIDRequest does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryDispatchedAmountsByProtocolIDRequest) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "noble.orbiter.component.dispatcher.v1.QueryDispatchedAmountsByProtocolIDRequest.protocol_id":
		x.ProtocolId = ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.orbiter.component.dispatcher.v1.QueryDispatchedAmountsByProtocolIDRequest"))
		}
		panic(fmt.Errorf("message noble.orbiter.component.dispatcher.v1.QueryDispatchedAmountsByProtocolIDRequest does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_QueryDispatchedAmountsByProtocolIDRequest) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "noble.orbiter.component.dispatcher.v1.QueryDispatchedAmountsByProtocolIDRequest.protocol_id":
		value := x.ProtocolId
		return protoreflect.ValueOfString(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.orbiter.component.dispatcher.v1.QueryDispatchedAmountsByProtocolIDRequest"))
		}
		panic(fmt.Errorf("message noble.orbiter.component.dispatcher.v1.QueryDispatchedAmountsByProtocolIDRequest does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryDispatchedAmountsByProtocolIDRequest) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "noble.orbiter.component.dispatcher.v1.QueryDispatchedAmountsByProtocolIDRequest.protocol_id":
		x.ProtocolId = value.Interface().(string)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.orbiter.component.dispatcher.v1.QueryDispatchedAmountsByProtocolIDRequest"))
		}
		panic(fmt.Errorf("message noble.orbiter.component.dispatcher.v1.QueryDispatchedAmountsByProtocolIDRequest does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryDispatchedAmountsByProtocolIDRequest) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "noble.orbiter.component.dispatcher.v1.QueryDispatchedAmountsByProtocolIDRequest.protocol_id":
		panic(fmt.Errorf("field protocol_id of message noble.orbiter.component.dispatcher.v1.QueryDispatchedAmountsByProtocolIDRequest is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.orbiter.component.dispatcher.v1.QueryDispatchedAmountsByProtocolIDRequest"))
		}
		panic(fmt.Errorf("message noble.orbiter.component.dispatcher.v1.QueryDispatchedAmountsByProtocolIDRequest does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_QueryDispatchedAmountsByProtocolIDRequest) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "noble.orbiter.component.dispatcher.v1.QueryDispatchedAmountsByProtocolIDRequest.protocol_id":
		return protoreflect.ValueOfString("")
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.orbiter.component.dispatcher.v1.QueryDispatchedAmountsByProtocolIDRequest"))
		}
		panic(fmt.Errorf("message noble.orbiter.component.dispatcher.v1.QueryDispatchedAmountsByProtocolIDRequest does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_QueryDispatchedAmountsByProtocolIDRequest) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in noble.orbiter.component.dispatcher.v1.QueryDispatchedAmountsByProtocolIDRequest", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_QueryDispatchedAmountsByProtocolIDRequest) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryDispatchedAmountsByProtocolIDRequest) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_QueryDispatchedAmountsByProtocolIDRequest) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_QueryDispatchedAmountsByProtocolIDRequest) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*QueryDispatchedAmountsByProtocolIDRequest)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.ProtocolId)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*QueryDispatchedAmountsByProtocolIDRequest)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.ProtocolId) > 0 {
			i -= len(x.ProtocolId)
			copy(dAtA[i:], x.ProtocolId)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.ProtocolId)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*QueryDispatchedAmountsByProtocolIDRequest)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: QueryDispatchedAmountsByProtocolIDRequest: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: QueryDispatchedAmountsByProtocolIDRequest: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ProtocolId", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.ProtocolId = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var _ protoreflect.List = (*_QueryDispatchedAmountsResponse_1_list)(nil)

type _QueryDispatchedAmountsResponse_1_list struct {
	list *[]*DispatchedAmountEntry
}

func (x *_QueryDispatchedAmountsResponse_1_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_QueryDispatchedAmountsResponse_1_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_QueryDispatchedAmountsResponse_1_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*DispatchedAmountEntry)
	(*x.list)[i] = concreteValue
}

func (x *_QueryDispatchedAmountsResponse_1_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*DispatchedAmountEntry)
	*x.list = append(*x.list, concreteValue)
}

func (x *_QueryDispatchedAmountsResponse_1_list) AppendMutable() protoreflect.Value {
	v := new(DispatchedAmountEntry)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_QueryDispatchedAmountsResponse_1_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_QueryDispatchedAmountsResponse_1_list) NewElement() protoreflect.Value {
	v := new(DispatchedAmountEntry)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_QueryDispatchedAmountsResponse_1_list) IsValid() bool {
	return x.list != nil
}

var (
	md_QueryDispatchedAmountsResponse         protoreflect.MessageDescriptor
	fd_QueryDispatchedAmountsResponse_amounts protoreflect.FieldDescriptor
)

func init() {
	file_noble_orbiter_component_dispatcher_v1_query_proto_init()
	md_QueryDispatchedAmountsResponse = File_noble_orbiter_component_dispatcher_v1_query_proto.Messages().ByName("QueryDispatchedAmountsResponse")
	fd_QueryDispatchedAmountsResponse_amounts = md_QueryDispatchedAmountsResponse.Fields().ByName("amounts")
}

var _ protoreflect.Message = (*fastReflection_QueryDispatchedAmountsResponse)(nil)

type fastReflection_QueryDispatchedAmountsResponse QueryDispatchedAmountsResponse

func (x *QueryDispatchedAmountsResponse) ProtoReflect() protoreflect.Message {
	return (*fastReflection_QueryDispatchedAmountsResponse)(x)
}

func (x *QueryDispatchedAmountsResponse) slowProtoReflect() protoreflect.Message {
	mi := &file_noble_orbiter_component_dispatcher_v1_query_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_QueryDispatchedAmountsResponse_messageType fastReflection_QueryDispatchedAmountsResponse_messageType
var _ protoreflect.MessageType = fastReflection_QueryDispatchedAmountsResponse_messageType{}

type fastReflection_QueryDispatchedAmountsResponse_messageType struct{}

func (x fastReflection_QueryDispatchedAmountsResponse_messageType) Zero() protoreflect.Message {
	return (*fastReflection_QueryDispatchedAmountsResponse)(nil)
}
func (x fastReflection_QueryDispatchedAmountsResponse_messageType) New() protoreflect.Message {
	return new(fastReflection_QueryDispatchedAmountsResponse)
}
func (x fastReflection_QueryDispatchedAmountsResponse_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_QueryDispatchedAmountsResponse
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_QueryDispatchedAmountsResponse) Descriptor() protoreflect.MessageDescriptor {
	return md_QueryDispatchedAmountsResponse
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_QueryDispatchedAmountsResponse) Type() protoreflect.MessageType {
	return _fastReflection_QueryDispatchedAmountsResponse_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_QueryDispatchedAmountsResponse) New() protoreflect.Message {
	return new(fastReflection_QueryDispatchedAmountsResponse)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_QueryDispatchedAmountsResponse) Interface() protoreflect.ProtoMessage {
	return (*QueryDispatchedAmountsResponse)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_QueryDispatchedAmountsResponse) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if len(x.Amounts) != 0 {
		value := protoreflect.ValueOfList(&_QueryDispatchedAmountsResponse_1_list{list: &x.Amounts})
		if !f(fd_QueryDispatchedAmountsResponse_amounts, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_QueryDispatchedAmountsResponse) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "noble.orbiter.component.dispatcher.v1.QueryDispatchedAmountsResponse.amounts":
		return len(x.Amounts) != 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.orbiter.component.dispatcher.v1.QueryDispatchedAmountsResponse"))
		}
		panic(fmt.Errorf("message noble.orbiter.component.dispatcher.v1.QueryDispatchedAmountsResponse does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryDispatchedAmountsResponse) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "noble.orbiter.component.dispatcher.v1.QueryDispatchedAmountsResponse.amounts":
		x.Amounts = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.orbiter.component.dispatcher.v1.QueryDispatchedAmountsResponse"))
		}
		panic(fmt.Errorf("message noble.orbiter.component.dispatcher.v1.QueryDispatchedAmountsResponse does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_QueryDispatchedAmountsResponse) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "noble.orbiter.component.dispatcher.v1.QueryDispatchedAmountsResponse.amounts":
		if len(x.Amounts) == 0 {
			return protoreflect.ValueOfList(&_QueryDispatchedAmountsResponse_1_list{})
		}
		listValue := &_QueryDispatchedAmountsResponse_1_list{list: &x.Amounts}
		return protoreflect.ValueOfList(listValue)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.orbiter.component.dispatcher.v1.QueryDispatchedAmountsResponse"))
		}
		panic(fmt.Errorf("message noble.orbiter.component.dispatcher.v1.QueryDispatchedAmountsResponse does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryDispatchedAmountsResponse) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "noble.orbiter.component.dispatcher.v1.QueryDispatchedAmountsResponse.amounts":
		lv := value.List()
		clv := lv.(*_QueryDispatchedAmountsResponse_1_list)
		x.Amounts = *clv.list
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.orbiter.component.dispatcher.v1.QueryDispatchedAmountsResponse"))
		}
		panic(fmt.Errorf("message noble.orbiter.component.dispatcher.v1.QueryDispatchedAmountsResponse does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryDispatchedAmountsResponse) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "noble.orbiter.component.dispatcher.v1.QueryDispatchedAmountsResponse.amounts":
		if x.Amounts == nil {
			x.Amounts = []*DispatchedAmountEntry{}
		}
		value := &_QueryDispatchedAmountsResponse_1_list{list: &x.Amounts}
		return protoreflect.ValueOfList(value)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.orbiter.component.dispatcher.v1.QueryDispatchedAmountsResponse"))
		}
		panic(fmt.Errorf("message noble.orbiter.component.dispatcher.v1.QueryDispatchedAmountsResponse does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_QueryDispatchedAmountsResponse) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "noble.orbiter.component.dispatcher.v1.QueryDispatchedAmountsResponse.amounts":
		list := []*DispatchedAmountEntry{}
		return protoreflect.ValueOfList(&_QueryDispatchedAmountsResponse_1_list{list: &list})
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.orbiter.component.dispatcher.v1.QueryDispatchedAmountsResponse"))
		}
		panic(fmt.Errorf("message noble.orbiter.component.dispatcher.v1.QueryDispatchedAmountsResponse does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_QueryDispatchedAmountsResponse) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in noble.orbiter.component.dispatcher.v1.QueryDispatchedAmountsResponse", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_QueryDispatchedAmountsResponse) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryDispatchedAmountsResponse) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_QueryDispatchedAmountsResponse) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_QueryDispatchedAmountsResponse) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*QueryDispatchedAmountsResponse)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if len(x.Amounts) > 0 {
			for _, e := range x.Amounts {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*QueryDispatchedAmountsResponse)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.Amounts) > 0 {
			for iNdEx := len(x.Amounts) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.Amounts[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0xa
			}
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*QueryDispatchedAmountsResponse)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: QueryDispatchedAmountsResponse: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: QueryDispatchedAmountsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Amounts", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Amounts = append(x.Amounts, &DispatchedAmountEntry{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Amounts[len(x.Amounts)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: noble/orbiter/component/dispatcher/v1/query.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// QueryDispatchedCountsRequest is the request type for the Query/DispatchedCounts RPC method.
type QueryDispatchedCountsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// source_protocol_id is the source protocol identifier.
	SourceProtocolId string `protobuf:"bytes,1,opt,name=source_protocol_id,json=sourceProtocolId,proto3" json:"source_protocol_id,omitempty"`
	// source_counterparty_id is the source counterparty identifier.
	SourceCounterpartyId string `protobuf:"bytes,2,opt,name=source_counterparty_id,json=sourceCounterpartyId,proto3" json:"source_counterparty_id,omitempty"`
	// destination_protocol_id is the destination protocol identifier.
	DestinationProtocolId string `protobuf:"bytes,3,opt,name=destination_protocol_id,json=destinationProtocolId,proto3" json:"destination_protocol_id,omitempty"`
	// destination_counterparty_id is the destination counterparty identifier.
	DestinationCounterpartyId string `protobuf:"bytes,4,opt,name=destination_counterparty_id,json=destinationCounterpartyId,proto3" json:"destination_counterparty_id,omitempty"`
}

func (x *QueryDispatchedCountsRequest) Reset() {
	*x = QueryDispatchedCountsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_noble_orbiter_component_dispatcher_v1_query_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryDispatchedCountsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryDispatchedCountsRequest) ProtoMessage() {}

// Deprecated: Use QueryDispatchedCountsRequest.ProtoReflect.Descriptor instead.
func (*QueryDispatchedCountsRequest) Descriptor() ([]byte, []int) {
	return file_noble_orbiter_component_dispatcher_v1_query_proto_rawDescGZIP(), []int{0}
}

func (x *QueryDispatchedCountsRequest) GetSourceProtocolId() string {
	if x != nil {
		return x.SourceProtocolId
	}
	return ""
}

func (x *QueryDispatchedCountsRequest) GetSourceCounterpartyId() string {
	if x != nil {
		return x.SourceCounterpartyId
	}
	return ""
}

func (x *QueryDispatchedCountsRequest) GetDestinationProtocolId() string {
	if x != nil {
		return x.DestinationProtocolId
	}
	return ""
}

func (x *QueryDispatchedCountsRequest) GetDestinationCounterpartyId() string {
	if x != nil {
		return x.DestinationCounterpartyId
	}
	return ""
}

// QueryDispatchedAmountsByProtocolIDRequest is the request type for the Query/DispatchedCountsBy* methods.
type QueryDispatchedCountsByProtocolIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// source_protocol_id is the protocol identifier.
	ProtocolId string `protobuf:"bytes,1,opt,name=protocol_id,json=protocolId,proto3" json:"protocol_id,omitempty"`
}

func (x *QueryDispatchedCountsByProtocolIDRequest) Reset() {
	*x = QueryDispatchedCountsByProtocolIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_noble_orbiter_component_dispatcher_v1_query_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryDispatchedCountsByProtocolIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryDispatchedCountsByProtocolIDRequest) ProtoMessage() {}

// Deprecated: Use QueryDispatchedCountsByProtocolIDRequest.ProtoReflect.Descriptor instead.
func (*QueryDispatchedCountsByProtocolIDRequest) Descriptor() ([]byte, []int) {
	return file_noble_orbiter_component_dispatcher_v1_query_proto_rawDescGZIP(), []int{1}
}

func (x *QueryDispatchedCountsByProtocolIDRequest) GetProtocolId() string {
	if x != nil {
		return x.ProtocolId
	}
	return ""
}

// QueryDispatchedCountsResponse is the response type for the Query/DispatchedCounts* RPC methods.
type QueryDispatchedCountsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Counts []*DispatchCountEntry `protobuf:"bytes,1,rep,name=counts,proto3" json:"counts,omitempty"`
}

func (x *QueryDispatchedCountsResponse) Reset() {
	*x = QueryDispatchedCountsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_noble_orbiter_component_dispatcher_v1_query_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryDispatchedCountsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryDispatchedCountsResponse) ProtoMessage() {}

// Deprecated: Use QueryDispatchedCountsResponse.ProtoReflect.Descriptor instead.
func (*QueryDispatchedCountsResponse) Descriptor() ([]byte, []int) {
	return file_noble_orbiter_component_dispatcher_v1_query_proto_rawDescGZIP(), []int{2}
}

func (x *QueryDispatchedCountsResponse) GetCounts() []*DispatchCountEntry {
	if x != nil {
		return x.Counts
	}
	return nil
}

// QueryDispatchedAmountsRequest is the request type for the Query/DispatchedAmounts RPC method.
type QueryDispatchedAmountsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// source_protocol_id is the source protocol identifier.
	SourceProtocolId string `protobuf:"bytes,1,opt,name=source_protocol_id,json=sourceProtocolId,proto3" json:"source_protocol_id,omitempty"`
	// source_counterparty_id is the source counterparty identifier.
	SourceCounterpartyId string `protobuf:"bytes,2,opt,name=source_counterparty_id,json=sourceCounterpartyId,proto3" json:"source_counterparty_id,omitempty"`
	// destination_protocol_id is the destination protocol identifier.
	DestinationProtocolId string `protobuf:"bytes,3,opt,name=destination_protocol_id,json=destinationProtocolId,proto3" json:"destination_protocol_id,omitempty"`
	// destination_counterparty_id is the destination counterparty identifier.
	DestinationCounterpartyId string `protobuf:"bytes,4,opt,name=destination_counterparty_id,json=destinationCounterpartyId,proto3" json:"destination_counterparty_id,omitempty"`
	// denom is the denomination of the amounts requested.
	Denom string `protobuf:"bytes,5,opt,name=denom,proto3" json:"denom,omitempty"`
}

func (x *QueryDispatchedAmountsRequest) Reset() {
	*x = QueryDispatchedAmountsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_noble_orbiter_component_dispatcher_v1_query_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryDispatchedAmountsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryDispatchedAmountsRequest) ProtoMessage() {}

// Deprecated: Use QueryDispatchedAmountsRequest.ProtoReflect.Descriptor instead.
func (*QueryDispatchedAmountsRequest) Descriptor() ([]byte, []int) {
	return file_noble_orbiter_component_dispatcher_v1_query_proto_rawDescGZIP(), []int{3}
}

func (x *QueryDispatchedAmountsRequest) GetSourceProtocolId() string {
	if x != nil {
		return x.SourceProtocolId
	}
	return ""
}

func (x *QueryDispatchedAmountsRequest) GetSourceCounterpartyId() string {
	if x != nil {
		return x.SourceCounterpartyId
	}
	return ""
}

func (x *QueryDispatchedAmountsRequest) GetDestinationProtocolId() string {
	if x != nil {
		return x.DestinationProtocolId
	}
	return ""
}

func (x *QueryDispatchedAmountsRequest) GetDestinationCounterpartyId() string {
	if x != nil {
		return x.DestinationCounterpartyId
	}
	return ""
}

func (x *QueryDispatchedAmountsRequest) GetDenom() string {
	if x != nil {
		return x.Denom
	}
	return ""
}

// QueryDispatchedAmountsByProtocolIDRequest is the request type for the Query/DispatchedAmountsBy* methods.
type QueryDispatchedAmountsByProtocolIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// source_protocol_id is the protocol identifier.
	ProtocolId string `protobuf:"bytes,1,opt,name=protocol_id,json=protocolId,proto3" json:"protocol_id,omitempty"`
}

func (x *QueryDispatchedAmountsByProtocolIDRequest) Reset() {
	*x = QueryDispatchedAmountsByProtocolIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_noble_orbiter_component_dispatcher_v1_query_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryDispatchedAmountsByProtocolIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryDispatchedAmountsByProtocolIDRequest) ProtoMessage() {}

// Deprecated: Use QueryDispatchedAmountsByProtocolIDRequest.ProtoReflect.Descriptor instead.
func (*QueryDispatchedAmountsByProtocolIDRequest) Descriptor() ([]byte, []int) {
	return file_noble_orbiter_component_dispatcher_v1_query_proto_rawDescGZIP(), []int{4}
}

func (x *QueryDispatchedAmountsByProtocolIDRequest) GetProtocolId() string {
	if x != nil {
		return x.ProtocolId
	}
	return ""
}

// QueryDispatchedAmountsResponse is the response type for the Query/DispatchedAmounts* RPC methods.
type QueryDispatchedAmountsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Amounts []*DispatchedAmountEntry `protobuf:"bytes,1,rep,name=amounts,proto3" json:"amounts,omitempty"`
}

func (x *QueryDispatchedAmountsResponse) Reset() {
	*x = QueryDispatchedAmountsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_noble_orbiter_component_dispatcher_v1_query_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryDispatchedAmountsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryDispatchedAmountsResponse) ProtoMessage() {}

// Deprecated: Use QueryDispatchedAmountsResponse.ProtoReflect.Descriptor instead.
func (*QueryDispatchedAmountsResponse) Descriptor() ([]byte, []int) {
	return file_noble_orbiter_component_dispatcher_v1_query_proto_rawDescGZIP(), []int{5}
}

func (x *QueryDispatchedAmountsResponse) GetAmounts() []*DispatchedAmountEntry {
	if x != nil {
		return x.Amounts
	}
	return nil
}

var File_noble_orbiter_component_dispatcher_v1_query_proto protoreflect.FileDescriptor

var file_noble_orbiter_component_dispatcher_v1_query_proto_rawDesc = []byte{
	0x0a, 0x31, 0x6e, 0x6f, 0x62, 0x6c, 0x65, 0x2f, 0x6f, 0x72, 0x62, 0x69, 0x74, 0x65, 0x72, 0x2f,
	0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x64, 0x69, 0x73, 0x70, 0x61, 0x74,
	0x63, 0x68, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x25, 0x6e, 0x6f, 0x62, 0x6c, 0x65, 0x2e, 0x6f, 0x72, 0x62, 0x69, 0x74,
	0x65, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x64, 0x69, 0x73,
	0x70, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x1a, 0x1b, 0x63, 0x6f, 0x73, 0x6d,
	0x6f, 0x73, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2f, 0x76, 0x31, 0x2f, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x36, 0x6e, 0x6f, 0x62, 0x6c, 0x65, 0x2f, 0x6f, 0x72, 0x62,
	0x69, 0x74, 0x65, 0x72, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x64,
	0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x69, 0x73,
	0x70, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xfa, 0x01,
	0x0a, 0x1c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x65,
	0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c,
	0x0a, 0x12, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x16,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x61,
	0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x61, 0x72, 0x74, 0x79,
	0x49, 0x64, 0x12, 0x36, 0x0a, 0x17, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x15, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x1b, 0x64, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x19, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x70, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x22, 0x4b, 0x0a, 0x28, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x73, 0x42, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x44, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x64, 0x22, 0x72, 0x0a, 0x1d, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a, 0x06, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x6e, 0x6f, 0x62, 0x6c, 0x65,
	0x2e, 0x6f, 0x72, 0x62, 0x69, 0x74, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x2e, 0x64, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x06, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x22, 0x91, 0x02, 0x0a, 0x1d,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a,
	0x12, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x16, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x61, 0x72,
	0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x61, 0x72, 0x74, 0x79, 0x49,
	0x64, 0x12, 0x36, 0x0a, 0x17, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x15, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x1b, 0x64, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19,
	0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x70, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x6e,
	0x6f, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x22,
	0x4c, 0x0a, 0x29, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68,
	0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x42, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x64, 0x22, 0x78, 0x0a,
	0x1e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x56, 0x0a, 0x07, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x3c, 0x2e, 0x6e, 0x6f, 0x62, 0x6c, 0x65, 0x2e, 0x6f, 0x72, 0x62, 0x69, 0x74, 0x65, 0x72,
	0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x64, 0x69, 0x73, 0x70, 0x61,
	0x74, 0x63, 0x68, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63,
	0x68, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x32, 0xff, 0x0d, 0x0a, 0x05, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x12, 0xc3, 0x02, 0x0a, 0x10, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x43, 0x2e, 0x6e, 0x6f, 0x62, 0x6c, 0x65, 0x2e, 0x6f,
	0x72, 0x62, 0x69, 0x74, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x2e, 0x64, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x44, 0x2e, 0x6e, 0x6f,
	0x62, 0x6c, 0x65, 0x2e, 0x6f, 0x72, 0x62, 0x69, 0x74, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x64, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63,
	0x68, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0xa3, 0x01, 0x88, 0xe7, 0xb0, 0x2a, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x97, 0x01,
	0x12, 0x94, 0x01, 0x2f, 0x6e, 0x6f, 0x62, 0x6c, 0x65, 0x2f, 0x6f, 0x72, 0x62, 0x69, 0x74, 0x65,
	0x72, 0x2f, 0x64, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f,
	0x64, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x2f, 0x7b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x7b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x7d, 0x2f,
	0x7b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x7b, 0x64, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x61,
	0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0x90, 0x02, 0x0a, 0x22, 0x44, 0x69, 0x73, 0x70,
	0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x42, 0x79, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x44, 0x12, 0x4f,
	0x2e, 0x6e, 0x6f, 0x62, 0x6c, 0x65, 0x2e, 0x6f, 0x72, 0x62, 0x69, 0x74, 0x65, 0x72, 0x2e, 0x63,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x64, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63,
	0x68, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x69, 0x73, 0x70,
	0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x42, 0x79, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x44, 0x2e, 0x6e, 0x6f, 0x62, 0x6c, 0x65, 0x2e, 0x6f, 0x72, 0x62, 0x69, 0x74, 0x65, 0x72, 0x2e,
	0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x64, 0x69, 0x73, 0x70, 0x61, 0x74,
	0x63, 0x68, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x69, 0x73,
	0x70, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x53, 0x88, 0xe7, 0xb0, 0x2a, 0x01, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x48, 0x12, 0x46, 0x2f, 0x6e, 0x6f, 0x62, 0x6c, 0x65, 0x2f, 0x6f, 0x72, 0x62, 0x69, 0x74,
	0x65, 0x72, 0x2f, 0x64, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x2f, 0x76, 0x31,
	0x2f, 0x64, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x2f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x2f, 0x62, 0x79, 0x2d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2f, 0x7b, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0x9a, 0x02, 0x0a, 0x27, 0x44,
	0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x42,
	0x79, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x44, 0x12, 0x4f, 0x2e, 0x6e, 0x6f, 0x62, 0x6c, 0x65, 0x2e, 0x6f,
	0x72, 0x62, 0x69, 0x74, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x2e, 0x64, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x42, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x44,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x44, 0x2e, 0x6e, 0x6f, 0x62, 0x6c, 0x65, 0x2e,
	0x6f, 0x72, 0x62, 0x69, 0x74, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x2e, 0x64, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x58, 0x88,
	0xe7, 0xb0, 0x2a, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x4d, 0x12, 0x4b, 0x2f, 0x6e, 0x6f, 0x62,
	0x6c, 0x65, 0x2f, 0x6f, 0x72, 0x62, 0x69, 0x74, 0x65, 0x72, 0x2f, 0x64, 0x69, 0x73, 0x70, 0x61,
	0x74, 0x63, 0x68, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63,
	0x68, 0x65, 0x64, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x62, 0x79, 0x2d, 0x64, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0xc7, 0x02, 0x0a, 0x11, 0x44, 0x69, 0x73, 0x70,
	0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x44, 0x2e,
	0x6e, 0x6f, 0x62, 0x6c, 0x65, 0x2e, 0x6f, 0x72, 0x62, 0x69, 0x74, 0x65, 0x72, 0x2e, 0x63, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x64, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x69, 0x73, 0x70, 0x61,
	0x74, 0x63, 0x68, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x45, 0x2e, 0x6e, 0x6f, 0x62, 0x6c, 0x65, 0x2e, 0x6f, 0x72, 0x62, 0x69,
	0x74, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x64, 0x69,
	0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa4, 0x01, 0x88, 0xe7, 0xb0,
	0x2a, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x98, 0x01, 0x12, 0x95, 0x01, 0x2f, 0x6e, 0x6f, 0x62,
	0x6c, 0x65, 0x2f, 0x6f, 0x72, 0x62, 0x69, 0x74, 0x65, 0x72, 0x2f, 0x64, 0x69, 0x73, 0x70, 0x61,
	0x74, 0x63, 0x68, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63,
	0x68, 0x65, 0x64, 0x2f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x69, 0x64, 0x7d,
	0x2f, 0x7b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x7b, 0x64, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f,
	0x69, 0x64, 0x7d, 0x2f, 0x7b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64,
	0x7d, 0x12, 0x94, 0x02, 0x0a, 0x23, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x42, 0x79, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x44, 0x12, 0x50, 0x2e, 0x6e, 0x6f, 0x62, 0x6c,
	0x65, 0x2e, 0x6f, 0x72, 0x62, 0x69, 0x74, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x2e, 0x64, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x65,
	0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x42, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x45, 0x2e, 0x6e, 0x6f,
	0x62, 0x6c, 0x65, 0x2e, 0x6f, 0x72, 0x62, 0x69, 0x74, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x64, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63,
	0x68, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x54, 0x88, 0xe7, 0xb0, 0x2a, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x49, 0x12,
	0x47, 0x2f, 0x6e, 0x6f, 0x62, 0x6c, 0x65, 0x2f, 0x6f, 0x72, 0x62, 0x69, 0x74, 0x65, 0x72, 0x2f,
	0x64, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x69,
	0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x2f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73,
	0x2f, 0x62, 0x79, 0x2d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0x9e, 0x02, 0x0a, 0x28, 0x44, 0x69, 0x73,
	0x70, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x42, 0x79,
	0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x49, 0x44, 0x12, 0x50, 0x2e, 0x6e, 0x6f, 0x62, 0x6c, 0x65, 0x2e, 0x6f, 0x72,
	0x62, 0x69, 0x74, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e,
	0x64, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x42, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x44,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x45, 0x2e, 0x6e, 0x6f, 0x62, 0x6c, 0x65, 0x2e,
	0x6f, 0x72, 0x62, 0x69, 0x74, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x2e, 0x64, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x59,
	0x88, 0xe7, 0xb0, 0x2a, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x4e, 0x12, 0x4c, 0x2f, 0x6e, 0x6f,
	0x62, 0x6c, 0x65, 0x2f, 0x6f, 0x72, 0x62, 0x69, 0x74, 0x65, 0x72, 0x2f, 0x64, 0x69, 0x73, 0x70,
	0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x69, 0x73, 0x70, 0x61, 0x74,
	0x63, 0x68, 0x65, 0x64, 0x2f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x62, 0x79, 0x2d,
	0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x7b, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x69, 0x64, 0x7d, 0x42, 0xc8, 0x02, 0x0a, 0x29, 0x63, 0x6f,
	0x6d, 0x2e, 0x6e, 0x6f, 0x62, 0x6c, 0x65, 0x2e, 0x6f, 0x72, 0x62, 0x69, 0x74, 0x65, 0x72, 0x2e,
	0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x64, 0x69, 0x73, 0x70, 0x61, 0x74,
	0x63, 0x68, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x42, 0x0a, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x56, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x6e, 0x6f, 0x62, 0x6c, 0x65, 0x2d, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x6f,
	0x72, 0x62, 0x69, 0x74, 0x65, 0x72, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6e, 0x6f, 0x62, 0x6c, 0x65,
	0x2f, 0x6f, 0x72, 0x62, 0x69, 0x74, 0x65, 0x72, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x2f, 0x64, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x2f, 0x76, 0x31,
	0x3b, 0x64, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x76, 0x31, 0xa2, 0x02, 0x04,
	0x4e, 0x4f, 0x43, 0x44, 0xaa, 0x02, 0x25, 0x4e, 0x6f, 0x62, 0x6c, 0x65, 0x2e, 0x4f, 0x72, 0x62,
	0x69, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x44,
	0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x25, 0x4e,
	0x6f, 0x62, 0x6c, 0x65, 0x5c, 0x4f, 0x72, 0x62, 0x69, 0x74, 0x65, 0x72, 0x5c, 0x43, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5c, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x65,
	0x72, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x31, 0x4e, 0x6f, 0x62, 0x6c, 0x65, 0x5c, 0x4f, 0x72, 0x62,
	0x69, 0x74, 0x65, 0x72, 0x5c, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5c, 0x44,
	0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x29, 0x4e, 0x6f, 0x62, 0x6c, 0x65,
	0x3a, 0x3a, 0x4f, 0x72, 0x62, 0x69, 0x74, 0x65, 0x72, 0x3a, 0x3a, 0x43, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x3a, 0x3a, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72,
	0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_noble_orbiter_component_dispatcher_v1_query_proto_rawDescOnce sync.Once
	file_noble_orbiter_component_dispatcher_v1_query_proto_rawDescData = file_noble_orbiter_component_dispatcher_v1_query_proto_rawDesc
)

func file_noble_orbiter_component_dispatcher_v1_query_proto_rawDescGZIP() []byte {
	file_noble_orbiter_component_dispatcher_v1_query_proto_rawDescOnce.Do(func() {
		file_noble_orbiter_component_dispatcher_v1_query_proto_rawDescData = protoimpl.X.CompressGZIP(file_noble_orbiter_component_dispatcher_v1_query_proto_rawDescData)
	})
	return file_noble_orbiter_component_dispatcher_v1_query_proto_rawDescData
}

var file_noble_orbiter_component_dispatcher_v1_query_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_noble_orbiter_component_dispatcher_v1_query_proto_goTypes = []interface{}{
	(*QueryDispatchedCountsRequest)(nil),              // 0: noble.orbiter.component.dispatcher.v1.QueryDispatchedCountsRequest
	(*QueryDispatchedCountsByProtocolIDRequest)(nil),  // 1: noble.orbiter.component.dispatcher.v1.QueryDispatchedCountsByProtocolIDRequest
	(*QueryDispatchedCountsResponse)(nil),             // 2: noble.orbiter.component.dispatcher.v1.QueryDispatchedCountsResponse
	(*QueryDispatchedAmountsRequest)(nil),             // 3: noble.orbiter.component.dispatcher.v1.QueryDispatchedAmountsRequest
	(*QueryDispatchedAmountsByProtocolIDRequest)(nil), // 4: noble.orbiter.component.dispatcher.v1.QueryDispatchedAmountsByProtocolIDRequest
	(*QueryDispatchedAmountsResponse)(nil),            // 5: noble.orbiter.component.dispatcher.v1.QueryDispatchedAmountsResponse
	(*DispatchCountEntry)(nil),                        // 6: noble.orbiter.component.dispatcher.v1.DispatchCountEntry
	(*DispatchedAmountEntry)(nil),                     // 7: noble.orbiter.component.dispatcher.v1.DispatchedAmountEntry
}
var file_noble_orbiter_component_dispatcher_v1_query_proto_depIdxs = []int32{
	6, // 0: noble.orbiter.component.dispatcher.v1.QueryDispatchedCountsResponse.counts:type_name -> noble.orbiter.component.dispatcher.v1.DispatchCountEntry
	7, // 1: noble.orbiter.component.dispatcher.v1.QueryDispatchedAmountsResponse.amounts:type_name -> noble.orbiter.component.dispatcher.v1.DispatchedAmountEntry
	0, // 2: noble.orbiter.component.dispatcher.v1.Query.DispatchedCounts:input_type -> noble.orbiter.component.dispatcher.v1.QueryDispatchedCountsRequest
	1, // 3: noble.orbiter.component.dispatcher.v1.Query.DispatchedCountsBySourceProtocolID:input_type -> noble.orbiter.component.dispatcher.v1.QueryDispatchedCountsByProtocolIDRequest
	1, // 4: noble.orbiter.component.dispatcher.v1.Query.DispatchedCountsByDestinationProtocolID:input_type -> noble.orbiter.component.dispatcher.v1.QueryDispatchedCountsByProtocolIDRequest
	3, // 5: noble.orbiter.component.dispatcher.v1.Query.DispatchedAmounts:input_type -> noble.orbiter.component.dispatcher.v1.QueryDispatchedAmountsRequest
	4, // 6: noble.orbiter.component.dispatcher.v1.Query.DispatchedAmountsBySourceProtocolID:input_type -> noble.orbiter.component.dispatcher.v1.QueryDispatchedAmountsByProtocolIDRequest
	4, // 7: noble.orbiter.component.dispatcher.v1.Query.DispatchedAmountsByDestinationProtocolID:input_type -> noble.orbiter.component.dispatcher.v1.QueryDispatchedAmountsByProtocolIDRequest
	2, // 8: noble.orbiter.component.dispatcher.v1.Query.DispatchedCounts:output_type -> noble.orbiter.component.dispatcher.v1.QueryDispatchedCountsResponse
	2, // 9: noble.orbiter.component.dispatcher.v1.Query.DispatchedCountsBySourceProtocolID:output_type -> noble.orbiter.component.dispatcher.v1.QueryDispatchedCountsResponse
	2, // 10: noble.orbiter.component.dispatcher.v1.Query.DispatchedCountsByDestinationProtocolID:output_type -> noble.orbiter.component.dispatcher.v1.QueryDispatchedCountsResponse
	5, // 11: noble.orbiter.component.dispatcher.v1.Query.DispatchedAmounts:output_type -> noble.orbiter.component.dispatcher.v1.QueryDispatchedAmountsResponse
	5, // 12: noble.orbiter.component.dispatcher.v1.Query.DispatchedAmountsBySourceProtocolID:output_type -> noble.orbiter.component.dispatcher.v1.QueryDispatchedAmountsResponse
	5, // 13: noble.orbiter.component.dispatcher.v1.Query.DispatchedAmountsByDestinationProtocolID:output_type -> noble.orbiter.component.dispatcher.v1.QueryDispatchedAmountsResponse
	8, // [8:14] is the sub-list for method output_type
	2, // [2:8] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_noble_orbiter_component_dispatcher_v1_query_proto_init() }
func file_noble_orbiter_component_dispatcher_v1_query_proto_init() {
	if File_noble_orbiter_component_dispatcher_v1_query_proto != nil {
		return
	}
	file_noble_orbiter_component_dispatcher_v1_dispatcher_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_noble_orbiter_component_dispatcher_v1_query_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryDispatchedCountsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_noble_orbiter_component_dispatcher_v1_query_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryDispatchedCountsByProtocolIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_noble_orbiter_component_dispatcher_v1_query_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryDispatchedCountsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_noble_orbiter_component_dispatcher_v1_query_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryDispatchedAmountsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_noble_orbiter_component_dispatcher_v1_query_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryDispatchedAmountsByProtocolIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_noble_orbiter_component_dispatcher_v1_query_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryDispatchedAmountsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_noble_orbiter_component_dispatcher_v1_query_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_noble_orbiter_component_dispatcher_v1_query_proto_goTypes,
		DependencyIndexes: file_noble_orbiter_component_dispatcher_v1_query_proto_depIdxs,
		MessageInfos:      file_noble_orbiter_component_dispatcher_v1_query_proto_msgTypes,
	}.Build()
	File_noble_orbiter_component_dispatcher_v1_query_proto = out.File
	file_noble_orbiter_component_dispatcher_v1_query_proto_rawDesc = nil
	file_noble_orbiter_component_dispatcher_v1_query_proto_goTypes = nil
	file_noble_orbiter_component_dispatcher_v1_query_proto_depIdxs = nil
}
