// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: noble/orbiter/controller/action/v1/fee.proto

package action

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// FeeAttributes defines the concrete implementation of the
// ActionAttributes interface to execute a fee payment.
type FeeAttributes struct {
	// fees_info defines the fees to be applied.
	FeesInfo []*FeeInfo `protobuf:"bytes,1,rep,name=fees_info,json=feesInfo,proto3" json:"fees_info,omitempty"`
}

func (m *FeeAttributes) Reset()         { *m = FeeAttributes{} }
func (m *FeeAttributes) String() string { return proto.CompactTextString(m) }
func (*FeeAttributes) ProtoMessage()    {}
func (*FeeAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f3ba39319feb841, []int{0}
}
func (m *FeeAttributes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FeeAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FeeAttributes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FeeAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FeeAttributes.Merge(m, src)
}
func (m *FeeAttributes) XXX_Size() int {
	return m.Size()
}
func (m *FeeAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_FeeAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_FeeAttributes proto.InternalMessageInfo

func (m *FeeAttributes) GetFeesInfo() []*FeeInfo {
	if m != nil {
		return m.FeesInfo
	}
	return nil
}

// FeeInfo allows to specify a fee, in terms of basis points, and
// a recipient address.
type FeeInfo struct {
	// recipient is the Noble address which is going to receive the fee.
	Recipient string `protobuf:"bytes,1,opt,name=recipient,proto3" json:"recipient,omitempty"`
	// basis_points represents the fee to apply to the tokens sent with
	// a cross-chain packet. One basis point equals 1/100th of a part.
	BasisPoints uint32 `protobuf:"varint,2,opt,name=basis_points,json=basisPoints,proto3" json:"basis_points,omitempty"`
}

func (m *FeeInfo) Reset()         { *m = FeeInfo{} }
func (m *FeeInfo) String() string { return proto.CompactTextString(m) }
func (*FeeInfo) ProtoMessage()    {}
func (*FeeInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f3ba39319feb841, []int{1}
}
func (m *FeeInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FeeInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FeeInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FeeInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FeeInfo.Merge(m, src)
}
func (m *FeeInfo) XXX_Size() int {
	return m.Size()
}
func (m *FeeInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_FeeInfo.DiscardUnknown(m)
}

var xxx_messageInfo_FeeInfo proto.InternalMessageInfo

func (m *FeeInfo) GetRecipient() string {
	if m != nil {
		return m.Recipient
	}
	return ""
}

func (m *FeeInfo) GetBasisPoints() uint32 {
	if m != nil {
		return m.BasisPoints
	}
	return 0
}

func init() {
	proto.RegisterType((*FeeAttributes)(nil), "noble.orbiter.controller.action.v1.FeeAttributes")
	proto.RegisterType((*FeeInfo)(nil), "noble.orbiter.controller.action.v1.FeeInfo")
}

func init() {
	proto.RegisterFile("noble/orbiter/controller/action/v1/fee.proto", fileDescriptor_2f3ba39319feb841)
}

var fileDescriptor_2f3ba39319feb841 = []byte{
	// 298 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x90, 0x31, 0x4b, 0xfb, 0x40,
	0x18, 0xc6, 0x7b, 0xff, 0x3f, 0xa8, 0xbd, 0xda, 0x25, 0x38, 0x44, 0x87, 0x23, 0x56, 0x87, 0x82,
	0xf6, 0x8e, 0x2a, 0x38, 0x08, 0x0e, 0xed, 0x50, 0x74, 0x93, 0xba, 0xb9, 0x84, 0x26, 0x79, 0x23,
	0x07, 0xf1, 0xde, 0x70, 0x77, 0x06, 0x9c, 0xfc, 0x0a, 0x7e, 0x98, 0x7e, 0x08, 0x71, 0x2a, 0x4e,
	0x8e, 0x92, 0x7c, 0x11, 0xc9, 0x25, 0x92, 0xc1, 0xc1, 0xed, 0xee, 0xe5, 0xf7, 0xe3, 0x79, 0x78,
	0xe8, 0xa9, 0xc2, 0x28, 0x03, 0x81, 0x3a, 0x92, 0x16, 0xb4, 0x88, 0x51, 0x59, 0x8d, 0x59, 0x06,
	0x5a, 0xac, 0x62, 0x2b, 0x51, 0x89, 0x62, 0x2a, 0x52, 0x00, 0x9e, 0x6b, 0xb4, 0xe8, 0x8d, 0x1c,
	0xcd, 0x5b, 0x9a, 0x77, 0x34, 0x6f, 0x68, 0x5e, 0x4c, 0x0f, 0xf6, 0x63, 0x34, 0x8f, 0x68, 0x42,
	0x67, 0x88, 0xe6, 0xd3, 0xe8, 0xa3, 0x17, 0x3a, 0x5c, 0x00, 0xcc, 0xac, 0xd5, 0x32, 0x7a, 0xb2,
	0x60, 0xbc, 0x6b, 0xda, 0x4f, 0x01, 0x4c, 0x28, 0x55, 0x8a, 0x3e, 0x09, 0xfe, 0x8f, 0x07, 0x67,
	0x27, 0xfc, 0xef, 0x0c, 0xbe, 0x00, 0xb8, 0x51, 0x29, 0x2e, 0x77, 0x6a, 0xbb, 0x7e, 0x5d, 0x1e,
	0xbf, 0xaf, 0x27, 0x41, 0xe7, 0x68, 0xa8, 0xb1, 0x99, 0x13, 0xba, 0xbc, 0x51, 0x42, 0xb7, 0x5b,
	0xd5, 0xbb, 0xa0, 0x7d, 0x0d, 0xb1, 0xcc, 0x25, 0x28, 0xeb, 0x93, 0x80, 0x8c, 0xfb, 0x73, 0xff,
	0x63, 0x3d, 0xd9, 0x6b, 0x0b, 0xcf, 0x92, 0x44, 0x83, 0x31, 0x77, 0x56, 0x4b, 0xf5, 0xb0, 0xec,
	0x50, 0xef, 0x90, 0xee, 0x46, 0x2b, 0x23, 0x4d, 0x98, 0xa3, 0x54, 0xd6, 0xf8, 0xff, 0x02, 0x32,
	0x1e, 0x2e, 0x07, 0xee, 0x76, 0xeb, 0x4e, 0xf3, 0xab, 0xb7, 0x92, 0x91, 0x4d, 0xc9, 0xc8, 0x57,
	0xc9, 0xc8, 0x6b, 0xc5, 0x7a, 0x9b, 0x8a, 0xf5, 0x3e, 0x2b, 0xd6, 0xbb, 0x3f, 0xfa, 0x69, 0x98,
	0x40, 0x21, 0xec, 0x73, 0x0e, 0xe6, 0xf7, 0xe2, 0xd1, 0x96, 0x1b, 0xeb, 0xfc, 0x3b, 0x00, 0x00,
	0xff, 0xff, 0xf1, 0xbf, 0xa0, 0xab, 0x9b, 0x01, 0x00, 0x00,
}

func (m *FeeAttributes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FeeAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FeeAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FeesInfo) > 0 {
		for iNdEx := len(m.FeesInfo) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FeesInfo[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFee(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *FeeInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FeeInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FeeInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BasisPoints != 0 {
		i = encodeVarintFee(dAtA, i, uint64(m.BasisPoints))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Recipient) > 0 {
		i -= len(m.Recipient)
		copy(dAtA[i:], m.Recipient)
		i = encodeVarintFee(dAtA, i, uint64(len(m.Recipient)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintFee(dAtA []byte, offset int, v uint64) int {
	offset -= sovFee(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *FeeAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.FeesInfo) > 0 {
		for _, e := range m.FeesInfo {
			l = e.Size()
			n += 1 + l + sovFee(uint64(l))
		}
	}
	return n
}

func (m *FeeInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Recipient)
	if l > 0 {
		n += 1 + l + sovFee(uint64(l))
	}
	if m.BasisPoints != 0 {
		n += 1 + sovFee(uint64(m.BasisPoints))
	}
	return n
}

func sovFee(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozFee(x uint64) (n int) {
	return sovFee(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *FeeAttributes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFee
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FeeAttributes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FeeAttributes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeesInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFee
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeesInfo = append(m.FeesInfo, &FeeInfo{})
			if err := m.FeesInfo[len(m.FeesInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFee(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFee
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FeeInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFee
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FeeInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FeeInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Recipient", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFee
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Recipient = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BasisPoints", wireType)
			}
			m.BasisPoints = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BasisPoints |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFee(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFee
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFee(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFee
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFee
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFee
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthFee
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupFee
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthFee
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthFee        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFee          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupFee = fmt.Errorf("proto: unexpected end of group")
)
