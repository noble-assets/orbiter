// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: noble/orbiter/controller/forwarding/v1/cctp.proto

package forwarding

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// CCTPAttributes defines the concrete implementation of the
// ForwardingAttributes interface to execute a cross-chain routing
// via the CCTP protocol.
type CCTPAttributes struct {
	// destination_domain represents the CCTP destination
	// domain identifier: https://developers.circle.com/cctp/supported-domains
	DestinationDomain uint32 `protobuf:"varint,1,opt,name=destination_domain,json=destinationDomain,proto3" json:"destination_domain,omitempty"`
	// mint_recipient represents the address which will receive
	// the cross-chain transfer.
	MintRecipient []byte `protobuf:"bytes,2,opt,name=mint_recipient,json=mintRecipient,proto3" json:"mint_recipient,omitempty"`
	// destination_caller is the address of the account in charge
	// of completing the CCTP routing.
	DestinationCaller []byte `protobuf:"bytes,3,opt,name=destination_caller,json=destinationCaller,proto3" json:"destination_caller,omitempty"`
}

func (m *CCTPAttributes) Reset()         { *m = CCTPAttributes{} }
func (m *CCTPAttributes) String() string { return proto.CompactTextString(m) }
func (*CCTPAttributes) ProtoMessage()    {}
func (*CCTPAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_93b3e2fd35801f19, []int{0}
}
func (m *CCTPAttributes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CCTPAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CCTPAttributes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CCTPAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CCTPAttributes.Merge(m, src)
}
func (m *CCTPAttributes) XXX_Size() int {
	return m.Size()
}
func (m *CCTPAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_CCTPAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_CCTPAttributes proto.InternalMessageInfo

func (m *CCTPAttributes) GetDestinationDomain() uint32 {
	if m != nil {
		return m.DestinationDomain
	}
	return 0
}

func (m *CCTPAttributes) GetMintRecipient() []byte {
	if m != nil {
		return m.MintRecipient
	}
	return nil
}

func (m *CCTPAttributes) GetDestinationCaller() []byte {
	if m != nil {
		return m.DestinationCaller
	}
	return nil
}

func init() {
	proto.RegisterType((*CCTPAttributes)(nil), "noble.orbiter.controller.forwarding.v1.CCTPAttributes")
}

func init() {
	proto.RegisterFile("noble/orbiter/controller/forwarding/v1/cctp.proto", fileDescriptor_93b3e2fd35801f19)
}

var fileDescriptor_93b3e2fd35801f19 = []byte{
	// 286 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x90, 0x31, 0x4b, 0xc4, 0x30,
	0x14, 0xc7, 0x2f, 0x0a, 0x0e, 0xc5, 0x3b, 0xb0, 0x53, 0x75, 0x08, 0x87, 0xa8, 0x74, 0x69, 0x42,
	0x71, 0xd3, 0x49, 0x2b, 0xce, 0x52, 0x74, 0x71, 0x29, 0x6d, 0x1a, 0xcf, 0x40, 0x9b, 0x57, 0x92,
	0x77, 0x15, 0xbf, 0x85, 0x1f, 0xc6, 0xdd, 0x55, 0x9c, 0x6e, 0x74, 0x94, 0xf6, 0x8b, 0xc8, 0xe5,
	0xf4, 0x7a, 0x88, 0x63, 0xde, 0x3f, 0xbf, 0x3f, 0xef, 0xfd, 0xbc, 0x58, 0x43, 0x51, 0x49, 0x0e,
	0xa6, 0x50, 0x28, 0x0d, 0x17, 0xa0, 0xd1, 0x40, 0x55, 0x49, 0xc3, 0x1f, 0xc0, 0x3c, 0xe5, 0xa6,
	0x54, 0x7a, 0xc6, 0xdb, 0x98, 0x0b, 0x81, 0x0d, 0x6b, 0x0c, 0x20, 0xf8, 0x27, 0x0e, 0x61, 0x3f,
	0x08, 0x1b, 0x10, 0x36, 0x20, 0xac, 0x8d, 0x0f, 0xf6, 0x05, 0xd8, 0x1a, 0x6c, 0xe6, 0x28, 0xbe,
	0x7a, 0xac, 0x2a, 0x0e, 0xdf, 0x88, 0x37, 0x49, 0x92, 0xdb, 0x9b, 0x0b, 0x44, 0xa3, 0x8a, 0x39,
	0x4a, 0xeb, 0x47, 0x9e, 0x5f, 0x4a, 0x8b, 0x4a, 0xe7, 0xa8, 0x40, 0x67, 0x25, 0xd4, 0xb9, 0xd2,
	0x01, 0x99, 0x92, 0x70, 0x9c, 0xee, 0x6d, 0x24, 0x57, 0x2e, 0xf0, 0x8f, 0xbd, 0x49, 0xad, 0x34,
	0x66, 0x46, 0x0a, 0xd5, 0x28, 0xa9, 0x31, 0xd8, 0x9a, 0x92, 0x70, 0x37, 0x1d, 0x2f, 0xa7, 0xe9,
	0xef, 0xf0, 0x6f, 0xab, 0xc8, 0x97, 0x7b, 0x06, 0xdb, 0xee, 0xeb, 0x66, 0x6b, 0xe2, 0x82, 0xb3,
	0xf0, 0xe3, 0x35, 0x3a, 0x1a, 0x0e, 0x33, 0x92, 0xb5, 0x31, 0xbb, 0x5e, 0x5f, 0x35, 0xac, 0x7b,
	0x79, 0xf7, 0xde, 0x51, 0xb2, 0xe8, 0x28, 0xf9, 0xea, 0x28, 0x79, 0xe9, 0xe9, 0x68, 0xd1, 0xd3,
	0xd1, 0x67, 0x4f, 0x47, 0xf7, 0xe7, 0x33, 0x85, 0x8f, 0xf3, 0x82, 0x09, 0xa8, 0xb9, 0x33, 0x15,
	0xe5, 0xd6, 0x4a, 0xb4, 0x6b, 0xc7, 0xf8, 0xdc, 0x48, 0xfb, 0xbf, 0xe9, 0x62, 0xc7, 0xf9, 0x39,
	0xfd, 0x0e, 0x00, 0x00, 0xff, 0xff, 0xf3, 0x65, 0xe1, 0xa5, 0x97, 0x01, 0x00, 0x00,
}

func (m *CCTPAttributes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CCTPAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CCTPAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DestinationCaller) > 0 {
		i -= len(m.DestinationCaller)
		copy(dAtA[i:], m.DestinationCaller)
		i = encodeVarintCctp(dAtA, i, uint64(len(m.DestinationCaller)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.MintRecipient) > 0 {
		i -= len(m.MintRecipient)
		copy(dAtA[i:], m.MintRecipient)
		i = encodeVarintCctp(dAtA, i, uint64(len(m.MintRecipient)))
		i--
		dAtA[i] = 0x12
	}
	if m.DestinationDomain != 0 {
		i = encodeVarintCctp(dAtA, i, uint64(m.DestinationDomain))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintCctp(dAtA []byte, offset int, v uint64) int {
	offset -= sovCctp(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CCTPAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DestinationDomain != 0 {
		n += 1 + sovCctp(uint64(m.DestinationDomain))
	}
	l = len(m.MintRecipient)
	if l > 0 {
		n += 1 + l + sovCctp(uint64(l))
	}
	l = len(m.DestinationCaller)
	if l > 0 {
		n += 1 + l + sovCctp(uint64(l))
	}
	return n
}

func sovCctp(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCctp(x uint64) (n int) {
	return sovCctp(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CCTPAttributes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCctp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CCTPAttributes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CCTPAttributes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationDomain", wireType)
			}
			m.DestinationDomain = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCctp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DestinationDomain |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MintRecipient", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCctp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCctp
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCctp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MintRecipient = append(m.MintRecipient[:0], dAtA[iNdEx:postIndex]...)
			if m.MintRecipient == nil {
				m.MintRecipient = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationCaller", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCctp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCctp
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCctp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestinationCaller = append(m.DestinationCaller[:0], dAtA[iNdEx:postIndex]...)
			if m.DestinationCaller == nil {
				m.DestinationCaller = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCctp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCctp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCctp(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCctp
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCctp
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCctp
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCctp
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCctp
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCctp
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCctp        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCctp          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCctp = fmt.Errorf("proto: unexpected end of group")
)
