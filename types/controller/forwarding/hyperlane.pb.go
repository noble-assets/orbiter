// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: noble/orbiter/controller/forwarding/v1/hyperlane.proto

package forwarding

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// HypAttributes defines the concrete implementation of the
// ForwardingAttributes interface to execute a cross-chain routing
// via the Hyperlane protocol.
type HypAttributes struct {
	// token_id represents the unique ID assigned to a token by the Hyperlane
	// app router.
	TokenId []byte `protobuf:"bytes,1,opt,name=token_id,json=tokenId,proto3" json:"token_id,omitempty"`
	// destination_domain represents the Hyperlane destination
	// domain identifier: https://docs.hyperlane.xyz/docs/reference/domains.
	DestinationDomain uint32 `protobuf:"varint,2,opt,name=destination_domain,json=destinationDomain,proto3" json:"destination_domain,omitempty"`
	// recipient is the address of the recipient account in the
	// destination domain.
	Recipient []byte `protobuf:"bytes,3,opt,name=recipient,proto3" json:"recipient,omitempty"`
	// custom_hook_id is the optional ID of the custom hook used instead of the
	// default hook of the mailbox. This hook is executed after the mailbox
	// required hook.
	CustomHookId []byte `protobuf:"bytes,4,opt,name=custom_hook_id,json=customHookId,proto3" json:"custom_hook_id,omitempty"`
	// custom_hook_metadata is the HEX encoded metadata passed to the Hyperlane
	// post dispatch hook.
	CustomHookMetadata string `protobuf:"bytes,5,opt,name=custom_hook_metadata,json=customHookMetadata,proto3" json:"custom_hook_metadata,omitempty"`
	// gas_limit is the maximum gas allowed for the execution of the
	// destination transaction.
	GasLimit cosmossdk_io_math.Int `protobuf:"bytes,6,opt,name=gas_limit,json=gasLimit,proto3,customtype=cosmossdk.io/math.Int" json:"gas_limit"`
	// max_fee is the maximum fee allowed for the execution of post dispatch hooks.
	MaxFee types.Coin `protobuf:"bytes,7,opt,name=max_fee,json=maxFee,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"max_fee"`
}

func (m *HypAttributes) Reset()         { *m = HypAttributes{} }
func (m *HypAttributes) String() string { return proto.CompactTextString(m) }
func (*HypAttributes) ProtoMessage()    {}
func (*HypAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_9712c0c871a3a243, []int{0}
}
func (m *HypAttributes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HypAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HypAttributes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HypAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HypAttributes.Merge(m, src)
}
func (m *HypAttributes) XXX_Size() int {
	return m.Size()
}
func (m *HypAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_HypAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_HypAttributes proto.InternalMessageInfo

func (m *HypAttributes) GetTokenId() []byte {
	if m != nil {
		return m.TokenId
	}
	return nil
}

func (m *HypAttributes) GetDestinationDomain() uint32 {
	if m != nil {
		return m.DestinationDomain
	}
	return 0
}

func (m *HypAttributes) GetRecipient() []byte {
	if m != nil {
		return m.Recipient
	}
	return nil
}

func (m *HypAttributes) GetCustomHookId() []byte {
	if m != nil {
		return m.CustomHookId
	}
	return nil
}

func (m *HypAttributes) GetCustomHookMetadata() string {
	if m != nil {
		return m.CustomHookMetadata
	}
	return ""
}

func (m *HypAttributes) GetMaxFee() types.Coin {
	if m != nil {
		return m.MaxFee
	}
	return types.Coin{}
}

func init() {
	proto.RegisterType((*HypAttributes)(nil), "noble.orbiter.controller.forwarding.v1.HypAttributes")
}

func init() {
	proto.RegisterFile("noble/orbiter/controller/forwarding/v1/hyperlane.proto", fileDescriptor_9712c0c871a3a243)
}

var fileDescriptor_9712c0c871a3a243 = []byte{
	// 509 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x52, 0x31, 0x6f, 0xd3, 0x40,
	0x14, 0x8e, 0x29, 0x24, 0x8d, 0x49, 0x91, 0x6a, 0x15, 0xc9, 0xa9, 0x90, 0x13, 0xa1, 0x0a, 0x59,
	0x95, 0x72, 0xd7, 0x80, 0xc4, 0x00, 0x13, 0x01, 0x45, 0x8d, 0x44, 0x97, 0x48, 0x2c, 0x2c, 0xd6,
	0xd9, 0xbe, 0x3a, 0xa7, 0xd8, 0xf7, 0xa2, 0xbb, 0x97, 0xd0, 0xf0, 0x2b, 0x98, 0xf9, 0x05, 0x88,
	0xa9, 0x43, 0x7f, 0x02, 0x43, 0xc5, 0x54, 0x31, 0x21, 0x86, 0x82, 0x92, 0xa1, 0x7f, 0x03, 0xf9,
	0x6c, 0xd5, 0x19, 0xba, 0xd8, 0xf7, 0xde, 0xf7, 0x7d, 0xf7, 0x4e, 0xef, 0xfb, 0xec, 0x97, 0x12,
	0xc2, 0x94, 0x53, 0x50, 0xa1, 0x40, 0xae, 0x68, 0x04, 0x12, 0x15, 0xa4, 0x29, 0x57, 0xf4, 0x14,
	0xd4, 0x27, 0xa6, 0x62, 0x21, 0x13, 0xba, 0xe8, 0xd3, 0xc9, 0x72, 0xc6, 0x55, 0xca, 0x24, 0x27,
	0x33, 0x05, 0x08, 0xce, 0x33, 0xa3, 0x23, 0xa5, 0x8e, 0x54, 0x3a, 0x52, 0xe9, 0xc8, 0xa2, 0xbf,
	0xbf, 0xcb, 0x32, 0x21, 0x81, 0x9a, 0x6f, 0x21, 0xdd, 0xf7, 0x22, 0xd0, 0x19, 0x68, 0x1a, 0x32,
	0xcd, 0xe9, 0xa2, 0x1f, 0x72, 0x64, 0x7d, 0x1a, 0x81, 0x90, 0x25, 0xde, 0x2e, 0xf0, 0xc0, 0x54,
	0xb4, 0x28, 0x4a, 0x68, 0x2f, 0x81, 0x04, 0x8a, 0x7e, 0x7e, 0x2a, 0xba, 0x4f, 0x7f, 0x6c, 0xd9,
	0x3b, 0xc7, 0xcb, 0xd9, 0x1b, 0x44, 0x25, 0xc2, 0x39, 0x72, 0xed, 0xb4, 0xed, 0x6d, 0x84, 0x29,
	0x97, 0x81, 0x88, 0x5d, 0xab, 0x6b, 0xf9, 0xad, 0x71, 0xc3, 0xd4, 0xa3, 0xd8, 0xe9, 0xd9, 0x4e,
	0xcc, 0x35, 0x0a, 0xc9, 0x50, 0x80, 0x0c, 0x62, 0xc8, 0x98, 0x90, 0xee, 0xbd, 0xae, 0xe5, 0xef,
	0x8c, 0x77, 0x37, 0x90, 0x77, 0x06, 0x70, 0x9e, 0xd8, 0x4d, 0xc5, 0x23, 0x31, 0x13, 0x5c, 0xa2,
	0xbb, 0x65, 0xae, 0xaa, 0x1a, 0xce, 0x81, 0xfd, 0x28, 0x9a, 0x6b, 0x84, 0x2c, 0x98, 0x00, 0x4c,
	0xf3, 0x69, 0xf7, 0x0d, 0xa5, 0x55, 0x74, 0x8f, 0x01, 0xa6, 0xa3, 0xd8, 0x39, 0xb2, 0xf7, 0x36,
	0x59, 0x19, 0x47, 0x16, 0x33, 0x64, 0xee, 0x83, 0xae, 0xe5, 0x37, 0xc7, 0x4e, 0xc5, 0x3d, 0x29,
	0x11, 0xe7, 0xc4, 0x6e, 0x26, 0x4c, 0x07, 0xa9, 0xc8, 0x04, 0xba, 0xf5, 0x9c, 0x36, 0x38, 0xba,
	0xbc, 0xee, 0xd4, 0xfe, 0x5c, 0x77, 0x1e, 0x17, 0x0b, 0xd1, 0xf1, 0x94, 0x08, 0xa0, 0x19, 0xc3,
	0x09, 0x19, 0x49, 0xfc, 0x75, 0xd1, 0xb3, 0xcb, 0x4d, 0x8d, 0x24, 0x7e, 0xbb, 0x39, 0x3f, 0xb4,
	0xc6, 0xdb, 0x09, 0xd3, 0xef, 0xf3, 0x1b, 0x9c, 0xcf, 0x76, 0x23, 0x63, 0x67, 0xc1, 0x29, 0xe7,
	0x6e, 0xa3, 0x6b, 0xf9, 0x0f, 0x9f, 0xb7, 0x49, 0x49, 0xce, 0x3d, 0x20, 0xa5, 0x07, 0xe4, 0x2d,
	0x08, 0x39, 0x18, 0xe6, 0x73, 0xbe, 0xff, 0xed, 0xf8, 0x89, 0xc0, 0xc9, 0x3c, 0x24, 0x11, 0x64,
	0xa5, 0x07, 0xe5, 0xaf, 0xa7, 0xe3, 0x29, 0xc5, 0xe5, 0x8c, 0x6b, 0x23, 0xd0, 0x5f, 0x6f, 0xce,
	0x0f, 0x5b, 0x29, 0x4f, 0x58, 0xb4, 0x0c, 0x72, 0x17, 0x75, 0x31, 0xbd, 0x9e, 0xb1, 0xb3, 0x21,
	0xe7, 0xaf, 0xfc, 0x9f, 0x17, 0xbd, 0x83, 0x2a, 0x26, 0x2a, 0x1f, 0x47, 0x86, 0xb7, 0x19, 0xa9,
	0x4c, 0x1b, 0x7c, 0xb8, 0x5c, 0x79, 0xd6, 0xd5, 0xca, 0xb3, 0xfe, 0xad, 0x3c, 0xeb, 0xcb, 0xda,
	0xab, 0x5d, 0xad, 0xbd, 0xda, 0xef, 0xb5, 0x57, 0xfb, 0xf8, 0x7a, 0xe3, 0x2d, 0x26, 0x77, 0x3d,
	0xa6, 0x35, 0x47, 0x7d, 0x1b, 0x5b, 0xf3, 0x9c, 0xbb, 0xc3, 0x1b, 0xd6, 0x4d, 0x48, 0x5e, 0xfc,
	0x0f, 0x00, 0x00, 0xff, 0xff, 0x5d, 0xa8, 0x8f, 0x29, 0xea, 0x02, 0x00, 0x00,
}

func (m *HypAttributes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HypAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HypAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.MaxFee.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintHyperlane(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	{
		size := m.GasLimit.Size()
		i -= size
		if _, err := m.GasLimit.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintHyperlane(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	if len(m.CustomHookMetadata) > 0 {
		i -= len(m.CustomHookMetadata)
		copy(dAtA[i:], m.CustomHookMetadata)
		i = encodeVarintHyperlane(dAtA, i, uint64(len(m.CustomHookMetadata)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.CustomHookId) > 0 {
		i -= len(m.CustomHookId)
		copy(dAtA[i:], m.CustomHookId)
		i = encodeVarintHyperlane(dAtA, i, uint64(len(m.CustomHookId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Recipient) > 0 {
		i -= len(m.Recipient)
		copy(dAtA[i:], m.Recipient)
		i = encodeVarintHyperlane(dAtA, i, uint64(len(m.Recipient)))
		i--
		dAtA[i] = 0x1a
	}
	if m.DestinationDomain != 0 {
		i = encodeVarintHyperlane(dAtA, i, uint64(m.DestinationDomain))
		i--
		dAtA[i] = 0x10
	}
	if len(m.TokenId) > 0 {
		i -= len(m.TokenId)
		copy(dAtA[i:], m.TokenId)
		i = encodeVarintHyperlane(dAtA, i, uint64(len(m.TokenId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintHyperlane(dAtA []byte, offset int, v uint64) int {
	offset -= sovHyperlane(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *HypAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TokenId)
	if l > 0 {
		n += 1 + l + sovHyperlane(uint64(l))
	}
	if m.DestinationDomain != 0 {
		n += 1 + sovHyperlane(uint64(m.DestinationDomain))
	}
	l = len(m.Recipient)
	if l > 0 {
		n += 1 + l + sovHyperlane(uint64(l))
	}
	l = len(m.CustomHookId)
	if l > 0 {
		n += 1 + l + sovHyperlane(uint64(l))
	}
	l = len(m.CustomHookMetadata)
	if l > 0 {
		n += 1 + l + sovHyperlane(uint64(l))
	}
	l = m.GasLimit.Size()
	n += 1 + l + sovHyperlane(uint64(l))
	l = m.MaxFee.Size()
	n += 1 + l + sovHyperlane(uint64(l))
	return n
}

func sovHyperlane(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozHyperlane(x uint64) (n int) {
	return sovHyperlane(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *HypAttributes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHyperlane
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HypAttributes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HypAttributes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHyperlane
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthHyperlane
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthHyperlane
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenId = append(m.TokenId[:0], dAtA[iNdEx:postIndex]...)
			if m.TokenId == nil {
				m.TokenId = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationDomain", wireType)
			}
			m.DestinationDomain = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHyperlane
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DestinationDomain |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Recipient", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHyperlane
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthHyperlane
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthHyperlane
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Recipient = append(m.Recipient[:0], dAtA[iNdEx:postIndex]...)
			if m.Recipient == nil {
				m.Recipient = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomHookId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHyperlane
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthHyperlane
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthHyperlane
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CustomHookId = append(m.CustomHookId[:0], dAtA[iNdEx:postIndex]...)
			if m.CustomHookId == nil {
				m.CustomHookId = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomHookMetadata", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHyperlane
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHyperlane
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHyperlane
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CustomHookMetadata = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasLimit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHyperlane
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHyperlane
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHyperlane
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.GasLimit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxFee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHyperlane
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHyperlane
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHyperlane
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MaxFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHyperlane(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHyperlane
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipHyperlane(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowHyperlane
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHyperlane
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHyperlane
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthHyperlane
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupHyperlane
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthHyperlane
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthHyperlane        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowHyperlane          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupHyperlane = fmt.Errorf("proto: unexpected end of group")
)
