// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: noble/orbiter/v1/forwarding.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	types "github.com/cosmos/cosmos-sdk/codec/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Forwarding contains the information for a cross-chain forwarding.
type Forwarding struct {
	// protocol_id specifies the bridging protocol type to use
	// to route incoming funds to a destination chain.
	ProtocolId ProtocolID `protobuf:"varint,1,opt,name=protocol_id,json=protocolId,proto3,enum=noble.orbiter.v1.ProtocolID" json:"protocol_id,omitempty"`
	// attributes contains protocol-specific configuration data.
	// The actual type depends on the protocol ID and must implement
	// the `ForwardingAttributes` interface.
	Attributes *types.Any `protobuf:"bytes,2,opt,name=attributes,proto3" json:"attributes,omitempty"`
	// passthrough_payload allows to pass additional metadata
	// to the destination chain. This field is not interpreted by
	// the orbiter module.
	PassthroughPayload []byte `protobuf:"bytes,3,opt,name=passthrough_payload,json=passthroughPayload,proto3" json:"passthrough_payload,omitempty"`
}

func (m *Forwarding) Reset()         { *m = Forwarding{} }
func (m *Forwarding) String() string { return proto.CompactTextString(m) }
func (*Forwarding) ProtoMessage()    {}
func (*Forwarding) Descriptor() ([]byte, []int) {
	return fileDescriptor_29d37cde80616c4b, []int{0}
}
func (m *Forwarding) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Forwarding) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Forwarding.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Forwarding) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Forwarding.Merge(m, src)
}
func (m *Forwarding) XXX_Size() int {
	return m.Size()
}
func (m *Forwarding) XXX_DiscardUnknown() {
	xxx_messageInfo_Forwarding.DiscardUnknown(m)
}

var xxx_messageInfo_Forwarding proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Forwarding)(nil), "noble.orbiter.v1.Forwarding")
}

func init() { proto.RegisterFile("noble/orbiter/v1/forwarding.proto", fileDescriptor_29d37cde80616c4b) }

var fileDescriptor_29d37cde80616c4b = []byte{
	// 303 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0xcc, 0xcb, 0x4f, 0xca,
	0x49, 0xd5, 0xcf, 0x2f, 0x4a, 0xca, 0x2c, 0x49, 0x2d, 0xd2, 0x2f, 0x33, 0xd4, 0x4f, 0xcb, 0x2f,
	0x2a, 0x4f, 0x2c, 0x4a, 0xc9, 0xcc, 0x4b, 0xd7, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x12, 0x00,
	0x2b, 0xd1, 0x83, 0x2a, 0xd1, 0x2b, 0x33, 0x94, 0x92, 0x4c, 0xce, 0x2f, 0xce, 0xcd, 0x2f, 0x8e,
	0x07, 0xcb, 0xeb, 0x43, 0x38, 0x10, 0xc5, 0x52, 0x22, 0xe9, 0xf9, 0xe9, 0xf9, 0x10, 0x71, 0x10,
	0x0b, 0x2a, 0x2a, 0x99, 0x9e, 0x9f, 0x9f, 0x9e, 0x93, 0xaa, 0x0f, 0xe6, 0x25, 0x95, 0xa6, 0xe9,
	0x27, 0xe6, 0x55, 0x42, 0xa5, 0xe4, 0x31, 0x1c, 0x00, 0x16, 0x4f, 0xce, 0xcf, 0x81, 0x28, 0x50,
	0x7a, 0xcc, 0xc8, 0xc5, 0xe5, 0x06, 0x77, 0x93, 0x90, 0x2d, 0x17, 0x37, 0x4c, 0x41, 0x7c, 0x66,
	0x8a, 0x04, 0xa3, 0x02, 0xa3, 0x06, 0x9f, 0x91, 0x8c, 0x1e, 0xba, 0x1b, 0xf5, 0x02, 0xa0, 0x8a,
	0x3c, 0x5d, 0x82, 0xb8, 0x60, 0x1a, 0x3c, 0x53, 0x84, 0xe2, 0xb9, 0xb8, 0x12, 0x4b, 0x4a, 0x8a,
	0x32, 0x93, 0x4a, 0x4b, 0x52, 0x8b, 0x25, 0x98, 0x14, 0x18, 0x35, 0xb8, 0x8d, 0x44, 0xf4, 0x20,
	0xce, 0xd3, 0x83, 0x39, 0x4f, 0xcf, 0x31, 0xaf, 0xd2, 0x49, 0xf3, 0xd4, 0x16, 0x5d, 0x55, 0x0c,
	0x63, 0x11, 0x2e, 0x71, 0x84, 0x1b, 0x13, 0x84, 0x64, 0xa4, 0x90, 0x3e, 0x97, 0x70, 0x41, 0x62,
	0x71, 0x71, 0x49, 0x46, 0x51, 0x7e, 0x69, 0x7a, 0x46, 0x7c, 0x41, 0x62, 0x65, 0x4e, 0x7e, 0x62,
	0x8a, 0x04, 0xb3, 0x02, 0xa3, 0x06, 0x4f, 0x90, 0x10, 0x92, 0x54, 0x00, 0x44, 0xc6, 0x8a, 0xa5,
	0x63, 0x81, 0x3c, 0x83, 0x93, 0xf6, 0x89, 0x47, 0x72, 0x8c, 0x17, 0x1e, 0xc9, 0x31, 0x3e, 0x78,
	0x24, 0xc7, 0x38, 0xe1, 0xb1, 0x1c, 0xc3, 0x85, 0xc7, 0x72, 0x0c, 0x37, 0x1e, 0xcb, 0x31, 0x44,
	0x09, 0xc2, 0x6c, 0x4f, 0x49, 0x2d, 0xd3, 0x2f, 0xa9, 0x2c, 0x48, 0x2d, 0x4e, 0x62, 0x03, 0x3b,
	0xd4, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0x8d, 0x46, 0x11, 0x10, 0xbd, 0x01, 0x00, 0x00,
}

func (m *Forwarding) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Forwarding) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Forwarding) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PassthroughPayload) > 0 {
		i -= len(m.PassthroughPayload)
		copy(dAtA[i:], m.PassthroughPayload)
		i = encodeVarintForwarding(dAtA, i, uint64(len(m.PassthroughPayload)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Attributes != nil {
		{
			size, err := m.Attributes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintForwarding(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.ProtocolId != 0 {
		i = encodeVarintForwarding(dAtA, i, uint64(m.ProtocolId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintForwarding(dAtA []byte, offset int, v uint64) int {
	offset -= sovForwarding(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Forwarding) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProtocolId != 0 {
		n += 1 + sovForwarding(uint64(m.ProtocolId))
	}
	if m.Attributes != nil {
		l = m.Attributes.Size()
		n += 1 + l + sovForwarding(uint64(l))
	}
	l = len(m.PassthroughPayload)
	if l > 0 {
		n += 1 + l + sovForwarding(uint64(l))
	}
	return n
}

func sovForwarding(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozForwarding(x uint64) (n int) {
	return sovForwarding(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Forwarding) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowForwarding
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Forwarding: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Forwarding: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProtocolId", wireType)
			}
			m.ProtocolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForwarding
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProtocolId |= ProtocolID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForwarding
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthForwarding
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthForwarding
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Attributes == nil {
				m.Attributes = &types.Any{}
			}
			if err := m.Attributes.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PassthroughPayload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForwarding
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthForwarding
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthForwarding
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PassthroughPayload = append(m.PassthroughPayload[:0], dAtA[iNdEx:postIndex]...)
			if m.PassthroughPayload == nil {
				m.PassthroughPayload = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipForwarding(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthForwarding
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipForwarding(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowForwarding
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowForwarding
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowForwarding
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthForwarding
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupForwarding
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthForwarding
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthForwarding        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowForwarding          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupForwarding = fmt.Errorf("proto: unexpected end of group")
)
