// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: noble/orbiter/component/dispatcher/v1/query.proto

package dispatcher

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types/query"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryDispatchedCountsRequest is the request type for the Query/DispatchedCounts RPC method.
type QueryDispatchedCountsRequest struct {
	// source_protocol_id is the source protocol identifier.
	SourceProtocolId string `protobuf:"bytes,1,opt,name=source_protocol_id,json=sourceProtocolId,proto3" json:"source_protocol_id,omitempty"`
	// source_counterparty_id is the source counterparty identifier.
	SourceCounterpartyId string `protobuf:"bytes,2,opt,name=source_counterparty_id,json=sourceCounterpartyId,proto3" json:"source_counterparty_id,omitempty"`
	// destination_protocol_id is the destination protocol identifier.
	DestinationProtocolId string `protobuf:"bytes,3,opt,name=destination_protocol_id,json=destinationProtocolId,proto3" json:"destination_protocol_id,omitempty"`
	// destination_counterparty_id is the destination counterparty identifier.
	DestinationCounterpartyId string `protobuf:"bytes,4,opt,name=destination_counterparty_id,json=destinationCounterpartyId,proto3" json:"destination_counterparty_id,omitempty"`
}

func (m *QueryDispatchedCountsRequest) Reset()         { *m = QueryDispatchedCountsRequest{} }
func (m *QueryDispatchedCountsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDispatchedCountsRequest) ProtoMessage()    {}
func (*QueryDispatchedCountsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a56d135821e5d01e, []int{0}
}
func (m *QueryDispatchedCountsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDispatchedCountsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDispatchedCountsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDispatchedCountsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDispatchedCountsRequest.Merge(m, src)
}
func (m *QueryDispatchedCountsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDispatchedCountsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDispatchedCountsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDispatchedCountsRequest proto.InternalMessageInfo

func (m *QueryDispatchedCountsRequest) GetSourceProtocolId() string {
	if m != nil {
		return m.SourceProtocolId
	}
	return ""
}

func (m *QueryDispatchedCountsRequest) GetSourceCounterpartyId() string {
	if m != nil {
		return m.SourceCounterpartyId
	}
	return ""
}

func (m *QueryDispatchedCountsRequest) GetDestinationProtocolId() string {
	if m != nil {
		return m.DestinationProtocolId
	}
	return ""
}

func (m *QueryDispatchedCountsRequest) GetDestinationCounterpartyId() string {
	if m != nil {
		return m.DestinationCounterpartyId
	}
	return ""
}

// QueryDispatchedAmountsByProtocolIDRequest is the request type for the Query/DispatchedCountsBy* methods.
type QueryDispatchedCountsByProtocolIDRequest struct {
	// source_protocol_id is the protocol identifier.
	ProtocolId string `protobuf:"bytes,1,opt,name=protocol_id,json=protocolId,proto3" json:"protocol_id,omitempty"`
}

func (m *QueryDispatchedCountsByProtocolIDRequest) Reset() {
	*m = QueryDispatchedCountsByProtocolIDRequest{}
}
func (m *QueryDispatchedCountsByProtocolIDRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDispatchedCountsByProtocolIDRequest) ProtoMessage()    {}
func (*QueryDispatchedCountsByProtocolIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a56d135821e5d01e, []int{1}
}
func (m *QueryDispatchedCountsByProtocolIDRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDispatchedCountsByProtocolIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDispatchedCountsByProtocolIDRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDispatchedCountsByProtocolIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDispatchedCountsByProtocolIDRequest.Merge(m, src)
}
func (m *QueryDispatchedCountsByProtocolIDRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDispatchedCountsByProtocolIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDispatchedCountsByProtocolIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDispatchedCountsByProtocolIDRequest proto.InternalMessageInfo

func (m *QueryDispatchedCountsByProtocolIDRequest) GetProtocolId() string {
	if m != nil {
		return m.ProtocolId
	}
	return ""
}

// QueryDispatchedCountsResponse is the response type for the Query/DispatchedCounts* RPC methods.
type QueryDispatchedCountsResponse struct {
	Counts []*DispatchCountEntry `protobuf:"bytes,1,rep,name=counts,proto3" json:"counts,omitempty"`
}

func (m *QueryDispatchedCountsResponse) Reset()         { *m = QueryDispatchedCountsResponse{} }
func (m *QueryDispatchedCountsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDispatchedCountsResponse) ProtoMessage()    {}
func (*QueryDispatchedCountsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a56d135821e5d01e, []int{2}
}
func (m *QueryDispatchedCountsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDispatchedCountsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDispatchedCountsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDispatchedCountsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDispatchedCountsResponse.Merge(m, src)
}
func (m *QueryDispatchedCountsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDispatchedCountsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDispatchedCountsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDispatchedCountsResponse proto.InternalMessageInfo

func (m *QueryDispatchedCountsResponse) GetCounts() []*DispatchCountEntry {
	if m != nil {
		return m.Counts
	}
	return nil
}

// QueryDispatchedAmountsRequest is the request type for the Query/DispatchedAmounts RPC method.
type QueryDispatchedAmountsRequest struct {
	// source_protocol_id is the source protocol identifier.
	SourceProtocolId string `protobuf:"bytes,1,opt,name=source_protocol_id,json=sourceProtocolId,proto3" json:"source_protocol_id,omitempty"`
	// source_counterparty_id is the source counterparty identifier.
	SourceCounterpartyId string `protobuf:"bytes,2,opt,name=source_counterparty_id,json=sourceCounterpartyId,proto3" json:"source_counterparty_id,omitempty"`
	// destination_protocol_id is the destination protocol identifier.
	DestinationProtocolId string `protobuf:"bytes,3,opt,name=destination_protocol_id,json=destinationProtocolId,proto3" json:"destination_protocol_id,omitempty"`
	// destination_counterparty_id is the destination counterparty identifier.
	DestinationCounterpartyId string `protobuf:"bytes,4,opt,name=destination_counterparty_id,json=destinationCounterpartyId,proto3" json:"destination_counterparty_id,omitempty"`
	// denom is the denomination of the amounts requested.
	Denom string `protobuf:"bytes,5,opt,name=denom,proto3" json:"denom,omitempty"`
}

func (m *QueryDispatchedAmountsRequest) Reset()         { *m = QueryDispatchedAmountsRequest{} }
func (m *QueryDispatchedAmountsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDispatchedAmountsRequest) ProtoMessage()    {}
func (*QueryDispatchedAmountsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a56d135821e5d01e, []int{3}
}
func (m *QueryDispatchedAmountsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDispatchedAmountsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDispatchedAmountsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDispatchedAmountsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDispatchedAmountsRequest.Merge(m, src)
}
func (m *QueryDispatchedAmountsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDispatchedAmountsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDispatchedAmountsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDispatchedAmountsRequest proto.InternalMessageInfo

func (m *QueryDispatchedAmountsRequest) GetSourceProtocolId() string {
	if m != nil {
		return m.SourceProtocolId
	}
	return ""
}

func (m *QueryDispatchedAmountsRequest) GetSourceCounterpartyId() string {
	if m != nil {
		return m.SourceCounterpartyId
	}
	return ""
}

func (m *QueryDispatchedAmountsRequest) GetDestinationProtocolId() string {
	if m != nil {
		return m.DestinationProtocolId
	}
	return ""
}

func (m *QueryDispatchedAmountsRequest) GetDestinationCounterpartyId() string {
	if m != nil {
		return m.DestinationCounterpartyId
	}
	return ""
}

func (m *QueryDispatchedAmountsRequest) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

// QueryDispatchedAmountsByProtocolIDRequest is the request type for the Query/DispatchedAmountsBy* methods.
type QueryDispatchedAmountsByProtocolIDRequest struct {
	// source_protocol_id is the protocol identifier.
	ProtocolId string `protobuf:"bytes,1,opt,name=protocol_id,json=protocolId,proto3" json:"protocol_id,omitempty"`
}

func (m *QueryDispatchedAmountsByProtocolIDRequest) Reset() {
	*m = QueryDispatchedAmountsByProtocolIDRequest{}
}
func (m *QueryDispatchedAmountsByProtocolIDRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryDispatchedAmountsByProtocolIDRequest) ProtoMessage() {}
func (*QueryDispatchedAmountsByProtocolIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a56d135821e5d01e, []int{4}
}
func (m *QueryDispatchedAmountsByProtocolIDRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDispatchedAmountsByProtocolIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDispatchedAmountsByProtocolIDRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDispatchedAmountsByProtocolIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDispatchedAmountsByProtocolIDRequest.Merge(m, src)
}
func (m *QueryDispatchedAmountsByProtocolIDRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDispatchedAmountsByProtocolIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDispatchedAmountsByProtocolIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDispatchedAmountsByProtocolIDRequest proto.InternalMessageInfo

func (m *QueryDispatchedAmountsByProtocolIDRequest) GetProtocolId() string {
	if m != nil {
		return m.ProtocolId
	}
	return ""
}

// QueryDispatchedAmountsResponse is the response type for the Query/DispatchedAmounts* RPC methods.
type QueryDispatchedAmountsResponse struct {
	Amounts []*DispatchedAmountEntry `protobuf:"bytes,1,rep,name=amounts,proto3" json:"amounts,omitempty"`
}

func (m *QueryDispatchedAmountsResponse) Reset()         { *m = QueryDispatchedAmountsResponse{} }
func (m *QueryDispatchedAmountsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDispatchedAmountsResponse) ProtoMessage()    {}
func (*QueryDispatchedAmountsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a56d135821e5d01e, []int{5}
}
func (m *QueryDispatchedAmountsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDispatchedAmountsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDispatchedAmountsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDispatchedAmountsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDispatchedAmountsResponse.Merge(m, src)
}
func (m *QueryDispatchedAmountsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDispatchedAmountsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDispatchedAmountsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDispatchedAmountsResponse proto.InternalMessageInfo

func (m *QueryDispatchedAmountsResponse) GetAmounts() []*DispatchedAmountEntry {
	if m != nil {
		return m.Amounts
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryDispatchedCountsRequest)(nil), "noble.orbiter.component.dispatcher.v1.QueryDispatchedCountsRequest")
	proto.RegisterType((*QueryDispatchedCountsByProtocolIDRequest)(nil), "noble.orbiter.component.dispatcher.v1.QueryDispatchedCountsByProtocolIDRequest")
	proto.RegisterType((*QueryDispatchedCountsResponse)(nil), "noble.orbiter.component.dispatcher.v1.QueryDispatchedCountsResponse")
	proto.RegisterType((*QueryDispatchedAmountsRequest)(nil), "noble.orbiter.component.dispatcher.v1.QueryDispatchedAmountsRequest")
	proto.RegisterType((*QueryDispatchedAmountsByProtocolIDRequest)(nil), "noble.orbiter.component.dispatcher.v1.QueryDispatchedAmountsByProtocolIDRequest")
	proto.RegisterType((*QueryDispatchedAmountsResponse)(nil), "noble.orbiter.component.dispatcher.v1.QueryDispatchedAmountsResponse")
}

func init() {
	proto.RegisterFile("noble/orbiter/component/dispatcher/v1/query.proto", fileDescriptor_a56d135821e5d01e)
}

var fileDescriptor_a56d135821e5d01e = []byte{
	// 688 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe4, 0x96, 0x4f, 0x6b, 0x13, 0x4f,
	0x18, 0xc7, 0x3b, 0xdb, 0x5f, 0xfb, 0xc3, 0x29, 0x42, 0x1d, 0xaa, 0xd6, 0xb4, 0xae, 0x65, 0x45,
	0x8c, 0x62, 0x77, 0x68, 0x95, 0x82, 0x22, 0x82, 0x6d, 0xaa, 0x86, 0x56, 0x6d, 0xd3, 0x22, 0xea,
	0xa5, 0x6c, 0x76, 0x87, 0x74, 0x21, 0xd9, 0xd9, 0xee, 0x4c, 0x8a, 0x4b, 0xe8, 0xc5, 0x93, 0xc7,
	0x8a, 0x15, 0xc5, 0x83, 0x17, 0x7d, 0x01, 0xbe, 0x07, 0x0f, 0x7a, 0x2c, 0x78, 0xf1, 0x28, 0x89,
	0xe0, 0x7b, 0xf0, 0xa2, 0x64, 0x76, 0x93, 0x6c, 0xf6, 0x8f, 0xe4, 0x4f, 0x91, 0x82, 0xc7, 0xf6,
	0xd9, 0xef, 0xf3, 0x9d, 0xf9, 0x3c, 0xcf, 0x77, 0x08, 0x9c, 0xb1, 0x68, 0xbe, 0x48, 0x30, 0x75,
	0xf2, 0x26, 0x27, 0x0e, 0xd6, 0x69, 0xc9, 0xa6, 0x16, 0xb1, 0x38, 0x36, 0x4c, 0x66, 0x6b, 0x5c,
	0xdf, 0x24, 0x0e, 0xde, 0x9e, 0xc1, 0x5b, 0x65, 0xe2, 0xb8, 0xaa, 0xed, 0x50, 0x4e, 0xd1, 0x39,
	0x21, 0x51, 0x7d, 0x89, 0xda, 0x94, 0xa8, 0x2d, 0x89, 0xba, 0x3d, 0x93, 0x9a, 0xd0, 0x29, 0x2b,
	0x51, 0xe6, 0x49, 0x43, 0x3d, 0x52, 0x93, 0x05, 0x4a, 0x0b, 0x45, 0x82, 0x35, 0xdb, 0xc4, 0x9a,
	0x65, 0x51, 0xae, 0x71, 0x93, 0x5a, 0xcc, 0xaf, 0xce, 0x75, 0x76, 0xa8, 0x80, 0x9f, 0xd0, 0x29,
	0x3f, 0x01, 0x9c, 0x5c, 0xad, 0xbb, 0x64, 0x1a, 0x15, 0x63, 0x81, 0x96, 0x2d, 0xce, 0x72, 0x64,
	0xab, 0x4c, 0x18, 0x47, 0x97, 0x20, 0x62, 0xb4, 0xec, 0xe8, 0x64, 0x43, 0x08, 0x74, 0x5a, 0xdc,
	0x30, 0x8d, 0x71, 0x30, 0x05, 0xd2, 0x47, 0x72, 0xa3, 0x5e, 0x65, 0xc5, 0x2f, 0x64, 0x0d, 0x74,
	0x05, 0x9e, 0xf0, 0xbf, 0xd6, 0xeb, 0x5d, 0x88, 0x63, 0x6b, 0x0e, 0x77, 0xeb, 0x0a, 0x49, 0x28,
	0xc6, 0xbc, 0xea, 0x42, 0xa0, 0x98, 0x35, 0xd0, 0x1c, 0x3c, 0x69, 0x10, 0xc6, 0x4d, 0x4b, 0x5c,
	0xa9, 0xcd, 0x68, 0x50, 0xc8, 0x8e, 0x07, 0xca, 0x01, 0xb7, 0x1b, 0x70, 0x22, 0xa8, 0x0b, 0x5b,
	0xfe, 0x27, 0xb4, 0xa7, 0x02, 0x9f, 0xb4, 0xfb, 0x2a, 0x4b, 0x30, 0x1d, 0x7b, 0xf7, 0x79, 0xb7,
	0x69, 0x92, 0x69, 0x70, 0x38, 0x03, 0x47, 0xa2, 0x00, 0xa0, 0xdd, 0x3c, 0x8c, 0xe2, 0xc0, 0xd3,
	0x09, 0x20, 0x99, 0x4d, 0x2d, 0x46, 0xd0, 0x2a, 0x1c, 0x16, 0x27, 0x64, 0xe3, 0x60, 0x6a, 0x30,
	0x3d, 0x32, 0x7b, 0x55, 0xed, 0x68, 0x2b, 0xd4, 0x46, 0x43, 0xd1, 0x6e, 0xd1, 0xe2, 0x8e, 0x9b,
	0xf3, 0x1b, 0x29, 0xcf, 0xa5, 0x88, 0xe9, 0xcd, 0xd2, 0xbf, 0x32, 0x3e, 0x34, 0x06, 0x87, 0x0c,
	0x62, 0xd1, 0xd2, 0xf8, 0x90, 0xf8, 0xd2, 0xfb, 0x43, 0x59, 0x86, 0x17, 0xe2, 0x91, 0xf4, 0x34,
	0xd5, 0x27, 0x50, 0x4e, 0x02, 0xec, 0x8f, 0xf5, 0x01, 0xfc, 0x5f, 0x2b, 0x05, 0xe7, 0x7a, 0xbd,
	0xcb, 0xb9, 0x36, 0x5a, 0x7a, 0xa3, 0x6d, 0x34, 0x9b, 0xfd, 0x75, 0x14, 0x0e, 0x09, 0x6b, 0xf4,
	0x51, 0x82, 0xa3, 0xe1, 0xad, 0x42, 0x0b, 0x1d, 0xba, 0xfc, 0x29, 0xdc, 0xa9, 0x4c, 0x7f, 0x4d,
	0x3c, 0x02, 0xca, 0x3b, 0xf0, 0xec, 0xc7, 0x87, 0x8b, 0xe0, 0xe9, 0x97, 0xef, 0x2f, 0xa4, 0x57,
	0x00, 0xed, 0x01, 0xdc, 0xfe, 0x18, 0x25, 0x3c, 0x41, 0x06, 0xf6, 0xb6, 0x18, 0x57, 0xa2, 0x1b,
	0xba, 0xd3, 0xfc, 0x67, 0x68, 0x2b, 0x76, 0x70, 0x25, 0x61, 0xd7, 0x42, 0x95, 0xb0, 0x0e, 0xed,
	0x4a, 0x50, 0x89, 0x06, 0x7d, 0xad, 0x3d, 0x02, 0x19, 0x74, 0xbf, 0x1f, 0x24, 0x31, 0x2b, 0x76,
	0x40, 0x8c, 0xd7, 0x5a, 0x88, 0xef, 0xa0, 0x5b, 0x5d, 0x02, 0xce, 0xbb, 0xd3, 0x1e, 0x4d, 0x5c,
	0x09, 0x02, 0x43, 0x6f, 0x24, 0x78, 0x3e, 0x7a, 0x85, 0x4c, 0x4c, 0x58, 0x0f, 0x2d, 0x97, 0x87,
	0x2d, 0x2e, 0x77, 0xd1, 0x52, 0xf7, 0x5c, 0x02, 0x2b, 0x13, 0x82, 0xf3, 0x49, 0x82, 0xc7, 0x22,
	0xa9, 0x47, 0x3d, 0x9e, 0xba, 0xfd, 0x55, 0x4e, 0x2d, 0xf6, 0xd9, 0xc5, 0xbf, 0xfc, 0xfb, 0x40,
	0xf0, 0x5e, 0x03, 0xf4, 0xb2, 0xe3, 0xe0, 0xf9, 0x6f, 0xcc, 0x5f, 0x4a, 0xde, 0x9e, 0x04, 0xcf,
	0xc6, 0xbc, 0xc6, 0x91, 0xe8, 0xad, 0xf4, 0x45, 0x25, 0x6e, 0xc7, 0x0e, 0x88, 0xf3, 0x7a, 0x0b,
	0x73, 0x16, 0xdd, 0xee, 0x16, 0x72, 0x52, 0xfa, 0xde, 0x4a, 0x30, 0x1d, 0x73, 0x8b, 0xf8, 0xf8,
	0x1d, 0x5a, 0x36, 0x8f, 0x5a, 0x6c, 0xee, 0xa1, 0xe5, 0x1e, 0xd8, 0x24, 0x26, 0x70, 0x7e, 0xfd,
	0x73, 0x55, 0x06, 0xfb, 0x55, 0x19, 0x7c, 0xab, 0xca, 0x60, 0xb7, 0x26, 0x0f, 0xec, 0xd7, 0xe4,
	0x81, 0xaf, 0x35, 0x79, 0xe0, 0xf1, 0xb5, 0x82, 0xc9, 0x37, 0xcb, 0xf9, 0xfa, 0x99, 0x3d, 0xc7,
	0x69, 0x8d, 0x31, 0xc2, 0x59, 0xd3, 0x98, 0xbb, 0x36, 0x61, 0xb1, 0xbf, 0x82, 0xf3, 0xc3, 0xc2,
	0xe3, 0xf2, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0xb9, 0xbb, 0x5c, 0xb0, 0xc7, 0x0b, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// DispatchedCounts retrieves the dispatched counts for a specific route.
	DispatchedCounts(ctx context.Context, in *QueryDispatchedCountsRequest, opts ...grpc.CallOption) (*QueryDispatchedCountsResponse, error)
	// DispatchedCountsBySourceProtocolID retrieves all the dispatched counts for a specific source protocol ID.
	DispatchedCountsBySourceProtocolID(ctx context.Context, in *QueryDispatchedCountsByProtocolIDRequest, opts ...grpc.CallOption) (*QueryDispatchedCountsResponse, error)
	// DispatchedCountsByDestinationProtocolID retrieves all the dispatched counts for a specific destination protocol ID.
	DispatchedCountsByDestinationProtocolID(ctx context.Context, in *QueryDispatchedCountsByProtocolIDRequest, opts ...grpc.CallOption) (*QueryDispatchedCountsResponse, error)
	// DispatchedAmounts retrieves the dispatched amounts for a specific route.
	DispatchedAmounts(ctx context.Context, in *QueryDispatchedAmountsRequest, opts ...grpc.CallOption) (*QueryDispatchedAmountsResponse, error)
	// DispatchedAmountsBySourceProtocolID retrieves all the dispatched amounts for a specific source protocol ID.
	DispatchedAmountsBySourceProtocolID(ctx context.Context, in *QueryDispatchedAmountsByProtocolIDRequest, opts ...grpc.CallOption) (*QueryDispatchedAmountsResponse, error)
	// DispatchedAmountsByDestinationProtocolID retrieves all the dispatched amounts for a specific destination protocol ID.
	DispatchedAmountsByDestinationProtocolID(ctx context.Context, in *QueryDispatchedAmountsByProtocolIDRequest, opts ...grpc.CallOption) (*QueryDispatchedAmountsResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) DispatchedCounts(ctx context.Context, in *QueryDispatchedCountsRequest, opts ...grpc.CallOption) (*QueryDispatchedCountsResponse, error) {
	out := new(QueryDispatchedCountsResponse)
	err := c.cc.Invoke(ctx, "/noble.orbiter.component.dispatcher.v1.Query/DispatchedCounts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DispatchedCountsBySourceProtocolID(ctx context.Context, in *QueryDispatchedCountsByProtocolIDRequest, opts ...grpc.CallOption) (*QueryDispatchedCountsResponse, error) {
	out := new(QueryDispatchedCountsResponse)
	err := c.cc.Invoke(ctx, "/noble.orbiter.component.dispatcher.v1.Query/DispatchedCountsBySourceProtocolID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DispatchedCountsByDestinationProtocolID(ctx context.Context, in *QueryDispatchedCountsByProtocolIDRequest, opts ...grpc.CallOption) (*QueryDispatchedCountsResponse, error) {
	out := new(QueryDispatchedCountsResponse)
	err := c.cc.Invoke(ctx, "/noble.orbiter.component.dispatcher.v1.Query/DispatchedCountsByDestinationProtocolID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DispatchedAmounts(ctx context.Context, in *QueryDispatchedAmountsRequest, opts ...grpc.CallOption) (*QueryDispatchedAmountsResponse, error) {
	out := new(QueryDispatchedAmountsResponse)
	err := c.cc.Invoke(ctx, "/noble.orbiter.component.dispatcher.v1.Query/DispatchedAmounts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DispatchedAmountsBySourceProtocolID(ctx context.Context, in *QueryDispatchedAmountsByProtocolIDRequest, opts ...grpc.CallOption) (*QueryDispatchedAmountsResponse, error) {
	out := new(QueryDispatchedAmountsResponse)
	err := c.cc.Invoke(ctx, "/noble.orbiter.component.dispatcher.v1.Query/DispatchedAmountsBySourceProtocolID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DispatchedAmountsByDestinationProtocolID(ctx context.Context, in *QueryDispatchedAmountsByProtocolIDRequest, opts ...grpc.CallOption) (*QueryDispatchedAmountsResponse, error) {
	out := new(QueryDispatchedAmountsResponse)
	err := c.cc.Invoke(ctx, "/noble.orbiter.component.dispatcher.v1.Query/DispatchedAmountsByDestinationProtocolID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// DispatchedCounts retrieves the dispatched counts for a specific route.
	DispatchedCounts(context.Context, *QueryDispatchedCountsRequest) (*QueryDispatchedCountsResponse, error)
	// DispatchedCountsBySourceProtocolID retrieves all the dispatched counts for a specific source protocol ID.
	DispatchedCountsBySourceProtocolID(context.Context, *QueryDispatchedCountsByProtocolIDRequest) (*QueryDispatchedCountsResponse, error)
	// DispatchedCountsByDestinationProtocolID retrieves all the dispatched counts for a specific destination protocol ID.
	DispatchedCountsByDestinationProtocolID(context.Context, *QueryDispatchedCountsByProtocolIDRequest) (*QueryDispatchedCountsResponse, error)
	// DispatchedAmounts retrieves the dispatched amounts for a specific route.
	DispatchedAmounts(context.Context, *QueryDispatchedAmountsRequest) (*QueryDispatchedAmountsResponse, error)
	// DispatchedAmountsBySourceProtocolID retrieves all the dispatched amounts for a specific source protocol ID.
	DispatchedAmountsBySourceProtocolID(context.Context, *QueryDispatchedAmountsByProtocolIDRequest) (*QueryDispatchedAmountsResponse, error)
	// DispatchedAmountsByDestinationProtocolID retrieves all the dispatched amounts for a specific destination protocol ID.
	DispatchedAmountsByDestinationProtocolID(context.Context, *QueryDispatchedAmountsByProtocolIDRequest) (*QueryDispatchedAmountsResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) DispatchedCounts(ctx context.Context, req *QueryDispatchedCountsRequest) (*QueryDispatchedCountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DispatchedCounts not implemented")
}
func (*UnimplementedQueryServer) DispatchedCountsBySourceProtocolID(ctx context.Context, req *QueryDispatchedCountsByProtocolIDRequest) (*QueryDispatchedCountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DispatchedCountsBySourceProtocolID not implemented")
}
func (*UnimplementedQueryServer) DispatchedCountsByDestinationProtocolID(ctx context.Context, req *QueryDispatchedCountsByProtocolIDRequest) (*QueryDispatchedCountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DispatchedCountsByDestinationProtocolID not implemented")
}
func (*UnimplementedQueryServer) DispatchedAmounts(ctx context.Context, req *QueryDispatchedAmountsRequest) (*QueryDispatchedAmountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DispatchedAmounts not implemented")
}
func (*UnimplementedQueryServer) DispatchedAmountsBySourceProtocolID(ctx context.Context, req *QueryDispatchedAmountsByProtocolIDRequest) (*QueryDispatchedAmountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DispatchedAmountsBySourceProtocolID not implemented")
}
func (*UnimplementedQueryServer) DispatchedAmountsByDestinationProtocolID(ctx context.Context, req *QueryDispatchedAmountsByProtocolIDRequest) (*QueryDispatchedAmountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DispatchedAmountsByDestinationProtocolID not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_DispatchedCounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDispatchedCountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DispatchedCounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/noble.orbiter.component.dispatcher.v1.Query/DispatchedCounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DispatchedCounts(ctx, req.(*QueryDispatchedCountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DispatchedCountsBySourceProtocolID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDispatchedCountsByProtocolIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DispatchedCountsBySourceProtocolID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/noble.orbiter.component.dispatcher.v1.Query/DispatchedCountsBySourceProtocolID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DispatchedCountsBySourceProtocolID(ctx, req.(*QueryDispatchedCountsByProtocolIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DispatchedCountsByDestinationProtocolID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDispatchedCountsByProtocolIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DispatchedCountsByDestinationProtocolID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/noble.orbiter.component.dispatcher.v1.Query/DispatchedCountsByDestinationProtocolID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DispatchedCountsByDestinationProtocolID(ctx, req.(*QueryDispatchedCountsByProtocolIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DispatchedAmounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDispatchedAmountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DispatchedAmounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/noble.orbiter.component.dispatcher.v1.Query/DispatchedAmounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DispatchedAmounts(ctx, req.(*QueryDispatchedAmountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DispatchedAmountsBySourceProtocolID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDispatchedAmountsByProtocolIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DispatchedAmountsBySourceProtocolID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/noble.orbiter.component.dispatcher.v1.Query/DispatchedAmountsBySourceProtocolID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DispatchedAmountsBySourceProtocolID(ctx, req.(*QueryDispatchedAmountsByProtocolIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DispatchedAmountsByDestinationProtocolID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDispatchedAmountsByProtocolIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DispatchedAmountsByDestinationProtocolID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/noble.orbiter.component.dispatcher.v1.Query/DispatchedAmountsByDestinationProtocolID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DispatchedAmountsByDestinationProtocolID(ctx, req.(*QueryDispatchedAmountsByProtocolIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var Query_serviceDesc = _Query_serviceDesc
var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "noble.orbiter.component.dispatcher.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DispatchedCounts",
			Handler:    _Query_DispatchedCounts_Handler,
		},
		{
			MethodName: "DispatchedCountsBySourceProtocolID",
			Handler:    _Query_DispatchedCountsBySourceProtocolID_Handler,
		},
		{
			MethodName: "DispatchedCountsByDestinationProtocolID",
			Handler:    _Query_DispatchedCountsByDestinationProtocolID_Handler,
		},
		{
			MethodName: "DispatchedAmounts",
			Handler:    _Query_DispatchedAmounts_Handler,
		},
		{
			MethodName: "DispatchedAmountsBySourceProtocolID",
			Handler:    _Query_DispatchedAmountsBySourceProtocolID_Handler,
		},
		{
			MethodName: "DispatchedAmountsByDestinationProtocolID",
			Handler:    _Query_DispatchedAmountsByDestinationProtocolID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "noble/orbiter/component/dispatcher/v1/query.proto",
}

func (m *QueryDispatchedCountsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDispatchedCountsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDispatchedCountsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DestinationCounterpartyId) > 0 {
		i -= len(m.DestinationCounterpartyId)
		copy(dAtA[i:], m.DestinationCounterpartyId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.DestinationCounterpartyId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.DestinationProtocolId) > 0 {
		i -= len(m.DestinationProtocolId)
		copy(dAtA[i:], m.DestinationProtocolId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.DestinationProtocolId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SourceCounterpartyId) > 0 {
		i -= len(m.SourceCounterpartyId)
		copy(dAtA[i:], m.SourceCounterpartyId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SourceCounterpartyId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.SourceProtocolId) > 0 {
		i -= len(m.SourceProtocolId)
		copy(dAtA[i:], m.SourceProtocolId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SourceProtocolId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDispatchedCountsByProtocolIDRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDispatchedCountsByProtocolIDRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDispatchedCountsByProtocolIDRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ProtocolId) > 0 {
		i -= len(m.ProtocolId)
		copy(dAtA[i:], m.ProtocolId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ProtocolId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDispatchedCountsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDispatchedCountsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDispatchedCountsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Counts) > 0 {
		for iNdEx := len(m.Counts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Counts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryDispatchedAmountsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDispatchedAmountsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDispatchedAmountsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.DestinationCounterpartyId) > 0 {
		i -= len(m.DestinationCounterpartyId)
		copy(dAtA[i:], m.DestinationCounterpartyId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.DestinationCounterpartyId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.DestinationProtocolId) > 0 {
		i -= len(m.DestinationProtocolId)
		copy(dAtA[i:], m.DestinationProtocolId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.DestinationProtocolId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SourceCounterpartyId) > 0 {
		i -= len(m.SourceCounterpartyId)
		copy(dAtA[i:], m.SourceCounterpartyId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SourceCounterpartyId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.SourceProtocolId) > 0 {
		i -= len(m.SourceProtocolId)
		copy(dAtA[i:], m.SourceProtocolId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SourceProtocolId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDispatchedAmountsByProtocolIDRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDispatchedAmountsByProtocolIDRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDispatchedAmountsByProtocolIDRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ProtocolId) > 0 {
		i -= len(m.ProtocolId)
		copy(dAtA[i:], m.ProtocolId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ProtocolId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDispatchedAmountsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDispatchedAmountsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDispatchedAmountsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Amounts) > 0 {
		for iNdEx := len(m.Amounts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Amounts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryDispatchedCountsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SourceProtocolId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.SourceCounterpartyId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.DestinationProtocolId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.DestinationCounterpartyId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDispatchedCountsByProtocolIDRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ProtocolId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDispatchedCountsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Counts) > 0 {
		for _, e := range m.Counts {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryDispatchedAmountsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SourceProtocolId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.SourceCounterpartyId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.DestinationProtocolId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.DestinationCounterpartyId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDispatchedAmountsByProtocolIDRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ProtocolId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDispatchedAmountsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Amounts) > 0 {
		for _, e := range m.Amounts {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryDispatchedCountsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDispatchedCountsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDispatchedCountsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceProtocolId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceProtocolId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceCounterpartyId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceCounterpartyId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationProtocolId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestinationProtocolId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationCounterpartyId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestinationCounterpartyId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDispatchedCountsByProtocolIDRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDispatchedCountsByProtocolIDRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDispatchedCountsByProtocolIDRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProtocolId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProtocolId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDispatchedCountsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDispatchedCountsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDispatchedCountsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Counts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Counts = append(m.Counts, &DispatchCountEntry{})
			if err := m.Counts[len(m.Counts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDispatchedAmountsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDispatchedAmountsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDispatchedAmountsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceProtocolId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceProtocolId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceCounterpartyId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceCounterpartyId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationProtocolId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestinationProtocolId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationCounterpartyId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestinationCounterpartyId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDispatchedAmountsByProtocolIDRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDispatchedAmountsByProtocolIDRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDispatchedAmountsByProtocolIDRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProtocolId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProtocolId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDispatchedAmountsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDispatchedAmountsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDispatchedAmountsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amounts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amounts = append(m.Amounts, &DispatchedAmountEntry{})
			if err := m.Amounts[len(m.Amounts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
