// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: noble/orbiter/component/dispatcher/v1/query.proto

package dispatcher

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	core "orbiter.dev/types/core"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryDispatchedCountsRequest is the request type for the Query/DispatchedCounts RPC method.
type QueryDispatchedCountsRequest struct {
	// source_protocol_id is the source protocol identifier.
	SourceProtocolId core.ProtocolID `protobuf:"varint,1,opt,name=source_protocol_id,json=sourceProtocolId,proto3,enum=noble.orbiter.core.v1.ProtocolID" json:"source_protocol_id,omitempty"`
	// source_counterparty_id is the source counterparty identifier.
	SourceCounterpartyId string `protobuf:"bytes,2,opt,name=source_counterparty_id,json=sourceCounterpartyId,proto3" json:"source_counterparty_id,omitempty"`
	// destination_protocol_id is the destination protocol identifier.
	DestinationProtocolId core.ProtocolID `protobuf:"varint,3,opt,name=destination_protocol_id,json=destinationProtocolId,proto3,enum=noble.orbiter.core.v1.ProtocolID" json:"destination_protocol_id,omitempty"`
	// destination_counterparty_id is the destination counterparty identifier.
	DestinationCounterpartyId string `protobuf:"bytes,4,opt,name=destination_counterparty_id,json=destinationCounterpartyId,proto3" json:"destination_counterparty_id,omitempty"`
}

func (m *QueryDispatchedCountsRequest) Reset()         { *m = QueryDispatchedCountsRequest{} }
func (m *QueryDispatchedCountsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDispatchedCountsRequest) ProtoMessage()    {}
func (*QueryDispatchedCountsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a56d135821e5d01e, []int{0}
}
func (m *QueryDispatchedCountsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDispatchedCountsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDispatchedCountsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDispatchedCountsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDispatchedCountsRequest.Merge(m, src)
}
func (m *QueryDispatchedCountsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDispatchedCountsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDispatchedCountsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDispatchedCountsRequest proto.InternalMessageInfo

func (m *QueryDispatchedCountsRequest) GetSourceProtocolId() core.ProtocolID {
	if m != nil {
		return m.SourceProtocolId
	}
	return core.PROTOCOL_UNSUPPORTED
}

func (m *QueryDispatchedCountsRequest) GetSourceCounterpartyId() string {
	if m != nil {
		return m.SourceCounterpartyId
	}
	return ""
}

func (m *QueryDispatchedCountsRequest) GetDestinationProtocolId() core.ProtocolID {
	if m != nil {
		return m.DestinationProtocolId
	}
	return core.PROTOCOL_UNSUPPORTED
}

func (m *QueryDispatchedCountsRequest) GetDestinationCounterpartyId() string {
	if m != nil {
		return m.DestinationCounterpartyId
	}
	return ""
}

type QueryDispatchedCountsByProtocolIDRequest struct {
	// source_protocol_id is the protocol identifier.
	ProtocolId core.ProtocolID `protobuf:"varint,1,opt,name=protocol_id,json=protocolId,proto3,enum=noble.orbiter.core.v1.ProtocolID" json:"protocol_id,omitempty"`
}

func (m *QueryDispatchedCountsByProtocolIDRequest) Reset() {
	*m = QueryDispatchedCountsByProtocolIDRequest{}
}
func (m *QueryDispatchedCountsByProtocolIDRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDispatchedCountsByProtocolIDRequest) ProtoMessage()    {}
func (*QueryDispatchedCountsByProtocolIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a56d135821e5d01e, []int{1}
}
func (m *QueryDispatchedCountsByProtocolIDRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDispatchedCountsByProtocolIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDispatchedCountsByProtocolIDRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDispatchedCountsByProtocolIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDispatchedCountsByProtocolIDRequest.Merge(m, src)
}
func (m *QueryDispatchedCountsByProtocolIDRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDispatchedCountsByProtocolIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDispatchedCountsByProtocolIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDispatchedCountsByProtocolIDRequest proto.InternalMessageInfo

func (m *QueryDispatchedCountsByProtocolIDRequest) GetProtocolId() core.ProtocolID {
	if m != nil {
		return m.ProtocolId
	}
	return core.PROTOCOL_UNSUPPORTED
}

// QueryDispatchedCountsResponse is the response type for the Query/DispatchedCounts* RPC method.
type QueryDispatchedCountsResponse struct {
	Counts []*DispatchCountEntry `protobuf:"bytes,1,rep,name=counts,proto3" json:"counts,omitempty"`
}

func (m *QueryDispatchedCountsResponse) Reset()         { *m = QueryDispatchedCountsResponse{} }
func (m *QueryDispatchedCountsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDispatchedCountsResponse) ProtoMessage()    {}
func (*QueryDispatchedCountsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a56d135821e5d01e, []int{2}
}
func (m *QueryDispatchedCountsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDispatchedCountsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDispatchedCountsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDispatchedCountsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDispatchedCountsResponse.Merge(m, src)
}
func (m *QueryDispatchedCountsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDispatchedCountsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDispatchedCountsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDispatchedCountsResponse proto.InternalMessageInfo

func (m *QueryDispatchedCountsResponse) GetCounts() []*DispatchCountEntry {
	if m != nil {
		return m.Counts
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryDispatchedCountsRequest)(nil), "noble.orbiter.component.dispatcher.v1.QueryDispatchedCountsRequest")
	proto.RegisterType((*QueryDispatchedCountsByProtocolIDRequest)(nil), "noble.orbiter.component.dispatcher.v1.QueryDispatchedCountsByProtocolIDRequest")
	proto.RegisterType((*QueryDispatchedCountsResponse)(nil), "noble.orbiter.component.dispatcher.v1.QueryDispatchedCountsResponse")
}

func init() {
	proto.RegisterFile("noble/orbiter/component/dispatcher/v1/query.proto", fileDescriptor_a56d135821e5d01e)
}

var fileDescriptor_a56d135821e5d01e = []byte{
	// 581 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x95, 0x41, 0x8b, 0xd3, 0x4e,
	0x18, 0xc6, 0x3b, 0xd9, 0xff, 0x16, 0xfe, 0xb3, 0x20, 0xeb, 0xb0, 0xea, 0xda, 0x5d, 0x43, 0x2d,
	0xa8, 0x45, 0x70, 0x86, 0x56, 0x11, 0xbc, 0x88, 0xb4, 0x55, 0x2c, 0x22, 0xba, 0x5d, 0x10, 0xf1,
	0xb2, 0xa6, 0xc9, 0x50, 0x03, 0xed, 0x4c, 0x76, 0x66, 0x5a, 0x08, 0x65, 0x2f, 0x9e, 0x3c, 0x2e,
	0x28, 0x08, 0x5e, 0xbd, 0x78, 0xf4, 0x3b, 0x78, 0xf1, 0x24, 0x0b, 0x5e, 0x3c, 0x4a, 0x2b, 0xf8,
	0x29, 0x04, 0xc9, 0x24, 0x6d, 0x93, 0xb4, 0x95, 0x96, 0x7a, 0xf0, 0x52, 0x42, 0xde, 0x79, 0x9e,
	0xf7, 0x99, 0x5f, 0xdf, 0x97, 0xc0, 0x12, 0xe3, 0xcd, 0x36, 0x25, 0x5c, 0x34, 0x5d, 0x45, 0x05,
	0xb1, 0x79, 0xc7, 0xe3, 0x8c, 0x32, 0x45, 0x1c, 0x57, 0x7a, 0x96, 0xb2, 0x5f, 0x50, 0x41, 0x7a,
	0x25, 0x72, 0xd8, 0xa5, 0xc2, 0xc7, 0x9e, 0xe0, 0x8a, 0xa3, 0x4b, 0x5a, 0x82, 0x23, 0x09, 0x1e,
	0x4b, 0xf0, 0x44, 0x82, 0x7b, 0xa5, 0xdc, 0x69, 0xab, 0xe3, 0x32, 0x4e, 0xf4, 0x6f, 0xa8, 0xcc,
	0xed, 0xd8, 0x5c, 0x76, 0xb8, 0x0c, 0xdd, 0x52, 0xb6, 0xb9, 0xad, 0x16, 0x6f, 0x71, 0xfd, 0x48,
	0x82, 0xa7, 0xe8, 0xed, 0x6e, 0x8b, 0xf3, 0x56, 0x9b, 0x12, 0xcb, 0x73, 0x89, 0xc5, 0x18, 0x57,
	0x96, 0x72, 0x39, 0x93, 0x51, 0xf5, 0xe6, 0x62, 0xe9, 0x63, 0xc1, 0x42, 0x9d, 0x99, 0xd6, 0x09,
	0x1a, 0x9c, 0x73, 0x9d, 0xb0, 0x5e, 0xf8, 0x62, 0xc0, 0xdd, 0xbd, 0x20, 0x5b, 0x6d, 0xa4, 0x74,
	0xaa, 0xbc, 0xcb, 0x94, 0x6c, 0xd0, 0xc3, 0x2e, 0x95, 0x0a, 0x3d, 0x81, 0x48, 0xf2, 0xae, 0xb0,
	0xe9, 0x81, 0x16, 0xd8, 0xbc, 0x7d, 0xe0, 0x3a, 0xdb, 0x20, 0x0f, 0x8a, 0xa7, 0xca, 0x17, 0x71,
	0x1a, 0x90, 0xa0, 0xb8, 0x57, 0xc2, 0x8f, 0xa3, 0x93, 0xf5, 0x5a, 0x65, 0xfd, 0xc3, 0xcf, 0x8f,
	0x57, 0x41, 0x63, 0x33, 0xf4, 0x18, 0x17, 0x1c, 0x74, 0x03, 0x9e, 0x8d, 0x7c, 0xed, 0xa0, 0x1f,
	0x15, 0x9e, 0x25, 0x94, 0x1f, 0x78, 0x1b, 0x79, 0x50, 0xfc, 0xbf, 0xb1, 0x15, 0x56, 0xab, 0xb1,
	0x62, 0xdd, 0x41, 0xcf, 0xe1, 0x39, 0x87, 0x4a, 0xe5, 0x32, 0x0d, 0x27, 0x11, 0x69, 0x6d, 0xc9,
	0x48, 0x67, 0x62, 0x46, 0xb1, 0x5c, 0xb7, 0xe1, 0x4e, 0xbc, 0x43, 0x3a, 0xdc, 0x7f, 0x3a, 0xdc,
	0xf9, 0xd8, 0x91, 0x64, 0xc2, 0x42, 0x17, 0x16, 0x67, 0xf2, 0xac, 0xf8, 0x93, 0x08, 0x23, 0xb6,
	0x75, 0xb8, 0xb1, 0x0a, 0x54, 0xe8, 0x8d, 0x63, 0x17, 0x04, 0xbc, 0x30, 0xe7, 0x6f, 0x94, 0x1e,
	0x67, 0x92, 0xa2, 0x3d, 0x98, 0xd5, 0x77, 0x91, 0xdb, 0x20, 0xbf, 0x56, 0xdc, 0x28, 0xdf, 0xc2,
	0x0b, 0x0d, 0x37, 0x1e, 0x19, 0x6a, 0xbb, 0xbb, 0x4c, 0x09, 0xbf, 0x11, 0x19, 0x95, 0x7f, 0x65,
	0xe1, 0xba, 0x6e, 0x8a, 0x3e, 0x19, 0x70, 0x33, 0xdd, 0x19, 0x55, 0x17, 0xec, 0xf0, 0xa7, 0xf1,
	0xcb, 0xd5, 0x56, 0x33, 0x09, 0x2f, 0x5f, 0x78, 0x0f, 0x5e, 0x05, 0xc4, 0x5e, 0x7e, 0xfd, 0xf1,
	0xda, 0x78, 0x0b, 0xd0, 0x1b, 0x40, 0x92, 0x6b, 0x31, 0x67, 0x89, 0x1c, 0x12, 0xde, 0x94, 0xf4,
	0xa7, 0x57, 0xe0, 0x68, 0xfc, 0x32, 0x35, 0x22, 0x47, 0xa4, 0x3f, 0x67, 0x44, 0x53, 0x95, 0xb4,
	0x0e, 0x1d, 0x1b, 0xb0, 0x30, 0x3d, 0x36, 0xfb, 0xc9, 0xcd, 0xa9, 0xa1, 0x47, 0xab, 0x20, 0x99,
	0x31, 0x86, 0x7f, 0x89, 0xf1, 0xfe, 0x04, 0xf1, 0x7d, 0x74, 0x6f, 0x49, 0xc0, 0x4d, 0xff, 0x5a,
	0x48, 0x93, 0xf4, 0xe3, 0xc0, 0xd0, 0x3b, 0x03, 0x5e, 0x99, 0xbe, 0x42, 0x6d, 0xc6, 0xe6, 0xfe,
	0xb3, 0x5c, 0x9e, 0x4e, 0xb8, 0x3c, 0x44, 0x0f, 0x96, 0xe7, 0x12, 0x1b, 0x99, 0x24, 0x9c, 0xca,
	0x9d, 0xcf, 0x03, 0x13, 0x9c, 0x0c, 0x4c, 0xf0, 0x7d, 0x60, 0x82, 0xe3, 0xa1, 0x99, 0x39, 0x19,
	0x9a, 0x99, 0x6f, 0x43, 0x33, 0xf3, 0xec, 0xf2, 0x28, 0xb2, 0x43, 0x7b, 0x44, 0xf9, 0x1e, 0x95,
	0x33, 0xbf, 0x18, 0xcd, 0xac, 0xf6, 0xbb, 0xfe, 0x3b, 0x00, 0x00, 0xff, 0xff, 0x0b, 0x49, 0xf6,
	0x5f, 0x1c, 0x07, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// DispatchedCounts retrieves the dispatch counts for a specific route.
	DispatchedCounts(ctx context.Context, in *QueryDispatchedCountsRequest, opts ...grpc.CallOption) (*QueryDispatchedCountsResponse, error)
	DispatchedCountsBySourceProtocolID(ctx context.Context, in *QueryDispatchedCountsByProtocolIDRequest, opts ...grpc.CallOption) (*QueryDispatchedCountsResponse, error)
	DispatchedCountsByDestinationProtocolID(ctx context.Context, in *QueryDispatchedCountsByProtocolIDRequest, opts ...grpc.CallOption) (*QueryDispatchedCountsResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) DispatchedCounts(ctx context.Context, in *QueryDispatchedCountsRequest, opts ...grpc.CallOption) (*QueryDispatchedCountsResponse, error) {
	out := new(QueryDispatchedCountsResponse)
	err := c.cc.Invoke(ctx, "/noble.orbiter.component.dispatcher.v1.Query/DispatchedCounts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DispatchedCountsBySourceProtocolID(ctx context.Context, in *QueryDispatchedCountsByProtocolIDRequest, opts ...grpc.CallOption) (*QueryDispatchedCountsResponse, error) {
	out := new(QueryDispatchedCountsResponse)
	err := c.cc.Invoke(ctx, "/noble.orbiter.component.dispatcher.v1.Query/DispatchedCountsBySourceProtocolID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DispatchedCountsByDestinationProtocolID(ctx context.Context, in *QueryDispatchedCountsByProtocolIDRequest, opts ...grpc.CallOption) (*QueryDispatchedCountsResponse, error) {
	out := new(QueryDispatchedCountsResponse)
	err := c.cc.Invoke(ctx, "/noble.orbiter.component.dispatcher.v1.Query/DispatchedCountsByDestinationProtocolID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// DispatchedCounts retrieves the dispatch counts for a specific route.
	DispatchedCounts(context.Context, *QueryDispatchedCountsRequest) (*QueryDispatchedCountsResponse, error)
	DispatchedCountsBySourceProtocolID(context.Context, *QueryDispatchedCountsByProtocolIDRequest) (*QueryDispatchedCountsResponse, error)
	DispatchedCountsByDestinationProtocolID(context.Context, *QueryDispatchedCountsByProtocolIDRequest) (*QueryDispatchedCountsResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) DispatchedCounts(ctx context.Context, req *QueryDispatchedCountsRequest) (*QueryDispatchedCountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DispatchedCounts not implemented")
}
func (*UnimplementedQueryServer) DispatchedCountsBySourceProtocolID(ctx context.Context, req *QueryDispatchedCountsByProtocolIDRequest) (*QueryDispatchedCountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DispatchedCountsBySourceProtocolID not implemented")
}
func (*UnimplementedQueryServer) DispatchedCountsByDestinationProtocolID(ctx context.Context, req *QueryDispatchedCountsByProtocolIDRequest) (*QueryDispatchedCountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DispatchedCountsByDestinationProtocolID not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_DispatchedCounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDispatchedCountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DispatchedCounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/noble.orbiter.component.dispatcher.v1.Query/DispatchedCounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DispatchedCounts(ctx, req.(*QueryDispatchedCountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DispatchedCountsBySourceProtocolID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDispatchedCountsByProtocolIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DispatchedCountsBySourceProtocolID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/noble.orbiter.component.dispatcher.v1.Query/DispatchedCountsBySourceProtocolID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DispatchedCountsBySourceProtocolID(ctx, req.(*QueryDispatchedCountsByProtocolIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DispatchedCountsByDestinationProtocolID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDispatchedCountsByProtocolIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DispatchedCountsByDestinationProtocolID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/noble.orbiter.component.dispatcher.v1.Query/DispatchedCountsByDestinationProtocolID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DispatchedCountsByDestinationProtocolID(ctx, req.(*QueryDispatchedCountsByProtocolIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var Query_serviceDesc = _Query_serviceDesc
var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "noble.orbiter.component.dispatcher.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DispatchedCounts",
			Handler:    _Query_DispatchedCounts_Handler,
		},
		{
			MethodName: "DispatchedCountsBySourceProtocolID",
			Handler:    _Query_DispatchedCountsBySourceProtocolID_Handler,
		},
		{
			MethodName: "DispatchedCountsByDestinationProtocolID",
			Handler:    _Query_DispatchedCountsByDestinationProtocolID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "noble/orbiter/component/dispatcher/v1/query.proto",
}

func (m *QueryDispatchedCountsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDispatchedCountsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDispatchedCountsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DestinationCounterpartyId) > 0 {
		i -= len(m.DestinationCounterpartyId)
		copy(dAtA[i:], m.DestinationCounterpartyId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.DestinationCounterpartyId)))
		i--
		dAtA[i] = 0x22
	}
	if m.DestinationProtocolId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.DestinationProtocolId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.SourceCounterpartyId) > 0 {
		i -= len(m.SourceCounterpartyId)
		copy(dAtA[i:], m.SourceCounterpartyId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SourceCounterpartyId)))
		i--
		dAtA[i] = 0x12
	}
	if m.SourceProtocolId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.SourceProtocolId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryDispatchedCountsByProtocolIDRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDispatchedCountsByProtocolIDRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDispatchedCountsByProtocolIDRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ProtocolId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ProtocolId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryDispatchedCountsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDispatchedCountsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDispatchedCountsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Counts) > 0 {
		for iNdEx := len(m.Counts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Counts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryDispatchedCountsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SourceProtocolId != 0 {
		n += 1 + sovQuery(uint64(m.SourceProtocolId))
	}
	l = len(m.SourceCounterpartyId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.DestinationProtocolId != 0 {
		n += 1 + sovQuery(uint64(m.DestinationProtocolId))
	}
	l = len(m.DestinationCounterpartyId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDispatchedCountsByProtocolIDRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProtocolId != 0 {
		n += 1 + sovQuery(uint64(m.ProtocolId))
	}
	return n
}

func (m *QueryDispatchedCountsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Counts) > 0 {
		for _, e := range m.Counts {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryDispatchedCountsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDispatchedCountsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDispatchedCountsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceProtocolId", wireType)
			}
			m.SourceProtocolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SourceProtocolId |= core.ProtocolID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceCounterpartyId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceCounterpartyId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationProtocolId", wireType)
			}
			m.DestinationProtocolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DestinationProtocolId |= core.ProtocolID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationCounterpartyId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestinationCounterpartyId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDispatchedCountsByProtocolIDRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDispatchedCountsByProtocolIDRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDispatchedCountsByProtocolIDRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProtocolId", wireType)
			}
			m.ProtocolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProtocolId |= core.ProtocolID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDispatchedCountsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDispatchedCountsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDispatchedCountsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Counts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Counts = append(m.Counts, &DispatchCountEntry{})
			if err := m.Counts[len(m.Counts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
