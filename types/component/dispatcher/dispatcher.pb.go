// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: noble/orbiter/component/dispatcher/v1/dispatcher.proto

package dispatcher

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// AmountDispatched represents the incoming and outgoing
// amount dispatched for a couple of cross-chain identifier
// (protocol + chain) and for a single coin denomination.
type AmountDispatched struct {
	// incoming represented the total incoming amount dispatched.
	Incoming cosmossdk_io_math.Int `protobuf:"bytes,1,opt,name=incoming,proto3,customtype=cosmossdk.io/math.Int" json:"incoming"`
	// outgoing represents the total outgoing amount dispatched.
	Outgoing cosmossdk_io_math.Int `protobuf:"bytes,2,opt,name=outgoing,proto3,customtype=cosmossdk.io/math.Int" json:"outgoing"`
}

func (m *AmountDispatched) Reset()         { *m = AmountDispatched{} }
func (m *AmountDispatched) String() string { return proto.CompactTextString(m) }
func (*AmountDispatched) ProtoMessage()    {}
func (*AmountDispatched) Descriptor() ([]byte, []int) {
	return fileDescriptor_f4f0cd5655613ed7, []int{0}
}
func (m *AmountDispatched) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AmountDispatched) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AmountDispatched.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AmountDispatched) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AmountDispatched.Merge(m, src)
}
func (m *AmountDispatched) XXX_Size() int {
	return m.Size()
}
func (m *AmountDispatched) XXX_DiscardUnknown() {
	xxx_messageInfo_AmountDispatched.DiscardUnknown(m)
}

var xxx_messageInfo_AmountDispatched proto.InternalMessageInfo

func init() {
	proto.RegisterType((*AmountDispatched)(nil), "noble.orbiter.component.dispatcher.v1.AmountDispatched")
}

func init() {
	proto.RegisterFile("noble/orbiter/component/dispatcher/v1/dispatcher.proto", fileDescriptor_f4f0cd5655613ed7)
}

var fileDescriptor_f4f0cd5655613ed7 = []byte{
	// 266 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x32, 0xcb, 0xcb, 0x4f, 0xca,
	0x49, 0xd5, 0xcf, 0x2f, 0x4a, 0xca, 0x2c, 0x49, 0x2d, 0xd2, 0x4f, 0xce, 0xcf, 0x2d, 0xc8, 0xcf,
	0x4b, 0xcd, 0x2b, 0xd1, 0x4f, 0xc9, 0x2c, 0x2e, 0x48, 0x2c, 0x49, 0xce, 0x48, 0x2d, 0xd2, 0x2f,
	0x33, 0x44, 0xe2, 0xe9, 0x15, 0x14, 0xe5, 0x97, 0xe4, 0x0b, 0xa9, 0x82, 0xf5, 0xe9, 0x41, 0xf5,
	0xe9, 0xc1, 0xf5, 0xe9, 0x21, 0xa9, 0x2c, 0x33, 0x94, 0x12, 0x4c, 0xcc, 0xcd, 0xcc, 0xcb, 0xd7,
	0x07, 0x93, 0x10, 0x9d, 0x52, 0x92, 0xc9, 0xf9, 0xc5, 0xb9, 0xf9, 0xc5, 0xf1, 0x60, 0x9e, 0x3e,
	0x84, 0x03, 0x95, 0x12, 0x49, 0xcf, 0x4f, 0xcf, 0x87, 0x88, 0x83, 0x58, 0x10, 0x51, 0xa5, 0x75,
	0x8c, 0x5c, 0x02, 0x8e, 0xb9, 0xf9, 0xa5, 0x79, 0x25, 0x2e, 0x30, 0xb3, 0x53, 0x84, 0x7c, 0xb8,
	0x38, 0x32, 0xf3, 0x92, 0xf3, 0x73, 0x33, 0xf3, 0xd2, 0x25, 0x18, 0x15, 0x18, 0x35, 0x38, 0x9d,
	0x0c, 0x4e, 0xdc, 0x93, 0x67, 0xb8, 0x75, 0x4f, 0x5e, 0x14, 0x62, 0x64, 0x71, 0x4a, 0xb6, 0x5e,
	0x66, 0xbe, 0x7e, 0x6e, 0x62, 0x49, 0x86, 0x9e, 0x67, 0x5e, 0xc9, 0xa5, 0x2d, 0xba, 0x5c, 0x50,
	0xbb, 0x3c, 0xf3, 0x4a, 0x56, 0x3c, 0xdf, 0xa0, 0xc5, 0x18, 0x04, 0x37, 0x01, 0x64, 0x5a, 0x7e,
	0x69, 0x49, 0x7a, 0x3e, 0xc8, 0x34, 0x26, 0x72, 0x4d, 0x83, 0x99, 0xe0, 0xe4, 0x70, 0xe2, 0x91,
	0x1c, 0xe3, 0x85, 0x47, 0x72, 0x8c, 0x0f, 0x1e, 0xc9, 0x31, 0x4e, 0x78, 0x2c, 0xc7, 0x70, 0xe1,
	0xb1, 0x1c, 0xc3, 0x8d, 0xc7, 0x72, 0x0c, 0x51, 0x6a, 0xb0, 0xf0, 0x4a, 0x49, 0x2d, 0xd3, 0x2f,
	0xa9, 0x2c, 0x48, 0x2d, 0xc6, 0x1a, 0xe2, 0x49, 0x6c, 0x60, 0x9f, 0x1b, 0x03, 0x02, 0x00, 0x00,
	0xff, 0xff, 0xb4, 0x0e, 0x7f, 0x20, 0x9e, 0x01, 0x00, 0x00,
}

func (m *AmountDispatched) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AmountDispatched) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AmountDispatched) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Outgoing.Size()
		i -= size
		if _, err := m.Outgoing.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintDispatcher(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.Incoming.Size()
		i -= size
		if _, err := m.Incoming.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintDispatcher(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintDispatcher(dAtA []byte, offset int, v uint64) int {
	offset -= sovDispatcher(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AmountDispatched) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Incoming.Size()
	n += 1 + l + sovDispatcher(uint64(l))
	l = m.Outgoing.Size()
	n += 1 + l + sovDispatcher(uint64(l))
	return n
}

func sovDispatcher(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDispatcher(x uint64) (n int) {
	return sovDispatcher(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AmountDispatched) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDispatcher
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AmountDispatched: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AmountDispatched: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Incoming", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDispatcher
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDispatcher
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDispatcher
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Incoming.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Outgoing", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDispatcher
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDispatcher
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDispatcher
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Outgoing.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDispatcher(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDispatcher
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDispatcher(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDispatcher
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDispatcher
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDispatcher
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDispatcher
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDispatcher
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDispatcher
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDispatcher        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDispatcher          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDispatcher = fmt.Errorf("proto: unexpected end of group")
)
