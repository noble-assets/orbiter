// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: noble/orbiter/component/forwarder/v1/tx.proto

package forwarder

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	core "orbiter.dev/types/core"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgPauseProtocol pauses an entire forwarding protocol.
type MsgPauseProtocol struct {
	// Address of the signer who is requesting to pause the protocol.
	Signer string `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty"`
	// Bridge protocol to pause.
	ProtocolId core.ProtocolID `protobuf:"varint,2,opt,name=protocol_id,json=protocolId,proto3,enum=noble.orbiter.core.v1.ProtocolID" json:"protocol_id,omitempty"`
}

func (m *MsgPauseProtocol) Reset()         { *m = MsgPauseProtocol{} }
func (m *MsgPauseProtocol) String() string { return proto.CompactTextString(m) }
func (*MsgPauseProtocol) ProtoMessage()    {}
func (*MsgPauseProtocol) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d12dabcf7836b4c, []int{0}
}
func (m *MsgPauseProtocol) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgPauseProtocol) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPauseProtocol.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgPauseProtocol) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPauseProtocol.Merge(m, src)
}
func (m *MsgPauseProtocol) XXX_Size() int {
	return m.Size()
}
func (m *MsgPauseProtocol) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPauseProtocol.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPauseProtocol proto.InternalMessageInfo

// MsgPauseProtocolResponse is the response type from a MsgPauseProtocol request.
type MsgPauseProtocolResponse struct {
}

func (m *MsgPauseProtocolResponse) Reset()         { *m = MsgPauseProtocolResponse{} }
func (m *MsgPauseProtocolResponse) String() string { return proto.CompactTextString(m) }
func (*MsgPauseProtocolResponse) ProtoMessage()    {}
func (*MsgPauseProtocolResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d12dabcf7836b4c, []int{1}
}
func (m *MsgPauseProtocolResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgPauseProtocolResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPauseProtocolResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgPauseProtocolResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPauseProtocolResponse.Merge(m, src)
}
func (m *MsgPauseProtocolResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgPauseProtocolResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPauseProtocolResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPauseProtocolResponse proto.InternalMessageInfo

// MsgPauseCrossChain pauses specific counterparty pairs for a protocol.
type MsgPauseCrossChain struct {
	// Address of the signer who is requesting to pause the counterparty pairs.
	Signer string `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty"`
	// Bridge protocol to pause.
	ProtocolId core.ProtocolID `protobuf:"varint,2,opt,name=protocol_id,json=protocolId,proto3,enum=noble.orbiter.core.v1.ProtocolID" json:"protocol_id,omitempty"`
	// List of identifiers of destinations that must be paused.
	CounterpartyIds []string `protobuf:"bytes,3,rep,name=counterparty_ids,json=counterpartyIds,proto3" json:"counterparty_ids,omitempty"`
}

func (m *MsgPauseCrossChain) Reset()         { *m = MsgPauseCrossChain{} }
func (m *MsgPauseCrossChain) String() string { return proto.CompactTextString(m) }
func (*MsgPauseCrossChain) ProtoMessage()    {}
func (*MsgPauseCrossChain) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d12dabcf7836b4c, []int{2}
}
func (m *MsgPauseCrossChain) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgPauseCrossChain) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPauseCrossChain.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgPauseCrossChain) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPauseCrossChain.Merge(m, src)
}
func (m *MsgPauseCrossChain) XXX_Size() int {
	return m.Size()
}
func (m *MsgPauseCrossChain) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPauseCrossChain.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPauseCrossChain proto.InternalMessageInfo

// MsgPauseCrossChainResponse is the response type
// from a MsgPauseCrossChain request.
type MsgPauseCrossChainResponse struct {
}

func (m *MsgPauseCrossChainResponse) Reset()         { *m = MsgPauseCrossChainResponse{} }
func (m *MsgPauseCrossChainResponse) String() string { return proto.CompactTextString(m) }
func (*MsgPauseCrossChainResponse) ProtoMessage()    {}
func (*MsgPauseCrossChainResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d12dabcf7836b4c, []int{3}
}
func (m *MsgPauseCrossChainResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgPauseCrossChainResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPauseCrossChainResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgPauseCrossChainResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPauseCrossChainResponse.Merge(m, src)
}
func (m *MsgPauseCrossChainResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgPauseCrossChainResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPauseCrossChainResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPauseCrossChainResponse proto.InternalMessageInfo

// MsgUnpauseProtocol resumes an entire forwarding protocol.
type MsgUnpauseProtocol struct {
	// Address of the signer who is requesting to unpause the protocol.
	Signer string `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty"`
	// Bridge protocol to unpause.
	ProtocolId core.ProtocolID `protobuf:"varint,2,opt,name=protocol_id,json=protocolId,proto3,enum=noble.orbiter.core.v1.ProtocolID" json:"protocol_id,omitempty"`
}

func (m *MsgUnpauseProtocol) Reset()         { *m = MsgUnpauseProtocol{} }
func (m *MsgUnpauseProtocol) String() string { return proto.CompactTextString(m) }
func (*MsgUnpauseProtocol) ProtoMessage()    {}
func (*MsgUnpauseProtocol) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d12dabcf7836b4c, []int{4}
}
func (m *MsgUnpauseProtocol) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUnpauseProtocol) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUnpauseProtocol.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUnpauseProtocol) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUnpauseProtocol.Merge(m, src)
}
func (m *MsgUnpauseProtocol) XXX_Size() int {
	return m.Size()
}
func (m *MsgUnpauseProtocol) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUnpauseProtocol.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUnpauseProtocol proto.InternalMessageInfo

// MsgUnpauseProtocolResponse is the response type from a MsgUnpauseProtocol request.
type MsgUnpauseProtocolResponse struct {
}

func (m *MsgUnpauseProtocolResponse) Reset()         { *m = MsgUnpauseProtocolResponse{} }
func (m *MsgUnpauseProtocolResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUnpauseProtocolResponse) ProtoMessage()    {}
func (*MsgUnpauseProtocolResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d12dabcf7836b4c, []int{5}
}
func (m *MsgUnpauseProtocolResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUnpauseProtocolResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUnpauseProtocolResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUnpauseProtocolResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUnpauseProtocolResponse.Merge(m, src)
}
func (m *MsgUnpauseProtocolResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUnpauseProtocolResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUnpauseProtocolResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUnpauseProtocolResponse proto.InternalMessageInfo

// MsgUnpauseCrossChain resumes specific counterparty pairs for a protocol.
type MsgUnpauseCrossChain struct {
	// Address of the signer who is requesting to unpause the counterparty pairs.
	Signer string `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty"`
	// Bridge protocol to unpause.
	ProtocolId core.ProtocolID `protobuf:"varint,2,opt,name=protocol_id,json=protocolId,proto3,enum=noble.orbiter.core.v1.ProtocolID" json:"protocol_id,omitempty"`
	// List of identifiers of destinations that must be unpaused.
	CounterpartyIds []string `protobuf:"bytes,3,rep,name=counterparty_ids,json=counterpartyIds,proto3" json:"counterparty_ids,omitempty"`
}

func (m *MsgUnpauseCrossChain) Reset()         { *m = MsgUnpauseCrossChain{} }
func (m *MsgUnpauseCrossChain) String() string { return proto.CompactTextString(m) }
func (*MsgUnpauseCrossChain) ProtoMessage()    {}
func (*MsgUnpauseCrossChain) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d12dabcf7836b4c, []int{6}
}
func (m *MsgUnpauseCrossChain) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUnpauseCrossChain) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUnpauseCrossChain.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUnpauseCrossChain) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUnpauseCrossChain.Merge(m, src)
}
func (m *MsgUnpauseCrossChain) XXX_Size() int {
	return m.Size()
}
func (m *MsgUnpauseCrossChain) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUnpauseCrossChain.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUnpauseCrossChain proto.InternalMessageInfo

// MsgUnpauseCrossChainResponse is the response type
// from a MsgUnpauseCrossChain request.
type MsgUnpauseCrossChainResponse struct {
}

func (m *MsgUnpauseCrossChainResponse) Reset()         { *m = MsgUnpauseCrossChainResponse{} }
func (m *MsgUnpauseCrossChainResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUnpauseCrossChainResponse) ProtoMessage()    {}
func (*MsgUnpauseCrossChainResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d12dabcf7836b4c, []int{7}
}
func (m *MsgUnpauseCrossChainResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUnpauseCrossChainResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUnpauseCrossChainResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUnpauseCrossChainResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUnpauseCrossChainResponse.Merge(m, src)
}
func (m *MsgUnpauseCrossChainResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUnpauseCrossChainResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUnpauseCrossChainResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUnpauseCrossChainResponse proto.InternalMessageInfo

// MsgReplaceDepositForBurnResponse allows the orbiter authority
// to replace a sent deposit for burn message.
type MsgReplaceDepositForBurn struct {
	Signer               string `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty"`
	OriginalMessage      []byte `protobuf:"bytes,2,opt,name=original_message,json=originalMessage,proto3" json:"original_message,omitempty"`
	OriginalAttestation  []byte `protobuf:"bytes,3,opt,name=original_attestation,json=originalAttestation,proto3" json:"original_attestation,omitempty"`
	NewDestinationCaller []byte `protobuf:"bytes,4,opt,name=new_destination_caller,json=newDestinationCaller,proto3" json:"new_destination_caller,omitempty"`
	NewMintRecipient     []byte `protobuf:"bytes,5,opt,name=new_mint_recipient,json=newMintRecipient,proto3" json:"new_mint_recipient,omitempty"`
}

func (m *MsgReplaceDepositForBurn) Reset()         { *m = MsgReplaceDepositForBurn{} }
func (m *MsgReplaceDepositForBurn) String() string { return proto.CompactTextString(m) }
func (*MsgReplaceDepositForBurn) ProtoMessage()    {}
func (*MsgReplaceDepositForBurn) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d12dabcf7836b4c, []int{8}
}
func (m *MsgReplaceDepositForBurn) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgReplaceDepositForBurn) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgReplaceDepositForBurn.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgReplaceDepositForBurn) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgReplaceDepositForBurn.Merge(m, src)
}
func (m *MsgReplaceDepositForBurn) XXX_Size() int {
	return m.Size()
}
func (m *MsgReplaceDepositForBurn) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgReplaceDepositForBurn.DiscardUnknown(m)
}

var xxx_messageInfo_MsgReplaceDepositForBurn proto.InternalMessageInfo

// MsgReplaceDepositForBurnResponse is the response type from
// a MsgReplaceDepositForBurn request.
type MsgReplaceDepositForBurnResponse struct {
}

func (m *MsgReplaceDepositForBurnResponse) Reset()         { *m = MsgReplaceDepositForBurnResponse{} }
func (m *MsgReplaceDepositForBurnResponse) String() string { return proto.CompactTextString(m) }
func (*MsgReplaceDepositForBurnResponse) ProtoMessage()    {}
func (*MsgReplaceDepositForBurnResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d12dabcf7836b4c, []int{9}
}
func (m *MsgReplaceDepositForBurnResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgReplaceDepositForBurnResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgReplaceDepositForBurnResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgReplaceDepositForBurnResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgReplaceDepositForBurnResponse.Merge(m, src)
}
func (m *MsgReplaceDepositForBurnResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgReplaceDepositForBurnResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgReplaceDepositForBurnResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgReplaceDepositForBurnResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgPauseProtocol)(nil), "noble.orbiter.component.forwarder.v1.MsgPauseProtocol")
	proto.RegisterType((*MsgPauseProtocolResponse)(nil), "noble.orbiter.component.forwarder.v1.MsgPauseProtocolResponse")
	proto.RegisterType((*MsgPauseCrossChain)(nil), "noble.orbiter.component.forwarder.v1.MsgPauseCrossChain")
	proto.RegisterType((*MsgPauseCrossChainResponse)(nil), "noble.orbiter.component.forwarder.v1.MsgPauseCrossChainResponse")
	proto.RegisterType((*MsgUnpauseProtocol)(nil), "noble.orbiter.component.forwarder.v1.MsgUnpauseProtocol")
	proto.RegisterType((*MsgUnpauseProtocolResponse)(nil), "noble.orbiter.component.forwarder.v1.MsgUnpauseProtocolResponse")
	proto.RegisterType((*MsgUnpauseCrossChain)(nil), "noble.orbiter.component.forwarder.v1.MsgUnpauseCrossChain")
	proto.RegisterType((*MsgUnpauseCrossChainResponse)(nil), "noble.orbiter.component.forwarder.v1.MsgUnpauseCrossChainResponse")
	proto.RegisterType((*MsgReplaceDepositForBurn)(nil), "noble.orbiter.component.forwarder.v1.MsgReplaceDepositForBurn")
	proto.RegisterType((*MsgReplaceDepositForBurnResponse)(nil), "noble.orbiter.component.forwarder.v1.MsgReplaceDepositForBurnResponse")
}

func init() {
	proto.RegisterFile("noble/orbiter/component/forwarder/v1/tx.proto", fileDescriptor_6d12dabcf7836b4c)
}

var fileDescriptor_6d12dabcf7836b4c = []byte{
	// 715 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x56, 0x4f, 0x6b, 0x13, 0x41,
	0x1c, 0xcd, 0x34, 0xb6, 0xd0, 0xf1, 0x4f, 0xd3, 0x35, 0xea, 0xba, 0x94, 0x6d, 0x1a, 0x15, 0xdb,
	0x62, 0x77, 0x4d, 0x15, 0xad, 0x11, 0xac, 0x4d, 0x4b, 0xa1, 0x87, 0x40, 0x59, 0xf1, 0xe2, 0x65,
	0xd9, 0xee, 0x8e, 0xeb, 0x40, 0x76, 0x66, 0x99, 0x99, 0x26, 0xf6, 0x26, 0x5e, 0x14, 0x41, 0x10,
	0xfc, 0x00, 0xf6, 0x23, 0xf4, 0xe0, 0x17, 0xf0, 0x20, 0x78, 0xb3, 0x78, 0xf2, 0x28, 0xed, 0xa1,
	0x9e, 0xc4, 0x83, 0x1f, 0x40, 0xb2, 0xff, 0xd2, 0x6e, 0xb3, 0x90, 0xc4, 0x83, 0x7a, 0x09, 0xd9,
	0xdf, 0xfb, 0xbd, 0x99, 0xf7, 0xde, 0x64, 0x7e, 0x59, 0x38, 0x47, 0xe8, 0x46, 0x03, 0xe9, 0x94,
	0x6d, 0x60, 0x81, 0x98, 0x6e, 0x53, 0xcf, 0xa7, 0x04, 0x11, 0xa1, 0x3f, 0xa6, 0xac, 0x65, 0x31,
	0x07, 0x31, 0xbd, 0x59, 0xd1, 0xc5, 0x53, 0xcd, 0x67, 0x54, 0x50, 0xe9, 0x72, 0xd0, 0xae, 0x45,
	0xed, 0x5a, 0xd2, 0xae, 0x25, 0xed, 0x5a, 0xb3, 0xa2, 0x8c, 0x5b, 0x1e, 0x26, 0x54, 0x0f, 0x3e,
	0x43, 0xa2, 0x72, 0xc1, 0xa6, 0xdc, 0xa3, 0x5c, 0xf7, 0xb8, 0xdb, 0x5e, 0xd0, 0xe3, 0x6e, 0x04,
	0x5c, 0x0c, 0x01, 0x33, 0x78, 0xd2, 0xc3, 0x87, 0x08, 0x2a, 0xba, 0xd4, 0xa5, 0x61, 0xbd, 0xfd,
	0x2d, 0xaa, 0xaa, 0x69, 0xc5, 0x0c, 0xb5, 0x57, 0xc4, 0x4e, 0x88, 0x97, 0x3f, 0x00, 0x58, 0xa8,
	0x73, 0x77, 0xdd, 0xda, 0xe4, 0x68, 0xbd, 0x5d, 0xb1, 0x69, 0x43, 0xba, 0x0e, 0x47, 0x38, 0x76,
	0x09, 0x62, 0x32, 0x28, 0x81, 0xe9, 0xd1, 0x9a, 0xfc, 0xe5, 0xfd, 0x5c, 0x31, 0xda, 0x6c, 0xc9,
	0x71, 0x18, 0xe2, 0xfc, 0x81, 0x60, 0x98, 0xb8, 0x46, 0xd4, 0x27, 0xd5, 0xe0, 0x49, 0x3f, 0x62,
	0x9b, 0xd8, 0x91, 0x87, 0x4a, 0x60, 0xfa, 0xcc, 0xfc, 0x94, 0x96, 0xf6, 0xcf, 0x90, 0xd6, 0xac,
	0x68, 0xf1, 0x3e, 0x6b, 0x2b, 0x06, 0x8c, 0x59, 0x6b, 0x4e, 0xf5, 0xf6, 0xcb, 0xed, 0xc9, 0xdc,
	0xf7, 0xed, 0xc9, 0xdc, 0xf3, 0x83, 0x9d, 0xd9, 0x68, 0xe1, 0x57, 0x07, 0x3b, 0xb3, 0x93, 0xb1,
	0xf8, 0x4e, 0xc8, 0x47, 0xe4, 0x96, 0x15, 0x28, 0xa7, 0x2d, 0x18, 0x88, 0xfb, 0x94, 0x70, 0x54,
	0xfe, 0x09, 0xa0, 0x14, 0x83, 0xcb, 0x8c, 0x72, 0xbe, 0xfc, 0xc4, 0xc2, 0xe4, 0xef, 0x38, 0x94,
	0x66, 0x60, 0xc1, 0xa6, 0x9b, 0x44, 0x20, 0xe6, 0x5b, 0x4c, 0x6c, 0x99, 0xd8, 0xe1, 0x72, 0xbe,
	0x94, 0x9f, 0x1e, 0x35, 0xc6, 0x0e, 0xd7, 0xd7, 0x1c, 0x5e, 0xbd, 0x93, 0x11, 0xc6, 0x54, 0x46,
	0x18, 0x1d, 0x6f, 0xe5, 0x09, 0xa8, 0x1c, 0x77, 0x9c, 0x04, 0xf2, 0x31, 0x0c, 0xe4, 0x21, 0xf1,
	0xff, 0x81, 0x23, 0xef, 0xc3, 0x65, 0x4a, 0x70, 0xe4, 0x32, 0x55, 0x4d, 0x5c, 0xfe, 0x02, 0xb0,
	0xd8, 0x81, 0xff, 0xa7, 0x83, 0xbf, 0x9b, 0x11, 0xc9, 0xa5, 0xcc, 0x48, 0x0e, 0x1d, 0xbd, 0x0a,
	0x27, 0xba, 0xb9, 0x4e, 0x62, 0xf9, 0x3c, 0x14, 0x5c, 0x15, 0x03, 0xf9, 0x0d, 0xcb, 0x46, 0x2b,
	0xc8, 0xa7, 0x1c, 0x8b, 0x55, 0xca, 0x6a, 0x9b, 0x6c, 0x90, 0x68, 0x66, 0x60, 0x81, 0x32, 0xec,
	0x62, 0x62, 0x35, 0x4c, 0x0f, 0x71, 0x6e, 0xb9, 0x28, 0xc8, 0xe7, 0x94, 0x31, 0x16, 0xd7, 0xeb,
	0x61, 0x59, 0xaa, 0xc0, 0x62, 0xd2, 0x6a, 0x09, 0x81, 0xb8, 0xb0, 0x04, 0xa6, 0x44, 0xce, 0x07,
	0xed, 0x67, 0x63, 0x6c, 0xa9, 0x03, 0x49, 0x37, 0xe1, 0x79, 0x82, 0x5a, 0xa6, 0x83, 0xb8, 0xc0,
	0x24, 0x28, 0x99, 0xb6, 0xd5, 0x68, 0x20, 0x26, 0x9f, 0x08, 0x48, 0x45, 0x82, 0x5a, 0x2b, 0x1d,
	0x70, 0x39, 0xc0, 0xa4, 0x6b, 0x50, 0x6a, 0xb3, 0x3c, 0x4c, 0x84, 0xc9, 0x90, 0x8d, 0x7d, 0x8c,
	0x88, 0x90, 0x87, 0x03, 0x46, 0x81, 0xa0, 0x56, 0x1d, 0x13, 0x61, 0xc4, 0xf5, 0xea, 0x62, 0x46,
	0xda, 0x57, 0x8f, 0xa7, 0xdd, 0x35, 0xb4, 0x72, 0x19, 0x96, 0xb2, 0x02, 0x8d, 0x53, 0x9f, 0xff,
	0x31, 0x0c, 0xf3, 0x75, 0xee, 0x4a, 0x2f, 0x00, 0x3c, 0x7d, 0x74, 0xd0, 0xde, 0xd2, 0x7a, 0xf9,
	0x87, 0xd0, 0xd2, 0xd3, 0x4d, 0xb9, 0x37, 0x18, 0x2f, 0x56, 0x24, 0xbd, 0x06, 0x70, 0x2c, 0x3d,
	0x01, 0x16, 0x7a, 0x5e, 0x33, 0xc5, 0x54, 0xee, 0x0f, 0xca, 0x3c, 0xa2, 0x27, 0x3d, 0xa2, 0x17,
	0xfa, 0xf3, 0xd8, 0x61, 0xf6, 0xa1, 0x27, 0x63, 0x48, 0x4a, 0x6f, 0x01, 0x1c, 0x3f, 0x3e, 0x3b,
	0xaa, 0xfd, 0xfa, 0x3c, 0xa4, 0xa9, 0x36, 0x38, 0x37, 0x51, 0xf5, 0x0e, 0xc0, 0x73, 0xdd, 0xaf,
	0x6e, 0xef, 0xbf, 0x87, 0xae, 0x7c, 0x65, 0xf5, 0xcf, 0xf8, 0xb1, 0x42, 0x65, 0xf8, 0xd9, 0xc1,
	0xce, 0x2c, 0xa8, 0x2d, 0x7e, 0xda, 0x53, 0xc1, 0xee, 0x9e, 0x0a, 0xbe, 0xed, 0xa9, 0xe0, 0xcd,
	0xbe, 0x9a, 0xdb, 0xdd, 0x57, 0x73, 0x5f, 0xf7, 0xd5, 0xdc, 0xa3, 0x2b, 0xf1, 0x0e, 0x0e, 0x6a,
	0xea, 0x62, 0xcb, 0x47, 0xbc, 0xdb, 0x4b, 0xd4, 0xc6, 0x48, 0x30, 0x3b, 0x6f, 0xfc, 0x0e, 0x00,
	0x00, 0xff, 0xff, 0x4b, 0x79, 0x73, 0x8d, 0x70, 0x09, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// PauseProtocol pauses an entire forwarding protocol.
	PauseProtocol(ctx context.Context, in *MsgPauseProtocol, opts ...grpc.CallOption) (*MsgPauseProtocolResponse, error)
	// UnpauseProtocol resumes an entire forwarding protocol.
	UnpauseProtocol(ctx context.Context, in *MsgUnpauseProtocol, opts ...grpc.CallOption) (*MsgUnpauseProtocolResponse, error)
	// PauseCrossChain pauses specific counterparty for a protocol.
	PauseCrossChain(ctx context.Context, in *MsgPauseCrossChain, opts ...grpc.CallOption) (*MsgPauseCrossChainResponse, error)
	// UnpauseCrossChain resumes specific counterparty pairs for a protocol.
	UnpauseCrossChain(ctx context.Context, in *MsgUnpauseCrossChain, opts ...grpc.CallOption) (*MsgUnpauseCrossChainResponse, error)
	// UnpauseCrossChain resumes specific counterparty pairs for a protocol.
	ReplaceDepositForBurn(ctx context.Context, in *MsgReplaceDepositForBurn, opts ...grpc.CallOption) (*MsgReplaceDepositForBurnResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) PauseProtocol(ctx context.Context, in *MsgPauseProtocol, opts ...grpc.CallOption) (*MsgPauseProtocolResponse, error) {
	out := new(MsgPauseProtocolResponse)
	err := c.cc.Invoke(ctx, "/noble.orbiter.component.forwarder.v1.Msg/PauseProtocol", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UnpauseProtocol(ctx context.Context, in *MsgUnpauseProtocol, opts ...grpc.CallOption) (*MsgUnpauseProtocolResponse, error) {
	out := new(MsgUnpauseProtocolResponse)
	err := c.cc.Invoke(ctx, "/noble.orbiter.component.forwarder.v1.Msg/UnpauseProtocol", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) PauseCrossChain(ctx context.Context, in *MsgPauseCrossChain, opts ...grpc.CallOption) (*MsgPauseCrossChainResponse, error) {
	out := new(MsgPauseCrossChainResponse)
	err := c.cc.Invoke(ctx, "/noble.orbiter.component.forwarder.v1.Msg/PauseCrossChain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UnpauseCrossChain(ctx context.Context, in *MsgUnpauseCrossChain, opts ...grpc.CallOption) (*MsgUnpauseCrossChainResponse, error) {
	out := new(MsgUnpauseCrossChainResponse)
	err := c.cc.Invoke(ctx, "/noble.orbiter.component.forwarder.v1.Msg/UnpauseCrossChain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ReplaceDepositForBurn(ctx context.Context, in *MsgReplaceDepositForBurn, opts ...grpc.CallOption) (*MsgReplaceDepositForBurnResponse, error) {
	out := new(MsgReplaceDepositForBurnResponse)
	err := c.cc.Invoke(ctx, "/noble.orbiter.component.forwarder.v1.Msg/ReplaceDepositForBurn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// PauseProtocol pauses an entire forwarding protocol.
	PauseProtocol(context.Context, *MsgPauseProtocol) (*MsgPauseProtocolResponse, error)
	// UnpauseProtocol resumes an entire forwarding protocol.
	UnpauseProtocol(context.Context, *MsgUnpauseProtocol) (*MsgUnpauseProtocolResponse, error)
	// PauseCrossChain pauses specific counterparty for a protocol.
	PauseCrossChain(context.Context, *MsgPauseCrossChain) (*MsgPauseCrossChainResponse, error)
	// UnpauseCrossChain resumes specific counterparty pairs for a protocol.
	UnpauseCrossChain(context.Context, *MsgUnpauseCrossChain) (*MsgUnpauseCrossChainResponse, error)
	// UnpauseCrossChain resumes specific counterparty pairs for a protocol.
	ReplaceDepositForBurn(context.Context, *MsgReplaceDepositForBurn) (*MsgReplaceDepositForBurnResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) PauseProtocol(ctx context.Context, req *MsgPauseProtocol) (*MsgPauseProtocolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PauseProtocol not implemented")
}
func (*UnimplementedMsgServer) UnpauseProtocol(ctx context.Context, req *MsgUnpauseProtocol) (*MsgUnpauseProtocolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnpauseProtocol not implemented")
}
func (*UnimplementedMsgServer) PauseCrossChain(ctx context.Context, req *MsgPauseCrossChain) (*MsgPauseCrossChainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PauseCrossChain not implemented")
}
func (*UnimplementedMsgServer) UnpauseCrossChain(ctx context.Context, req *MsgUnpauseCrossChain) (*MsgUnpauseCrossChainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnpauseCrossChain not implemented")
}
func (*UnimplementedMsgServer) ReplaceDepositForBurn(ctx context.Context, req *MsgReplaceDepositForBurn) (*MsgReplaceDepositForBurnResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReplaceDepositForBurn not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_PauseProtocol_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgPauseProtocol)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).PauseProtocol(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/noble.orbiter.component.forwarder.v1.Msg/PauseProtocol",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).PauseProtocol(ctx, req.(*MsgPauseProtocol))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UnpauseProtocol_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUnpauseProtocol)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UnpauseProtocol(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/noble.orbiter.component.forwarder.v1.Msg/UnpauseProtocol",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UnpauseProtocol(ctx, req.(*MsgUnpauseProtocol))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_PauseCrossChain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgPauseCrossChain)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).PauseCrossChain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/noble.orbiter.component.forwarder.v1.Msg/PauseCrossChain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).PauseCrossChain(ctx, req.(*MsgPauseCrossChain))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UnpauseCrossChain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUnpauseCrossChain)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UnpauseCrossChain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/noble.orbiter.component.forwarder.v1.Msg/UnpauseCrossChain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UnpauseCrossChain(ctx, req.(*MsgUnpauseCrossChain))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ReplaceDepositForBurn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgReplaceDepositForBurn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ReplaceDepositForBurn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/noble.orbiter.component.forwarder.v1.Msg/ReplaceDepositForBurn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ReplaceDepositForBurn(ctx, req.(*MsgReplaceDepositForBurn))
	}
	return interceptor(ctx, in, info, handler)
}

var Msg_serviceDesc = _Msg_serviceDesc
var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "noble.orbiter.component.forwarder.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PauseProtocol",
			Handler:    _Msg_PauseProtocol_Handler,
		},
		{
			MethodName: "UnpauseProtocol",
			Handler:    _Msg_UnpauseProtocol_Handler,
		},
		{
			MethodName: "PauseCrossChain",
			Handler:    _Msg_PauseCrossChain_Handler,
		},
		{
			MethodName: "UnpauseCrossChain",
			Handler:    _Msg_UnpauseCrossChain_Handler,
		},
		{
			MethodName: "ReplaceDepositForBurn",
			Handler:    _Msg_ReplaceDepositForBurn_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "noble/orbiter/component/forwarder/v1/tx.proto",
}

func (m *MsgPauseProtocol) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPauseProtocol) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPauseProtocol) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ProtocolId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ProtocolId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgPauseProtocolResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPauseProtocolResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPauseProtocolResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgPauseCrossChain) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPauseCrossChain) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPauseCrossChain) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CounterpartyIds) > 0 {
		for iNdEx := len(m.CounterpartyIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.CounterpartyIds[iNdEx])
			copy(dAtA[i:], m.CounterpartyIds[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.CounterpartyIds[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.ProtocolId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ProtocolId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgPauseCrossChainResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPauseCrossChainResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPauseCrossChainResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUnpauseProtocol) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUnpauseProtocol) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUnpauseProtocol) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ProtocolId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ProtocolId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUnpauseProtocolResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUnpauseProtocolResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUnpauseProtocolResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUnpauseCrossChain) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUnpauseCrossChain) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUnpauseCrossChain) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CounterpartyIds) > 0 {
		for iNdEx := len(m.CounterpartyIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.CounterpartyIds[iNdEx])
			copy(dAtA[i:], m.CounterpartyIds[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.CounterpartyIds[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.ProtocolId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ProtocolId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUnpauseCrossChainResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUnpauseCrossChainResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUnpauseCrossChainResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgReplaceDepositForBurn) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgReplaceDepositForBurn) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgReplaceDepositForBurn) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NewMintRecipient) > 0 {
		i -= len(m.NewMintRecipient)
		copy(dAtA[i:], m.NewMintRecipient)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NewMintRecipient)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.NewDestinationCaller) > 0 {
		i -= len(m.NewDestinationCaller)
		copy(dAtA[i:], m.NewDestinationCaller)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NewDestinationCaller)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.OriginalAttestation) > 0 {
		i -= len(m.OriginalAttestation)
		copy(dAtA[i:], m.OriginalAttestation)
		i = encodeVarintTx(dAtA, i, uint64(len(m.OriginalAttestation)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.OriginalMessage) > 0 {
		i -= len(m.OriginalMessage)
		copy(dAtA[i:], m.OriginalMessage)
		i = encodeVarintTx(dAtA, i, uint64(len(m.OriginalMessage)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgReplaceDepositForBurnResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgReplaceDepositForBurnResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgReplaceDepositForBurnResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgPauseProtocol) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.ProtocolId != 0 {
		n += 1 + sovTx(uint64(m.ProtocolId))
	}
	return n
}

func (m *MsgPauseProtocolResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgPauseCrossChain) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.ProtocolId != 0 {
		n += 1 + sovTx(uint64(m.ProtocolId))
	}
	if len(m.CounterpartyIds) > 0 {
		for _, s := range m.CounterpartyIds {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgPauseCrossChainResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUnpauseProtocol) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.ProtocolId != 0 {
		n += 1 + sovTx(uint64(m.ProtocolId))
	}
	return n
}

func (m *MsgUnpauseProtocolResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUnpauseCrossChain) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.ProtocolId != 0 {
		n += 1 + sovTx(uint64(m.ProtocolId))
	}
	if len(m.CounterpartyIds) > 0 {
		for _, s := range m.CounterpartyIds {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgUnpauseCrossChainResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgReplaceDepositForBurn) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.OriginalMessage)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.OriginalAttestation)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.NewDestinationCaller)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.NewMintRecipient)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgReplaceDepositForBurnResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgPauseProtocol) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPauseProtocol: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPauseProtocol: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProtocolId", wireType)
			}
			m.ProtocolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProtocolId |= core.ProtocolID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgPauseProtocolResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPauseProtocolResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPauseProtocolResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgPauseCrossChain) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPauseCrossChain: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPauseCrossChain: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProtocolId", wireType)
			}
			m.ProtocolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProtocolId |= core.ProtocolID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CounterpartyIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CounterpartyIds = append(m.CounterpartyIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgPauseCrossChainResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPauseCrossChainResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPauseCrossChainResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUnpauseProtocol) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUnpauseProtocol: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUnpauseProtocol: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProtocolId", wireType)
			}
			m.ProtocolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProtocolId |= core.ProtocolID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUnpauseProtocolResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUnpauseProtocolResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUnpauseProtocolResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUnpauseCrossChain) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUnpauseCrossChain: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUnpauseCrossChain: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProtocolId", wireType)
			}
			m.ProtocolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProtocolId |= core.ProtocolID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CounterpartyIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CounterpartyIds = append(m.CounterpartyIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUnpauseCrossChainResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUnpauseCrossChainResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUnpauseCrossChainResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgReplaceDepositForBurn) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgReplaceDepositForBurn: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgReplaceDepositForBurn: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginalMessage", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OriginalMessage = append(m.OriginalMessage[:0], dAtA[iNdEx:postIndex]...)
			if m.OriginalMessage == nil {
				m.OriginalMessage = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginalAttestation", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OriginalAttestation = append(m.OriginalAttestation[:0], dAtA[iNdEx:postIndex]...)
			if m.OriginalAttestation == nil {
				m.OriginalAttestation = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewDestinationCaller", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewDestinationCaller = append(m.NewDestinationCaller[:0], dAtA[iNdEx:postIndex]...)
			if m.NewDestinationCaller == nil {
				m.NewDestinationCaller = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewMintRecipient", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewMintRecipient = append(m.NewMintRecipient[:0], dAtA[iNdEx:postIndex]...)
			if m.NewMintRecipient == nil {
				m.NewMintRecipient = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgReplaceDepositForBurnResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgReplaceDepositForBurnResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgReplaceDepositForBurnResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
