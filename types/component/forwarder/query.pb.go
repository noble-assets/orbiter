// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: noble/orbiter/component/forwarder/v1/query.proto

package forwarder

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	core "orbiter.dev/types/core"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryPausedProtocolsRequest is the request type for the Query/PausedProtocol RPC method.
type QueryPausedProtocolsRequest struct {
}

func (m *QueryPausedProtocolsRequest) Reset()         { *m = QueryPausedProtocolsRequest{} }
func (m *QueryPausedProtocolsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryPausedProtocolsRequest) ProtoMessage()    {}
func (*QueryPausedProtocolsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_aaf39c97a61ced58, []int{0}
}
func (m *QueryPausedProtocolsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPausedProtocolsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPausedProtocolsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPausedProtocolsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPausedProtocolsRequest.Merge(m, src)
}
func (m *QueryPausedProtocolsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPausedProtocolsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPausedProtocolsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPausedProtocolsRequest proto.InternalMessageInfo

// QueryPausedProtocolsResponse is the response type for the Query/PausedProtocol RPC method.
type QueryPausedProtocolsResponse struct {
	ProtocolId []core.ProtocolID `protobuf:"varint,1,rep,packed,name=protocol_id,json=protocolId,proto3,enum=noble.orbiter.core.v1.ProtocolID" json:"protocol_id,omitempty"`
}

func (m *QueryPausedProtocolsResponse) Reset()         { *m = QueryPausedProtocolsResponse{} }
func (m *QueryPausedProtocolsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPausedProtocolsResponse) ProtoMessage()    {}
func (*QueryPausedProtocolsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_aaf39c97a61ced58, []int{1}
}
func (m *QueryPausedProtocolsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPausedProtocolsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPausedProtocolsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPausedProtocolsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPausedProtocolsResponse.Merge(m, src)
}
func (m *QueryPausedProtocolsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPausedProtocolsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPausedProtocolsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPausedProtocolsResponse proto.InternalMessageInfo

func (m *QueryPausedProtocolsResponse) GetProtocolId() []core.ProtocolID {
	if m != nil {
		return m.ProtocolId
	}
	return nil
}

// QueryPausedCounterpartiesRequest is the request type for the Query/PausedCounterparties RPC method.
type QueryPausedCounterpartiesRequest struct {
	// protocol_id is the protocol to query paused counterparties for.
	ProtocolId core.ProtocolID `protobuf:"varint,1,opt,name=protocol_id,json=protocolId,proto3,enum=noble.orbiter.core.v1.ProtocolID" json:"protocol_id,omitempty"`
}

func (m *QueryPausedCounterpartiesRequest) Reset()         { *m = QueryPausedCounterpartiesRequest{} }
func (m *QueryPausedCounterpartiesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryPausedCounterpartiesRequest) ProtoMessage()    {}
func (*QueryPausedCounterpartiesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_aaf39c97a61ced58, []int{2}
}
func (m *QueryPausedCounterpartiesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPausedCounterpartiesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPausedCounterpartiesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPausedCounterpartiesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPausedCounterpartiesRequest.Merge(m, src)
}
func (m *QueryPausedCounterpartiesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPausedCounterpartiesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPausedCounterpartiesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPausedCounterpartiesRequest proto.InternalMessageInfo

func (m *QueryPausedCounterpartiesRequest) GetProtocolId() core.ProtocolID {
	if m != nil {
		return m.ProtocolId
	}
	return core.PROTOCOL_UNSUPPORTED
}

// QueryPausedCounterpartiesResponse is the response type for the Query/PausedCounterparties RPC method.
type QueryPausedCounterpartiesResponse struct {
	// counterparty_ids is the list of paused counterparty identifiers.
	CounterpartyIds []string `protobuf:"bytes,1,rep,name=counterparty_ids,json=counterpartyIds,proto3" json:"counterparty_ids,omitempty"`
}

func (m *QueryPausedCounterpartiesResponse) Reset()         { *m = QueryPausedCounterpartiesResponse{} }
func (m *QueryPausedCounterpartiesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPausedCounterpartiesResponse) ProtoMessage()    {}
func (*QueryPausedCounterpartiesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_aaf39c97a61ced58, []int{3}
}
func (m *QueryPausedCounterpartiesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPausedCounterpartiesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPausedCounterpartiesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPausedCounterpartiesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPausedCounterpartiesResponse.Merge(m, src)
}
func (m *QueryPausedCounterpartiesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPausedCounterpartiesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPausedCounterpartiesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPausedCounterpartiesResponse proto.InternalMessageInfo

func (m *QueryPausedCounterpartiesResponse) GetCounterpartyIds() []string {
	if m != nil {
		return m.CounterpartyIds
	}
	return nil
}

// QueryIsProtocolPausedRequest is the request type for the Query/IsProtocolPaused RPC method.
type QueryIsProtocolPausedRequest struct {
	// protocol_id is the protocol to check.
	ProtocolId core.ProtocolID `protobuf:"varint,1,opt,name=protocol_id,json=protocolId,proto3,enum=noble.orbiter.core.v1.ProtocolID" json:"protocol_id,omitempty"`
}

func (m *QueryIsProtocolPausedRequest) Reset()         { *m = QueryIsProtocolPausedRequest{} }
func (m *QueryIsProtocolPausedRequest) String() string { return proto.CompactTextString(m) }
func (*QueryIsProtocolPausedRequest) ProtoMessage()    {}
func (*QueryIsProtocolPausedRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_aaf39c97a61ced58, []int{4}
}
func (m *QueryIsProtocolPausedRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryIsProtocolPausedRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryIsProtocolPausedRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryIsProtocolPausedRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryIsProtocolPausedRequest.Merge(m, src)
}
func (m *QueryIsProtocolPausedRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryIsProtocolPausedRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryIsProtocolPausedRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryIsProtocolPausedRequest proto.InternalMessageInfo

func (m *QueryIsProtocolPausedRequest) GetProtocolId() core.ProtocolID {
	if m != nil {
		return m.ProtocolId
	}
	return core.PROTOCOL_UNSUPPORTED
}

// QueryIsProtocolPausedResponse is the response type for the Query/IsProtocolPaused RPC method.
type QueryIsProtocolPausedResponse struct {
	// is_paused indicates whether the protocol is paused.
	IsPaused bool `protobuf:"varint,1,opt,name=is_paused,json=isPaused,proto3" json:"is_paused,omitempty"`
}

func (m *QueryIsProtocolPausedResponse) Reset()         { *m = QueryIsProtocolPausedResponse{} }
func (m *QueryIsProtocolPausedResponse) String() string { return proto.CompactTextString(m) }
func (*QueryIsProtocolPausedResponse) ProtoMessage()    {}
func (*QueryIsProtocolPausedResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_aaf39c97a61ced58, []int{5}
}
func (m *QueryIsProtocolPausedResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryIsProtocolPausedResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryIsProtocolPausedResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryIsProtocolPausedResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryIsProtocolPausedResponse.Merge(m, src)
}
func (m *QueryIsProtocolPausedResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryIsProtocolPausedResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryIsProtocolPausedResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryIsProtocolPausedResponse proto.InternalMessageInfo

func (m *QueryIsProtocolPausedResponse) GetIsPaused() bool {
	if m != nil {
		return m.IsPaused
	}
	return false
}

// QueryIsCounterpartyPausedRequest is the request type for the Query/IsCounterpartyPaused RPC method.
type QueryIsCounterpartyPausedRequest struct {
	// protocol_id is the protocol to check.
	ProtocolId core.ProtocolID `protobuf:"varint,1,opt,name=protocol_id,json=protocolId,proto3,enum=noble.orbiter.core.v1.ProtocolID" json:"protocol_id,omitempty"`
	// counterparty_id is the counterparty identifier to check.
	CounterpartyId string `protobuf:"bytes,2,opt,name=counterparty_id,json=counterpartyId,proto3" json:"counterparty_id,omitempty"`
}

func (m *QueryIsCounterpartyPausedRequest) Reset()         { *m = QueryIsCounterpartyPausedRequest{} }
func (m *QueryIsCounterpartyPausedRequest) String() string { return proto.CompactTextString(m) }
func (*QueryIsCounterpartyPausedRequest) ProtoMessage()    {}
func (*QueryIsCounterpartyPausedRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_aaf39c97a61ced58, []int{6}
}
func (m *QueryIsCounterpartyPausedRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryIsCounterpartyPausedRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryIsCounterpartyPausedRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryIsCounterpartyPausedRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryIsCounterpartyPausedRequest.Merge(m, src)
}
func (m *QueryIsCounterpartyPausedRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryIsCounterpartyPausedRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryIsCounterpartyPausedRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryIsCounterpartyPausedRequest proto.InternalMessageInfo

func (m *QueryIsCounterpartyPausedRequest) GetProtocolId() core.ProtocolID {
	if m != nil {
		return m.ProtocolId
	}
	return core.PROTOCOL_UNSUPPORTED
}

func (m *QueryIsCounterpartyPausedRequest) GetCounterpartyId() string {
	if m != nil {
		return m.CounterpartyId
	}
	return ""
}

// QueryIsCounterpartyPausedResponse is the response type for the Query/IsCounterpartyPaused RPC method.
type QueryIsCounterpartyPausedResponse struct {
	// is_paused indicates whether the counterparty is paused.
	IsPaused bool `protobuf:"varint,1,opt,name=is_paused,json=isPaused,proto3" json:"is_paused,omitempty"`
}

func (m *QueryIsCounterpartyPausedResponse) Reset()         { *m = QueryIsCounterpartyPausedResponse{} }
func (m *QueryIsCounterpartyPausedResponse) String() string { return proto.CompactTextString(m) }
func (*QueryIsCounterpartyPausedResponse) ProtoMessage()    {}
func (*QueryIsCounterpartyPausedResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_aaf39c97a61ced58, []int{7}
}
func (m *QueryIsCounterpartyPausedResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryIsCounterpartyPausedResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryIsCounterpartyPausedResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryIsCounterpartyPausedResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryIsCounterpartyPausedResponse.Merge(m, src)
}
func (m *QueryIsCounterpartyPausedResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryIsCounterpartyPausedResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryIsCounterpartyPausedResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryIsCounterpartyPausedResponse proto.InternalMessageInfo

func (m *QueryIsCounterpartyPausedResponse) GetIsPaused() bool {
	if m != nil {
		return m.IsPaused
	}
	return false
}

func init() {
	proto.RegisterType((*QueryPausedProtocolsRequest)(nil), "noble.orbiter.component.forwarder.v1.QueryPausedProtocolsRequest")
	proto.RegisterType((*QueryPausedProtocolsResponse)(nil), "noble.orbiter.component.forwarder.v1.QueryPausedProtocolsResponse")
	proto.RegisterType((*QueryPausedCounterpartiesRequest)(nil), "noble.orbiter.component.forwarder.v1.QueryPausedCounterpartiesRequest")
	proto.RegisterType((*QueryPausedCounterpartiesResponse)(nil), "noble.orbiter.component.forwarder.v1.QueryPausedCounterpartiesResponse")
	proto.RegisterType((*QueryIsProtocolPausedRequest)(nil), "noble.orbiter.component.forwarder.v1.QueryIsProtocolPausedRequest")
	proto.RegisterType((*QueryIsProtocolPausedResponse)(nil), "noble.orbiter.component.forwarder.v1.QueryIsProtocolPausedResponse")
	proto.RegisterType((*QueryIsCounterpartyPausedRequest)(nil), "noble.orbiter.component.forwarder.v1.QueryIsCounterpartyPausedRequest")
	proto.RegisterType((*QueryIsCounterpartyPausedResponse)(nil), "noble.orbiter.component.forwarder.v1.QueryIsCounterpartyPausedResponse")
}

func init() {
	proto.RegisterFile("noble/orbiter/component/forwarder/v1/query.proto", fileDescriptor_aaf39c97a61ced58)
}

var fileDescriptor_aaf39c97a61ced58 = []byte{
	// 571 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x95, 0xcf, 0x6b, 0x13, 0x41,
	0x14, 0xc7, 0x33, 0x91, 0x6a, 0x33, 0x42, 0x53, 0x87, 0x1e, 0xca, 0xa6, 0x5d, 0xd2, 0x45, 0xb1,
	0x8a, 0xcc, 0x98, 0x7a, 0x52, 0x0a, 0x6a, 0x2a, 0x96, 0x45, 0x90, 0x9a, 0x83, 0x07, 0x45, 0xc2,
	0x66, 0x77, 0xac, 0x03, 0xc9, 0xce, 0x76, 0x66, 0x12, 0x09, 0xa5, 0x17, 0x4f, 0x1e, 0x15, 0xc1,
	0xbf, 0xc1, 0xa3, 0x7f, 0x86, 0xc7, 0x42, 0x2f, 0xe2, 0x49, 0x92, 0x82, 0x7f, 0x86, 0x92, 0xdd,
	0xd9, 0xfc, 0x58, 0xb7, 0xa1, 0xdb, 0xb4, 0x97, 0x1c, 0x66, 0xf2, 0xbe, 0xef, 0x7d, 0xde, 0x7b,
	0xdf, 0x59, 0x78, 0xd7, 0xe7, 0x8d, 0x26, 0x25, 0x5c, 0x34, 0x98, 0xa2, 0x82, 0xb8, 0xbc, 0x15,
	0x70, 0x9f, 0xfa, 0x8a, 0xbc, 0xe5, 0xe2, 0xbd, 0x23, 0x3c, 0x2a, 0x48, 0xa7, 0x42, 0xf6, 0xda,
	0x54, 0x74, 0x71, 0x20, 0xb8, 0xe2, 0xe8, 0x7a, 0x18, 0x81, 0x75, 0x04, 0x1e, 0x46, 0xe0, 0x61,
	0x04, 0xee, 0x54, 0x8c, 0x6b, 0x4e, 0x8b, 0xf9, 0x9c, 0x84, 0xbf, 0x51, 0xa0, 0x51, 0x72, 0xb9,
	0x6c, 0x71, 0x19, 0x89, 0x25, 0x54, 0x8d, 0x95, 0x5d, 0xce, 0x77, 0x9b, 0x94, 0x38, 0x01, 0x23,
	0x8e, 0xef, 0x73, 0xe5, 0x28, 0xc6, 0x7d, 0xa9, 0x6f, 0xcd, 0x64, 0x95, 0x82, 0x0e, 0x04, 0x98,
	0x17, 0xdd, 0x5b, 0xab, 0xb0, 0xf4, 0x62, 0x20, 0xb6, 0xe3, 0xb4, 0x25, 0xf5, 0x76, 0x06, 0x67,
	0x2e, 0x6f, 0xca, 0x1a, 0xdd, 0x6b, 0x53, 0xa9, 0x2c, 0x06, 0x57, 0xd2, 0xaf, 0x65, 0xc0, 0x7d,
	0x49, 0x91, 0x0d, 0xaf, 0x06, 0xfa, 0xb0, 0xce, 0xbc, 0x65, 0x50, 0xbe, 0xb4, 0xbe, 0xb0, 0xb1,
	0x86, 0x93, 0xa0, 0x82, 0xe2, 0x4e, 0x05, 0xc7, 0xe1, 0xf6, 0x93, 0xea, 0xdc, 0xb7, 0x3f, 0xdf,
	0x6f, 0x83, 0x1a, 0x8c, 0x83, 0x6d, 0xcf, 0x6a, 0xc1, 0xf2, 0x58, 0xaa, 0x2d, 0xde, 0xf6, 0x15,
	0x15, 0x81, 0x23, 0x14, 0xa3, 0x71, 0x39, 0xff, 0xa7, 0x03, 0x67, 0x4e, 0xf7, 0x1c, 0xae, 0x4d,
	0x49, 0xa7, 0xf1, 0x6e, 0xc1, 0x45, 0x77, 0x74, 0xd3, 0xad, 0x33, 0x4f, 0x86, 0x8c, 0x85, 0x5a,
	0x71, 0xfc, 0xdc, 0xf6, 0xe4, 0xb0, 0x53, 0xb6, 0x8c, 0xf3, 0x46, 0xca, 0x17, 0x50, 0xfa, 0x26,
	0x5c, 0x3d, 0x21, 0x95, 0x2e, 0xbb, 0x04, 0x0b, 0x4c, 0xd6, 0x83, 0xf0, 0x30, 0xcc, 0x34, 0x5f,
	0x9b, 0x67, 0x32, 0xfa, 0x93, 0xf5, 0x15, 0xe8, 0x46, 0xdb, 0x72, 0x8c, 0xba, 0x7b, 0x51, 0xd5,
	0xa2, 0x9b, 0xb0, 0x98, 0xe8, 0xe1, 0x72, 0xbe, 0x0c, 0xd6, 0x0b, 0xb5, 0x85, 0xc9, 0x16, 0x5a,
	0x8f, 0xf4, 0x44, 0xd2, 0xeb, 0x3a, 0x05, 0xda, 0xc6, 0xaf, 0x2b, 0x70, 0x2e, 0x94, 0x40, 0x47,
	0x00, 0x16, 0x13, 0x3b, 0x8b, 0x1e, 0xe3, 0xd3, 0xf8, 0x0f, 0x4f, 0xb1, 0x83, 0x51, 0x9d, 0x45,
	0x22, 0x22, 0xb0, 0xee, 0x7f, 0x1c, 0xb4, 0xe8, 0xc3, 0xd1, 0xf1, 0x97, 0x3c, 0x46, 0x77, 0xc8,
	0xa4, 0x3f, 0x27, 0xde, 0x8e, 0x88, 0x92, 0x04, 0x43, 0x82, 0xbf, 0x00, 0x2e, 0xa5, 0xed, 0x2b,
	0x7a, 0x9a, 0xb9, 0xae, 0x54, 0x7f, 0x19, 0xdb, 0x33, 0xeb, 0x68, 0xc8, 0x97, 0x23, 0xc8, 0x67,
	0xc8, 0xce, 0x02, 0x49, 0xf6, 0xc7, 0x16, 0xef, 0x80, 0xb8, 0x93, 0xa0, 0xc7, 0x00, 0x2e, 0x26,
	0xd7, 0x1e, 0x65, 0x99, 0xca, 0x09, 0xf6, 0x34, 0xb6, 0x66, 0xd2, 0xd0, 0xd4, 0xdb, 0x23, 0xea,
	0x4d, 0xf4, 0xe0, 0xec, 0xd4, 0xe8, 0x73, 0x1e, 0x2e, 0xa5, 0xd9, 0x20, 0xd3, 0xa0, 0xa7, 0xf8,
	0x3b, 0xd3, 0xa0, 0xa7, 0xf9, 0xd1, 0x7a, 0x37, 0x42, 0x7e, 0x83, 0x5e, 0x9f, 0xdb, 0xa0, 0xc9,
	0x7e, 0xe2, 0xcd, 0x38, 0xa8, 0x3e, 0xfc, 0xd1, 0x33, 0xc1, 0x61, 0xcf, 0x04, 0xbf, 0x7b, 0x26,
	0xf8, 0xd4, 0x37, 0x73, 0x87, 0x7d, 0x33, 0xf7, 0xb3, 0x6f, 0xe6, 0x5e, 0xdd, 0x88, 0x29, 0x3c,
	0xda, 0x21, 0xaa, 0x1b, 0x50, 0x99, 0xf6, 0x35, 0x6e, 0x5c, 0x0e, 0xf3, 0xdd, 0xfb, 0x17, 0x00,
	0x00, 0xff, 0xff, 0x59, 0xa4, 0xd9, 0xdf, 0xb9, 0x07, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// PausedProtocols retrieves all paused protocol IDs.
	PausedProtocols(ctx context.Context, in *QueryPausedProtocolsRequest, opts ...grpc.CallOption) (*QueryPausedProtocolsResponse, error)
	// PausedCounterparties retrieves all paused counterparties for a specific protocol.
	PausedCounterparties(ctx context.Context, in *QueryPausedCounterpartiesRequest, opts ...grpc.CallOption) (*QueryPausedCounterpartiesResponse, error)
	// IsProtocolPaused checks if a specific protocol is paused.
	IsProtocolPaused(ctx context.Context, in *QueryIsProtocolPausedRequest, opts ...grpc.CallOption) (*QueryIsProtocolPausedResponse, error)
	// IsCounterpartyPaused checks if a specific counterparty for a protocol is paused.
	IsCounterpartyPaused(ctx context.Context, in *QueryIsCounterpartyPausedRequest, opts ...grpc.CallOption) (*QueryIsCounterpartyPausedResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) PausedProtocols(ctx context.Context, in *QueryPausedProtocolsRequest, opts ...grpc.CallOption) (*QueryPausedProtocolsResponse, error) {
	out := new(QueryPausedProtocolsResponse)
	err := c.cc.Invoke(ctx, "/noble.orbiter.component.forwarder.v1.Query/PausedProtocols", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PausedCounterparties(ctx context.Context, in *QueryPausedCounterpartiesRequest, opts ...grpc.CallOption) (*QueryPausedCounterpartiesResponse, error) {
	out := new(QueryPausedCounterpartiesResponse)
	err := c.cc.Invoke(ctx, "/noble.orbiter.component.forwarder.v1.Query/PausedCounterparties", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) IsProtocolPaused(ctx context.Context, in *QueryIsProtocolPausedRequest, opts ...grpc.CallOption) (*QueryIsProtocolPausedResponse, error) {
	out := new(QueryIsProtocolPausedResponse)
	err := c.cc.Invoke(ctx, "/noble.orbiter.component.forwarder.v1.Query/IsProtocolPaused", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) IsCounterpartyPaused(ctx context.Context, in *QueryIsCounterpartyPausedRequest, opts ...grpc.CallOption) (*QueryIsCounterpartyPausedResponse, error) {
	out := new(QueryIsCounterpartyPausedResponse)
	err := c.cc.Invoke(ctx, "/noble.orbiter.component.forwarder.v1.Query/IsCounterpartyPaused", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// PausedProtocols retrieves all paused protocol IDs.
	PausedProtocols(context.Context, *QueryPausedProtocolsRequest) (*QueryPausedProtocolsResponse, error)
	// PausedCounterparties retrieves all paused counterparties for a specific protocol.
	PausedCounterparties(context.Context, *QueryPausedCounterpartiesRequest) (*QueryPausedCounterpartiesResponse, error)
	// IsProtocolPaused checks if a specific protocol is paused.
	IsProtocolPaused(context.Context, *QueryIsProtocolPausedRequest) (*QueryIsProtocolPausedResponse, error)
	// IsCounterpartyPaused checks if a specific counterparty for a protocol is paused.
	IsCounterpartyPaused(context.Context, *QueryIsCounterpartyPausedRequest) (*QueryIsCounterpartyPausedResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) PausedProtocols(ctx context.Context, req *QueryPausedProtocolsRequest) (*QueryPausedProtocolsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PausedProtocols not implemented")
}
func (*UnimplementedQueryServer) PausedCounterparties(ctx context.Context, req *QueryPausedCounterpartiesRequest) (*QueryPausedCounterpartiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PausedCounterparties not implemented")
}
func (*UnimplementedQueryServer) IsProtocolPaused(ctx context.Context, req *QueryIsProtocolPausedRequest) (*QueryIsProtocolPausedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsProtocolPaused not implemented")
}
func (*UnimplementedQueryServer) IsCounterpartyPaused(ctx context.Context, req *QueryIsCounterpartyPausedRequest) (*QueryIsCounterpartyPausedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsCounterpartyPaused not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_PausedProtocols_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPausedProtocolsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PausedProtocols(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/noble.orbiter.component.forwarder.v1.Query/PausedProtocols",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PausedProtocols(ctx, req.(*QueryPausedProtocolsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PausedCounterparties_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPausedCounterpartiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PausedCounterparties(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/noble.orbiter.component.forwarder.v1.Query/PausedCounterparties",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PausedCounterparties(ctx, req.(*QueryPausedCounterpartiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_IsProtocolPaused_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryIsProtocolPausedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).IsProtocolPaused(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/noble.orbiter.component.forwarder.v1.Query/IsProtocolPaused",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).IsProtocolPaused(ctx, req.(*QueryIsProtocolPausedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_IsCounterpartyPaused_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryIsCounterpartyPausedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).IsCounterpartyPaused(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/noble.orbiter.component.forwarder.v1.Query/IsCounterpartyPaused",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).IsCounterpartyPaused(ctx, req.(*QueryIsCounterpartyPausedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var Query_serviceDesc = _Query_serviceDesc
var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "noble.orbiter.component.forwarder.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PausedProtocols",
			Handler:    _Query_PausedProtocols_Handler,
		},
		{
			MethodName: "PausedCounterparties",
			Handler:    _Query_PausedCounterparties_Handler,
		},
		{
			MethodName: "IsProtocolPaused",
			Handler:    _Query_IsProtocolPaused_Handler,
		},
		{
			MethodName: "IsCounterpartyPaused",
			Handler:    _Query_IsCounterpartyPaused_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "noble/orbiter/component/forwarder/v1/query.proto",
}

func (m *QueryPausedProtocolsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPausedProtocolsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPausedProtocolsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryPausedProtocolsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPausedProtocolsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPausedProtocolsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ProtocolId) > 0 {
		dAtA2 := make([]byte, len(m.ProtocolId)*10)
		var j1 int
		for _, num := range m.ProtocolId {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintQuery(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryPausedCounterpartiesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPausedCounterpartiesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPausedCounterpartiesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ProtocolId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ProtocolId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryPausedCounterpartiesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPausedCounterpartiesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPausedCounterpartiesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CounterpartyIds) > 0 {
		for iNdEx := len(m.CounterpartyIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.CounterpartyIds[iNdEx])
			copy(dAtA[i:], m.CounterpartyIds[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.CounterpartyIds[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryIsProtocolPausedRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryIsProtocolPausedRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryIsProtocolPausedRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ProtocolId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ProtocolId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryIsProtocolPausedResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryIsProtocolPausedResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryIsProtocolPausedResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsPaused {
		i--
		if m.IsPaused {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryIsCounterpartyPausedRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryIsCounterpartyPausedRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryIsCounterpartyPausedRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CounterpartyId) > 0 {
		i -= len(m.CounterpartyId)
		copy(dAtA[i:], m.CounterpartyId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.CounterpartyId)))
		i--
		dAtA[i] = 0x12
	}
	if m.ProtocolId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ProtocolId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryIsCounterpartyPausedResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryIsCounterpartyPausedResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryIsCounterpartyPausedResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsPaused {
		i--
		if m.IsPaused {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryPausedProtocolsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryPausedProtocolsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ProtocolId) > 0 {
		l = 0
		for _, e := range m.ProtocolId {
			l += sovQuery(uint64(e))
		}
		n += 1 + sovQuery(uint64(l)) + l
	}
	return n
}

func (m *QueryPausedCounterpartiesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProtocolId != 0 {
		n += 1 + sovQuery(uint64(m.ProtocolId))
	}
	return n
}

func (m *QueryPausedCounterpartiesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CounterpartyIds) > 0 {
		for _, s := range m.CounterpartyIds {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryIsProtocolPausedRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProtocolId != 0 {
		n += 1 + sovQuery(uint64(m.ProtocolId))
	}
	return n
}

func (m *QueryIsProtocolPausedResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsPaused {
		n += 2
	}
	return n
}

func (m *QueryIsCounterpartyPausedRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProtocolId != 0 {
		n += 1 + sovQuery(uint64(m.ProtocolId))
	}
	l = len(m.CounterpartyId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryIsCounterpartyPausedResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsPaused {
		n += 2
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryPausedProtocolsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPausedProtocolsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPausedProtocolsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPausedProtocolsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPausedProtocolsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPausedProtocolsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v core.ProtocolID
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= core.ProtocolID(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ProtocolId = append(m.ProtocolId, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthQuery
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthQuery
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.ProtocolId) == 0 {
					m.ProtocolId = make([]core.ProtocolID, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v core.ProtocolID
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowQuery
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= core.ProtocolID(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ProtocolId = append(m.ProtocolId, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ProtocolId", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPausedCounterpartiesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPausedCounterpartiesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPausedCounterpartiesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProtocolId", wireType)
			}
			m.ProtocolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProtocolId |= core.ProtocolID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPausedCounterpartiesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPausedCounterpartiesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPausedCounterpartiesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CounterpartyIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CounterpartyIds = append(m.CounterpartyIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryIsProtocolPausedRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryIsProtocolPausedRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryIsProtocolPausedRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProtocolId", wireType)
			}
			m.ProtocolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProtocolId |= core.ProtocolID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryIsProtocolPausedResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryIsProtocolPausedResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryIsProtocolPausedResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsPaused", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsPaused = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryIsCounterpartyPausedRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryIsCounterpartyPausedRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryIsCounterpartyPausedRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProtocolId", wireType)
			}
			m.ProtocolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProtocolId |= core.ProtocolID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CounterpartyId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CounterpartyId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryIsCounterpartyPausedResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryIsCounterpartyPausedResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryIsCounterpartyPausedResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsPaused", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsPaused = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
