// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: noble/orbiter/component/forwarder/v1/query.proto

package forwarder

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	core "github.com/noble-assets/orbiter/types/core"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryPausedProtocolsRequest is the request type for the Query/PausedProtocol RPC method.
type QueryPausedProtocolsRequest struct {
}

func (m *QueryPausedProtocolsRequest) Reset()         { *m = QueryPausedProtocolsRequest{} }
func (m *QueryPausedProtocolsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryPausedProtocolsRequest) ProtoMessage()    {}
func (*QueryPausedProtocolsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_aaf39c97a61ced58, []int{0}
}
func (m *QueryPausedProtocolsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPausedProtocolsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPausedProtocolsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPausedProtocolsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPausedProtocolsRequest.Merge(m, src)
}
func (m *QueryPausedProtocolsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPausedProtocolsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPausedProtocolsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPausedProtocolsRequest proto.InternalMessageInfo

// QueryPausedProtocolsResponse is the response type for the Query/PausedProtocol RPC method.
type QueryPausedProtocolsResponse struct {
	ProtocolIds []core.ProtocolID `protobuf:"varint,1,rep,packed,name=protocol_ids,json=protocolIds,proto3,enum=noble.orbiter.core.v1.ProtocolID" json:"protocol_ids,omitempty"`
}

func (m *QueryPausedProtocolsResponse) Reset()         { *m = QueryPausedProtocolsResponse{} }
func (m *QueryPausedProtocolsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPausedProtocolsResponse) ProtoMessage()    {}
func (*QueryPausedProtocolsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_aaf39c97a61ced58, []int{1}
}
func (m *QueryPausedProtocolsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPausedProtocolsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPausedProtocolsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPausedProtocolsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPausedProtocolsResponse.Merge(m, src)
}
func (m *QueryPausedProtocolsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPausedProtocolsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPausedProtocolsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPausedProtocolsResponse proto.InternalMessageInfo

func (m *QueryPausedProtocolsResponse) GetProtocolIds() []core.ProtocolID {
	if m != nil {
		return m.ProtocolIds
	}
	return nil
}

// QueryPausedCrossChainsRequest is the request type for the Query/PausedCrossChains RPC method.
type QueryPausedCrossChainsRequest struct {
	// protocol_id is the protocol to query paused counterparties for.
	ProtocolId string `protobuf:"bytes,1,opt,name=protocol_id,json=protocolId,proto3" json:"protocol_id,omitempty"`
	// pagination defines an optional pagination for the request.
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryPausedCrossChainsRequest) Reset()         { *m = QueryPausedCrossChainsRequest{} }
func (m *QueryPausedCrossChainsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryPausedCrossChainsRequest) ProtoMessage()    {}
func (*QueryPausedCrossChainsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_aaf39c97a61ced58, []int{2}
}
func (m *QueryPausedCrossChainsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPausedCrossChainsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPausedCrossChainsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPausedCrossChainsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPausedCrossChainsRequest.Merge(m, src)
}
func (m *QueryPausedCrossChainsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPausedCrossChainsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPausedCrossChainsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPausedCrossChainsRequest proto.InternalMessageInfo

func (m *QueryPausedCrossChainsRequest) GetProtocolId() string {
	if m != nil {
		return m.ProtocolId
	}
	return ""
}

func (m *QueryPausedCrossChainsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryPausedCrossChainsResponse is the response type for the Query/PausedCrossChains RPC method.
type QueryPausedCrossChainsResponse struct {
	// counterparty_ids is the list of paused counterparty identifiers for the specified protocol ID.
	CounterpartyIds []string `protobuf:"bytes,1,rep,name=counterparty_ids,json=counterpartyIds,proto3" json:"counterparty_ids,omitempty"`
	// pagination defines the pagination in the response.
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryPausedCrossChainsResponse) Reset()         { *m = QueryPausedCrossChainsResponse{} }
func (m *QueryPausedCrossChainsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPausedCrossChainsResponse) ProtoMessage()    {}
func (*QueryPausedCrossChainsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_aaf39c97a61ced58, []int{3}
}
func (m *QueryPausedCrossChainsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPausedCrossChainsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPausedCrossChainsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPausedCrossChainsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPausedCrossChainsResponse.Merge(m, src)
}
func (m *QueryPausedCrossChainsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPausedCrossChainsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPausedCrossChainsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPausedCrossChainsResponse proto.InternalMessageInfo

func (m *QueryPausedCrossChainsResponse) GetCounterpartyIds() []string {
	if m != nil {
		return m.CounterpartyIds
	}
	return nil
}

func (m *QueryPausedCrossChainsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryIsProtocolPausedRequest is the request type for the Query/IsProtocolPaused RPC method.
type QueryIsProtocolPausedRequest struct {
	// protocol_id is the protocol to check.
	ProtocolId string `protobuf:"bytes,1,opt,name=protocol_id,json=protocolId,proto3" json:"protocol_id,omitempty"`
}

func (m *QueryIsProtocolPausedRequest) Reset()         { *m = QueryIsProtocolPausedRequest{} }
func (m *QueryIsProtocolPausedRequest) String() string { return proto.CompactTextString(m) }
func (*QueryIsProtocolPausedRequest) ProtoMessage()    {}
func (*QueryIsProtocolPausedRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_aaf39c97a61ced58, []int{4}
}
func (m *QueryIsProtocolPausedRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryIsProtocolPausedRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryIsProtocolPausedRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryIsProtocolPausedRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryIsProtocolPausedRequest.Merge(m, src)
}
func (m *QueryIsProtocolPausedRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryIsProtocolPausedRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryIsProtocolPausedRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryIsProtocolPausedRequest proto.InternalMessageInfo

func (m *QueryIsProtocolPausedRequest) GetProtocolId() string {
	if m != nil {
		return m.ProtocolId
	}
	return ""
}

// QueryIsProtocolPausedResponse is the response type for the Query/IsProtocolPaused RPC method.
type QueryIsProtocolPausedResponse struct {
	// is_paused indicates whether the protocol is paused.
	IsPaused bool `protobuf:"varint,1,opt,name=is_paused,json=isPaused,proto3" json:"is_paused,omitempty"`
}

func (m *QueryIsProtocolPausedResponse) Reset()         { *m = QueryIsProtocolPausedResponse{} }
func (m *QueryIsProtocolPausedResponse) String() string { return proto.CompactTextString(m) }
func (*QueryIsProtocolPausedResponse) ProtoMessage()    {}
func (*QueryIsProtocolPausedResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_aaf39c97a61ced58, []int{5}
}
func (m *QueryIsProtocolPausedResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryIsProtocolPausedResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryIsProtocolPausedResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryIsProtocolPausedResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryIsProtocolPausedResponse.Merge(m, src)
}
func (m *QueryIsProtocolPausedResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryIsProtocolPausedResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryIsProtocolPausedResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryIsProtocolPausedResponse proto.InternalMessageInfo

func (m *QueryIsProtocolPausedResponse) GetIsPaused() bool {
	if m != nil {
		return m.IsPaused
	}
	return false
}

// QueryIsCrossChainPausedRequest is the request type for the Query/IsCrossChainPaused RPC method.
type QueryIsCrossChainPausedRequest struct {
	// protocol_id is the protocol to check.
	ProtocolId string `protobuf:"bytes,1,opt,name=protocol_id,json=protocolId,proto3" json:"protocol_id,omitempty"`
	// counterparty_id is the counterparty identifier to check.
	CounterpartyId string `protobuf:"bytes,2,opt,name=counterparty_id,json=counterpartyId,proto3" json:"counterparty_id,omitempty"`
}

func (m *QueryIsCrossChainPausedRequest) Reset()         { *m = QueryIsCrossChainPausedRequest{} }
func (m *QueryIsCrossChainPausedRequest) String() string { return proto.CompactTextString(m) }
func (*QueryIsCrossChainPausedRequest) ProtoMessage()    {}
func (*QueryIsCrossChainPausedRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_aaf39c97a61ced58, []int{6}
}
func (m *QueryIsCrossChainPausedRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryIsCrossChainPausedRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryIsCrossChainPausedRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryIsCrossChainPausedRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryIsCrossChainPausedRequest.Merge(m, src)
}
func (m *QueryIsCrossChainPausedRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryIsCrossChainPausedRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryIsCrossChainPausedRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryIsCrossChainPausedRequest proto.InternalMessageInfo

func (m *QueryIsCrossChainPausedRequest) GetProtocolId() string {
	if m != nil {
		return m.ProtocolId
	}
	return ""
}

func (m *QueryIsCrossChainPausedRequest) GetCounterpartyId() string {
	if m != nil {
		return m.CounterpartyId
	}
	return ""
}

// QueryIsCrossChainPausedResponse is the response type for the Query/IsCrossChainPaused RPC method.
type QueryIsCrossChainPausedResponse struct {
	// is_paused indicates whether the counterparty is paused.
	IsPaused bool `protobuf:"varint,1,opt,name=is_paused,json=isPaused,proto3" json:"is_paused,omitempty"`
}

func (m *QueryIsCrossChainPausedResponse) Reset()         { *m = QueryIsCrossChainPausedResponse{} }
func (m *QueryIsCrossChainPausedResponse) String() string { return proto.CompactTextString(m) }
func (*QueryIsCrossChainPausedResponse) ProtoMessage()    {}
func (*QueryIsCrossChainPausedResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_aaf39c97a61ced58, []int{7}
}
func (m *QueryIsCrossChainPausedResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryIsCrossChainPausedResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryIsCrossChainPausedResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryIsCrossChainPausedResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryIsCrossChainPausedResponse.Merge(m, src)
}
func (m *QueryIsCrossChainPausedResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryIsCrossChainPausedResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryIsCrossChainPausedResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryIsCrossChainPausedResponse proto.InternalMessageInfo

func (m *QueryIsCrossChainPausedResponse) GetIsPaused() bool {
	if m != nil {
		return m.IsPaused
	}
	return false
}

func init() {
	proto.RegisterType((*QueryPausedProtocolsRequest)(nil), "noble.orbiter.component.forwarder.v1.QueryPausedProtocolsRequest")
	proto.RegisterType((*QueryPausedProtocolsResponse)(nil), "noble.orbiter.component.forwarder.v1.QueryPausedProtocolsResponse")
	proto.RegisterType((*QueryPausedCrossChainsRequest)(nil), "noble.orbiter.component.forwarder.v1.QueryPausedCrossChainsRequest")
	proto.RegisterType((*QueryPausedCrossChainsResponse)(nil), "noble.orbiter.component.forwarder.v1.QueryPausedCrossChainsResponse")
	proto.RegisterType((*QueryIsProtocolPausedRequest)(nil), "noble.orbiter.component.forwarder.v1.QueryIsProtocolPausedRequest")
	proto.RegisterType((*QueryIsProtocolPausedResponse)(nil), "noble.orbiter.component.forwarder.v1.QueryIsProtocolPausedResponse")
	proto.RegisterType((*QueryIsCrossChainPausedRequest)(nil), "noble.orbiter.component.forwarder.v1.QueryIsCrossChainPausedRequest")
	proto.RegisterType((*QueryIsCrossChainPausedResponse)(nil), "noble.orbiter.component.forwarder.v1.QueryIsCrossChainPausedResponse")
}

func init() {
	proto.RegisterFile("noble/orbiter/component/forwarder/v1/query.proto", fileDescriptor_aaf39c97a61ced58)
}

var fileDescriptor_aaf39c97a61ced58 = []byte{
	// 661 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x55, 0xcf, 0x4f, 0x13, 0x41,
	0x18, 0x65, 0x30, 0x28, 0x1d, 0x0c, 0x3f, 0xe6, 0x44, 0x16, 0x58, 0x70, 0x63, 0x04, 0x89, 0xce,
	0x58, 0x3c, 0x61, 0x88, 0x46, 0x8a, 0x92, 0x86, 0x0b, 0xae, 0x89, 0x07, 0x8d, 0x21, 0xb3, 0xdd,
	0xb1, 0x8c, 0xc2, 0xce, 0x32, 0x33, 0xad, 0x21, 0x84, 0x8b, 0x27, 0x12, 0x2f, 0x26, 0xfa, 0x47,
	0x78, 0xf4, 0xcf, 0x30, 0xf1, 0x42, 0xc2, 0xc5, 0xa3, 0x01, 0x12, 0xff, 0x03, 0xcf, 0x66, 0x77,
	0xa7, 0xdd, 0xed, 0x96, 0x6a, 0x6b, 0xbd, 0xf4, 0x30, 0xf3, 0xbd, 0xf7, 0xbd, 0xf7, 0xe6, 0xfb,
	0xb6, 0xf0, 0x4e, 0x20, 0xbc, 0x1d, 0x46, 0x84, 0xf4, 0xb8, 0x66, 0x92, 0x54, 0xc4, 0x6e, 0x28,
	0x02, 0x16, 0x68, 0xf2, 0x4a, 0xc8, 0xb7, 0x54, 0xfa, 0x4c, 0x92, 0x7a, 0x91, 0xec, 0xd5, 0x98,
	0xdc, 0xc7, 0xa1, 0x14, 0x5a, 0xa0, 0xeb, 0x31, 0x02, 0x1b, 0x04, 0x6e, 0x22, 0x70, 0x13, 0x81,
	0xeb, 0x45, 0x6b, 0x82, 0xee, 0xf2, 0x40, 0x90, 0xf8, 0x37, 0x01, 0x5a, 0x8b, 0x15, 0xa1, 0x76,
	0x85, 0x22, 0x1e, 0x55, 0x2c, 0x61, 0x24, 0xf5, 0xa2, 0xc7, 0x34, 0x2d, 0x92, 0x90, 0x56, 0x79,
	0x40, 0x35, 0x17, 0x81, 0xa9, 0x9d, 0x32, 0xb5, 0x8d, 0xb2, 0xac, 0x02, 0x6b, 0xba, 0x2a, 0x44,
	0x75, 0x87, 0x11, 0x1a, 0x72, 0x42, 0x83, 0x40, 0xe8, 0x18, 0xa9, 0xcc, 0xad, 0x9d, 0x77, 0x24,
	0x59, 0x44, 0xc0, 0xfd, 0xe4, 0xde, 0x99, 0x81, 0x53, 0x4f, 0x22, 0xb2, 0x4d, 0x5a, 0x53, 0xcc,
	0xdf, 0x8c, 0xce, 0x2a, 0x62, 0x47, 0xb9, 0x6c, 0xaf, 0xc6, 0x94, 0x76, 0xde, 0xc0, 0xe9, 0x8b,
	0xaf, 0x55, 0x28, 0x02, 0xc5, 0xd0, 0x06, 0xbc, 0x1a, 0x9a, 0xc3, 0x2d, 0xee, 0xab, 0x49, 0x30,
	0x77, 0x69, 0x61, 0x74, 0xe9, 0x1a, 0xce, 0xa7, 0x22, 0x19, 0xae, 0x17, 0x71, 0x03, 0x5f, 0x5e,
	0x5b, 0x1d, 0xfa, 0xfc, 0xf3, 0xcb, 0x22, 0x70, 0x47, 0x1a, 0xe8, 0xb2, 0xaf, 0x9c, 0x23, 0x00,
	0x67, 0x32, 0xdd, 0x4a, 0x52, 0x28, 0x55, 0xda, 0xa6, 0x3c, 0x68, 0xc8, 0x41, 0xb3, 0x70, 0x24,
	0xd3, 0x6e, 0x12, 0xcc, 0x81, 0x85, 0x82, 0x0b, 0x53, 0x0e, 0xf4, 0x18, 0xc2, 0x34, 0xbd, 0xc9,
	0xc1, 0x39, 0xb0, 0x30, 0xb2, 0x74, 0x03, 0x27, 0xf1, 0xe1, 0x28, 0x6a, 0x9c, 0x44, 0x67, 0xa2,
	0xc6, 0x9b, 0xb4, 0xca, 0x0c, 0xb9, 0x9b, 0x41, 0x3a, 0x9f, 0x00, 0xb4, 0x3b, 0x49, 0x31, 0xd6,
	0x6f, 0xc2, 0xf1, 0x8a, 0xa8, 0x05, 0x9a, 0xc9, 0x90, 0x4a, 0xbd, 0xdf, 0xb4, 0x5f, 0x70, 0xc7,
	0xb2, 0xe7, 0x65, 0x5f, 0xa1, 0xf5, 0x0b, 0x54, 0xcd, 0xff, 0x55, 0x55, 0xd2, 0xa7, 0x45, 0xd6,
	0x03, 0xf3, 0x1c, 0x65, 0xd5, 0x88, 0x32, 0xd1, 0xd7, 0x6d, 0x3e, 0xce, 0x8a, 0x49, 0xb8, 0x9d,
	0xc0, 0xb8, 0x9a, 0x82, 0x05, 0xae, 0xb6, 0xc2, 0xf8, 0x30, 0xc6, 0x0f, 0xbb, 0xc3, 0x5c, 0x25,
	0x45, 0xce, 0x6b, 0x13, 0x4a, 0x59, 0xa5, 0x81, 0xf4, 0x26, 0x00, 0xcd, 0xc3, 0xb1, 0x5c, 0x6a,
	0x71, 0x1e, 0x05, 0x77, 0xb4, 0x35, 0x34, 0xe7, 0x3e, 0x9c, 0xed, 0xd8, 0xab, 0x0b, 0xad, 0x4b,
	0xdf, 0xae, 0xc0, 0xa1, 0x98, 0x00, 0x9d, 0x00, 0x38, 0x96, 0x9b, 0x5f, 0xf4, 0x10, 0x77, 0xb3,
	0xb7, 0xf8, 0x0f, 0xab, 0x61, 0xad, 0xf6, 0x43, 0x91, 0x38, 0x70, 0x96, 0x8f, 0xa2, 0x2d, 0x78,
	0x77, 0x72, 0xfe, 0x71, 0x10, 0xa3, 0x5b, 0xa4, 0x75, 0x57, 0x5b, 0xbe, 0x39, 0x89, 0x4b, 0x12,
	0x36, 0x1d, 0xfc, 0x02, 0x70, 0xa2, 0x6d, 0x38, 0x51, 0xa9, 0x67, 0x51, 0xed, 0x5b, 0x66, 0xad,
	0xf5, 0x47, 0x62, 0xbc, 0x3d, 0x4b, 0xbd, 0x6d, 0xa0, 0x72, 0x2f, 0xde, 0xc8, 0x41, 0x66, 0x86,
	0x0e, 0x49, 0x66, 0x30, 0x38, 0x53, 0xe8, 0x1c, 0xc0, 0xf1, 0xfc, 0xf8, 0xa2, 0x5e, 0x1e, 0xa3,
	0xc3, 0xf2, 0x58, 0xa5, 0xbe, 0x38, 0x8c, 0xeb, 0xf5, 0xd4, 0xf5, 0x0a, 0xba, 0xf7, 0xef, 0xae,
	0xd1, 0xfb, 0x41, 0x88, 0xda, 0x67, 0x1f, 0xad, 0xf5, 0x24, 0xb2, 0xc3, 0x9a, 0x5a, 0x8f, 0xfa,
	0x64, 0x31, 0x66, 0xb7, 0x53, 0xb3, 0x2f, 0xd1, 0x8b, 0xff, 0xf6, 0xc4, 0xe4, 0x20, 0xf7, 0x89,
	0x38, 0x5c, 0x7d, 0xfa, 0xf5, 0xd4, 0x06, 0xc7, 0xa7, 0x36, 0xf8, 0x71, 0x6a, 0x83, 0x0f, 0x67,
	0xf6, 0xc0, 0xf1, 0x99, 0x3d, 0xf0, 0xfd, 0xcc, 0x1e, 0x78, 0xbe, 0x5c, 0xe5, 0x7a, 0xbb, 0xe6,
	0x45, 0x16, 0x12, 0x01, 0xb7, 0xa9, 0x52, 0x4c, 0xab, 0xa6, 0x0e, 0xbd, 0x1f, 0x32, 0x75, 0xd1,
	0x5f, 0xb9, 0x77, 0x39, 0xd6, 0x70, 0xf7, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0x5d, 0x9d, 0xdc,
	0xef, 0xf6, 0x07, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// PausedProtocols retrieves all paused protocol IDs.
	PausedProtocols(ctx context.Context, in *QueryPausedProtocolsRequest, opts ...grpc.CallOption) (*QueryPausedProtocolsResponse, error)
	// PausedCrossChains retrieves all paused counterparties for a specific protocol.
	PausedCrossChains(ctx context.Context, in *QueryPausedCrossChainsRequest, opts ...grpc.CallOption) (*QueryPausedCrossChainsResponse, error)
	// IsProtocolPaused checks if a specific protocol is paused.
	IsProtocolPaused(ctx context.Context, in *QueryIsProtocolPausedRequest, opts ...grpc.CallOption) (*QueryIsProtocolPausedResponse, error)
	// IsCrossChainPaused checks if a specific counterparty for a protocol is paused.
	IsCrossChainPaused(ctx context.Context, in *QueryIsCrossChainPausedRequest, opts ...grpc.CallOption) (*QueryIsCrossChainPausedResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) PausedProtocols(ctx context.Context, in *QueryPausedProtocolsRequest, opts ...grpc.CallOption) (*QueryPausedProtocolsResponse, error) {
	out := new(QueryPausedProtocolsResponse)
	err := c.cc.Invoke(ctx, "/noble.orbiter.component.forwarder.v1.Query/PausedProtocols", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PausedCrossChains(ctx context.Context, in *QueryPausedCrossChainsRequest, opts ...grpc.CallOption) (*QueryPausedCrossChainsResponse, error) {
	out := new(QueryPausedCrossChainsResponse)
	err := c.cc.Invoke(ctx, "/noble.orbiter.component.forwarder.v1.Query/PausedCrossChains", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) IsProtocolPaused(ctx context.Context, in *QueryIsProtocolPausedRequest, opts ...grpc.CallOption) (*QueryIsProtocolPausedResponse, error) {
	out := new(QueryIsProtocolPausedResponse)
	err := c.cc.Invoke(ctx, "/noble.orbiter.component.forwarder.v1.Query/IsProtocolPaused", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) IsCrossChainPaused(ctx context.Context, in *QueryIsCrossChainPausedRequest, opts ...grpc.CallOption) (*QueryIsCrossChainPausedResponse, error) {
	out := new(QueryIsCrossChainPausedResponse)
	err := c.cc.Invoke(ctx, "/noble.orbiter.component.forwarder.v1.Query/IsCrossChainPaused", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// PausedProtocols retrieves all paused protocol IDs.
	PausedProtocols(context.Context, *QueryPausedProtocolsRequest) (*QueryPausedProtocolsResponse, error)
	// PausedCrossChains retrieves all paused counterparties for a specific protocol.
	PausedCrossChains(context.Context, *QueryPausedCrossChainsRequest) (*QueryPausedCrossChainsResponse, error)
	// IsProtocolPaused checks if a specific protocol is paused.
	IsProtocolPaused(context.Context, *QueryIsProtocolPausedRequest) (*QueryIsProtocolPausedResponse, error)
	// IsCrossChainPaused checks if a specific counterparty for a protocol is paused.
	IsCrossChainPaused(context.Context, *QueryIsCrossChainPausedRequest) (*QueryIsCrossChainPausedResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) PausedProtocols(ctx context.Context, req *QueryPausedProtocolsRequest) (*QueryPausedProtocolsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PausedProtocols not implemented")
}
func (*UnimplementedQueryServer) PausedCrossChains(ctx context.Context, req *QueryPausedCrossChainsRequest) (*QueryPausedCrossChainsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PausedCrossChains not implemented")
}
func (*UnimplementedQueryServer) IsProtocolPaused(ctx context.Context, req *QueryIsProtocolPausedRequest) (*QueryIsProtocolPausedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsProtocolPaused not implemented")
}
func (*UnimplementedQueryServer) IsCrossChainPaused(ctx context.Context, req *QueryIsCrossChainPausedRequest) (*QueryIsCrossChainPausedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsCrossChainPaused not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_PausedProtocols_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPausedProtocolsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PausedProtocols(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/noble.orbiter.component.forwarder.v1.Query/PausedProtocols",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PausedProtocols(ctx, req.(*QueryPausedProtocolsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PausedCrossChains_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPausedCrossChainsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PausedCrossChains(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/noble.orbiter.component.forwarder.v1.Query/PausedCrossChains",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PausedCrossChains(ctx, req.(*QueryPausedCrossChainsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_IsProtocolPaused_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryIsProtocolPausedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).IsProtocolPaused(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/noble.orbiter.component.forwarder.v1.Query/IsProtocolPaused",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).IsProtocolPaused(ctx, req.(*QueryIsProtocolPausedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_IsCrossChainPaused_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryIsCrossChainPausedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).IsCrossChainPaused(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/noble.orbiter.component.forwarder.v1.Query/IsCrossChainPaused",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).IsCrossChainPaused(ctx, req.(*QueryIsCrossChainPausedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var Query_serviceDesc = _Query_serviceDesc
var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "noble.orbiter.component.forwarder.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PausedProtocols",
			Handler:    _Query_PausedProtocols_Handler,
		},
		{
			MethodName: "PausedCrossChains",
			Handler:    _Query_PausedCrossChains_Handler,
		},
		{
			MethodName: "IsProtocolPaused",
			Handler:    _Query_IsProtocolPaused_Handler,
		},
		{
			MethodName: "IsCrossChainPaused",
			Handler:    _Query_IsCrossChainPaused_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "noble/orbiter/component/forwarder/v1/query.proto",
}

func (m *QueryPausedProtocolsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPausedProtocolsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPausedProtocolsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryPausedProtocolsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPausedProtocolsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPausedProtocolsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ProtocolIds) > 0 {
		dAtA2 := make([]byte, len(m.ProtocolIds)*10)
		var j1 int
		for _, num := range m.ProtocolIds {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintQuery(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryPausedCrossChainsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPausedCrossChainsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPausedCrossChainsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ProtocolId) > 0 {
		i -= len(m.ProtocolId)
		copy(dAtA[i:], m.ProtocolId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ProtocolId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryPausedCrossChainsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPausedCrossChainsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPausedCrossChainsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.CounterpartyIds) > 0 {
		for iNdEx := len(m.CounterpartyIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.CounterpartyIds[iNdEx])
			copy(dAtA[i:], m.CounterpartyIds[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.CounterpartyIds[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryIsProtocolPausedRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryIsProtocolPausedRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryIsProtocolPausedRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ProtocolId) > 0 {
		i -= len(m.ProtocolId)
		copy(dAtA[i:], m.ProtocolId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ProtocolId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryIsProtocolPausedResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryIsProtocolPausedResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryIsProtocolPausedResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsPaused {
		i--
		if m.IsPaused {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryIsCrossChainPausedRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryIsCrossChainPausedRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryIsCrossChainPausedRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CounterpartyId) > 0 {
		i -= len(m.CounterpartyId)
		copy(dAtA[i:], m.CounterpartyId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.CounterpartyId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ProtocolId) > 0 {
		i -= len(m.ProtocolId)
		copy(dAtA[i:], m.ProtocolId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ProtocolId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryIsCrossChainPausedResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryIsCrossChainPausedResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryIsCrossChainPausedResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsPaused {
		i--
		if m.IsPaused {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryPausedProtocolsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryPausedProtocolsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ProtocolIds) > 0 {
		l = 0
		for _, e := range m.ProtocolIds {
			l += sovQuery(uint64(e))
		}
		n += 1 + sovQuery(uint64(l)) + l
	}
	return n
}

func (m *QueryPausedCrossChainsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ProtocolId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryPausedCrossChainsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CounterpartyIds) > 0 {
		for _, s := range m.CounterpartyIds {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryIsProtocolPausedRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ProtocolId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryIsProtocolPausedResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsPaused {
		n += 2
	}
	return n
}

func (m *QueryIsCrossChainPausedRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ProtocolId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.CounterpartyId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryIsCrossChainPausedResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsPaused {
		n += 2
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryPausedProtocolsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPausedProtocolsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPausedProtocolsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPausedProtocolsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPausedProtocolsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPausedProtocolsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v core.ProtocolID
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= core.ProtocolID(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ProtocolIds = append(m.ProtocolIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthQuery
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthQuery
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.ProtocolIds) == 0 {
					m.ProtocolIds = make([]core.ProtocolID, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v core.ProtocolID
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowQuery
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= core.ProtocolID(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ProtocolIds = append(m.ProtocolIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ProtocolIds", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPausedCrossChainsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPausedCrossChainsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPausedCrossChainsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProtocolId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProtocolId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPausedCrossChainsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPausedCrossChainsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPausedCrossChainsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CounterpartyIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CounterpartyIds = append(m.CounterpartyIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryIsProtocolPausedRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryIsProtocolPausedRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryIsProtocolPausedRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProtocolId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProtocolId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryIsProtocolPausedResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryIsProtocolPausedResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryIsProtocolPausedResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsPaused", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsPaused = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryIsCrossChainPausedRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryIsCrossChainPausedRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryIsCrossChainPausedRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProtocolId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProtocolId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CounterpartyId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CounterpartyId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryIsCrossChainPausedResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryIsCrossChainPausedResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryIsCrossChainPausedResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsPaused", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsPaused = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
