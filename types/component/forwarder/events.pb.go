// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: noble/orbiter/component/forwarder/v1/events.proto

package forwarder

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	core "github.com/noble-assets/orbiter/types/core"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type EventProtocolPaused struct {
	ProtocolId core.ProtocolID `protobuf:"varint,1,opt,name=protocol_id,json=protocolId,proto3,enum=noble.orbiter.core.v1.ProtocolID" json:"protocol_id,omitempty"`
}

func (m *EventProtocolPaused) Reset()         { *m = EventProtocolPaused{} }
func (m *EventProtocolPaused) String() string { return proto.CompactTextString(m) }
func (*EventProtocolPaused) ProtoMessage()    {}
func (*EventProtocolPaused) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3632f52c6dd5491, []int{0}
}
func (m *EventProtocolPaused) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventProtocolPaused) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventProtocolPaused.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventProtocolPaused) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventProtocolPaused.Merge(m, src)
}
func (m *EventProtocolPaused) XXX_Size() int {
	return m.Size()
}
func (m *EventProtocolPaused) XXX_DiscardUnknown() {
	xxx_messageInfo_EventProtocolPaused.DiscardUnknown(m)
}

var xxx_messageInfo_EventProtocolPaused proto.InternalMessageInfo

func (m *EventProtocolPaused) GetProtocolId() core.ProtocolID {
	if m != nil {
		return m.ProtocolId
	}
	return core.PROTOCOL_UNSUPPORTED
}

// TODO: potentially also rename to a better wording instead of "Unpause"?
type EventProtocolUnpaused struct {
	ProtocolId core.ProtocolID `protobuf:"varint,1,opt,name=protocol_id,json=protocolId,proto3,enum=noble.orbiter.core.v1.ProtocolID" json:"protocol_id,omitempty"`
}

func (m *EventProtocolUnpaused) Reset()         { *m = EventProtocolUnpaused{} }
func (m *EventProtocolUnpaused) String() string { return proto.CompactTextString(m) }
func (*EventProtocolUnpaused) ProtoMessage()    {}
func (*EventProtocolUnpaused) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3632f52c6dd5491, []int{1}
}
func (m *EventProtocolUnpaused) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventProtocolUnpaused) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventProtocolUnpaused.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventProtocolUnpaused) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventProtocolUnpaused.Merge(m, src)
}
func (m *EventProtocolUnpaused) XXX_Size() int {
	return m.Size()
}
func (m *EventProtocolUnpaused) XXX_DiscardUnknown() {
	xxx_messageInfo_EventProtocolUnpaused.DiscardUnknown(m)
}

var xxx_messageInfo_EventProtocolUnpaused proto.InternalMessageInfo

func (m *EventProtocolUnpaused) GetProtocolId() core.ProtocolID {
	if m != nil {
		return m.ProtocolId
	}
	return core.PROTOCOL_UNSUPPORTED
}

type EventCrossChainsPaused struct {
	ProtocolId      core.ProtocolID `protobuf:"varint,1,opt,name=protocol_id,json=protocolId,proto3,enum=noble.orbiter.core.v1.ProtocolID" json:"protocol_id,omitempty"`
	CounterpartyIds []string        `protobuf:"bytes,2,rep,name=counterparty_ids,json=counterpartyIds,proto3" json:"counterparty_ids,omitempty"`
}

func (m *EventCrossChainsPaused) Reset()         { *m = EventCrossChainsPaused{} }
func (m *EventCrossChainsPaused) String() string { return proto.CompactTextString(m) }
func (*EventCrossChainsPaused) ProtoMessage()    {}
func (*EventCrossChainsPaused) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3632f52c6dd5491, []int{2}
}
func (m *EventCrossChainsPaused) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventCrossChainsPaused) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventCrossChainsPaused.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventCrossChainsPaused) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventCrossChainsPaused.Merge(m, src)
}
func (m *EventCrossChainsPaused) XXX_Size() int {
	return m.Size()
}
func (m *EventCrossChainsPaused) XXX_DiscardUnknown() {
	xxx_messageInfo_EventCrossChainsPaused.DiscardUnknown(m)
}

var xxx_messageInfo_EventCrossChainsPaused proto.InternalMessageInfo

func (m *EventCrossChainsPaused) GetProtocolId() core.ProtocolID {
	if m != nil {
		return m.ProtocolId
	}
	return core.PROTOCOL_UNSUPPORTED
}

func (m *EventCrossChainsPaused) GetCounterpartyIds() []string {
	if m != nil {
		return m.CounterpartyIds
	}
	return nil
}

type EventCrossChainsUnpaused struct {
	ProtocolId      core.ProtocolID `protobuf:"varint,1,opt,name=protocol_id,json=protocolId,proto3,enum=noble.orbiter.core.v1.ProtocolID" json:"protocol_id,omitempty"`
	CounterpartyIds []string        `protobuf:"bytes,2,rep,name=counterparty_ids,json=counterpartyIds,proto3" json:"counterparty_ids,omitempty"`
}

func (m *EventCrossChainsUnpaused) Reset()         { *m = EventCrossChainsUnpaused{} }
func (m *EventCrossChainsUnpaused) String() string { return proto.CompactTextString(m) }
func (*EventCrossChainsUnpaused) ProtoMessage()    {}
func (*EventCrossChainsUnpaused) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3632f52c6dd5491, []int{3}
}
func (m *EventCrossChainsUnpaused) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventCrossChainsUnpaused) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventCrossChainsUnpaused.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventCrossChainsUnpaused) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventCrossChainsUnpaused.Merge(m, src)
}
func (m *EventCrossChainsUnpaused) XXX_Size() int {
	return m.Size()
}
func (m *EventCrossChainsUnpaused) XXX_DiscardUnknown() {
	xxx_messageInfo_EventCrossChainsUnpaused.DiscardUnknown(m)
}

var xxx_messageInfo_EventCrossChainsUnpaused proto.InternalMessageInfo

func (m *EventCrossChainsUnpaused) GetProtocolId() core.ProtocolID {
	if m != nil {
		return m.ProtocolId
	}
	return core.PROTOCOL_UNSUPPORTED
}

func (m *EventCrossChainsUnpaused) GetCounterpartyIds() []string {
	if m != nil {
		return m.CounterpartyIds
	}
	return nil
}

func init() {
	proto.RegisterType((*EventProtocolPaused)(nil), "noble.orbiter.component.forwarder.v1.EventProtocolPaused")
	proto.RegisterType((*EventProtocolUnpaused)(nil), "noble.orbiter.component.forwarder.v1.EventProtocolUnpaused")
	proto.RegisterType((*EventCrossChainsPaused)(nil), "noble.orbiter.component.forwarder.v1.EventCrossChainsPaused")
	proto.RegisterType((*EventCrossChainsUnpaused)(nil), "noble.orbiter.component.forwarder.v1.EventCrossChainsUnpaused")
}

func init() {
	proto.RegisterFile("noble/orbiter/component/forwarder/v1/events.proto", fileDescriptor_e3632f52c6dd5491)
}

var fileDescriptor_e3632f52c6dd5491 = []byte{
	// 299 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x92, 0x31, 0x4b, 0xc3, 0x40,
	0x18, 0x86, 0x7b, 0x0a, 0x82, 0x27, 0xa8, 0x54, 0x94, 0xe0, 0x70, 0xd4, 0xe0, 0x50, 0x07, 0xef,
	0x88, 0x4e, 0xae, 0xad, 0x0e, 0xd9, 0x4a, 0xc5, 0x41, 0x1d, 0x4a, 0x92, 0xfb, 0xb4, 0x07, 0xf5,
	0xee, 0xb8, 0xbb, 0x44, 0xfa, 0x0b, 0xc4, 0xcd, 0x9f, 0xe5, 0xd8, 0xd1, 0x51, 0x92, 0x3f, 0x22,
	0x89, 0x6d, 0xd0, 0xe0, 0x22, 0x64, 0xbc, 0x0f, 0x9e, 0xe7, 0x7d, 0x0f, 0x5e, 0x1c, 0x48, 0x15,
	0xcf, 0x80, 0x29, 0x13, 0x0b, 0x07, 0x86, 0x25, 0xea, 0x49, 0x2b, 0x09, 0xd2, 0xb1, 0x07, 0x65,
	0x9e, 0x23, 0xc3, 0xc1, 0xb0, 0x2c, 0x60, 0x90, 0x81, 0x74, 0x96, 0x6a, 0xa3, 0x9c, 0xea, 0x1e,
	0x57, 0x08, 0x5d, 0x22, 0xb4, 0x46, 0x68, 0x8d, 0xd0, 0x2c, 0x38, 0x24, 0x4d, 0xb1, 0x81, 0xd2,
	0x24, 0xf8, 0xb7, 0xc5, 0xbf, 0xc5, 0x7b, 0x57, 0xa5, 0x75, 0x54, 0xbe, 0x12, 0x35, 0x1b, 0x45,
	0xa9, 0x05, 0xde, 0x1d, 0xe0, 0x2d, 0xbd, 0xbc, 0x4c, 0x04, 0xf7, 0x50, 0x0f, 0xf5, 0xb7, 0xcf,
	0x8e, 0x68, 0x33, 0xd2, 0x00, 0xcd, 0x02, 0xba, 0x62, 0xc3, 0xcb, 0x31, 0x5e, 0x51, 0x21, 0xf7,
	0xef, 0xf1, 0xfe, 0x2f, 0xf5, 0x8d, 0xd4, 0xed, 0xc9, 0x5f, 0x10, 0x3e, 0xa8, 0xec, 0x43, 0xa3,
	0xac, 0x1d, 0x4e, 0x23, 0x21, 0x6d, 0x7b, 0xdd, 0xbb, 0x27, 0x78, 0x37, 0x51, 0xa9, 0x74, 0x60,
	0x74, 0x64, 0xdc, 0x7c, 0x22, 0xb8, 0xf5, 0xd6, 0x7a, 0xeb, 0xfd, 0xcd, 0xf1, 0xce, 0xcf, 0x7b,
	0xc8, 0xad, 0xff, 0x8a, 0xb0, 0xd7, 0x6c, 0xd2, 0xe6, 0x57, 0xff, 0xd1, 0x65, 0x70, 0xfd, 0x9e,
	0x13, 0xb4, 0xc8, 0x09, 0xfa, 0xcc, 0x09, 0x7a, 0x2b, 0x48, 0x67, 0x51, 0x90, 0xce, 0x47, 0x41,
	0x3a, 0x77, 0x17, 0x8f, 0xc2, 0x4d, 0xd3, 0xb8, 0x9c, 0x09, 0xab, 0xd2, 0x4f, 0x23, 0x6b, 0xc1,
	0xd9, 0x7a, 0x19, 0x6e, 0xae, 0xc1, 0xfe, 0x35, 0xbc, 0x78, 0xa3, 0xea, 0x72, 0xfe, 0x15, 0x00,
	0x00, 0xff, 0xff, 0x12, 0x44, 0x8b, 0x69, 0xa4, 0x02, 0x00, 0x00,
}

func (m *EventProtocolPaused) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventProtocolPaused) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventProtocolPaused) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ProtocolId != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.ProtocolId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventProtocolUnpaused) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventProtocolUnpaused) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventProtocolUnpaused) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ProtocolId != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.ProtocolId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventCrossChainsPaused) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventCrossChainsPaused) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventCrossChainsPaused) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CounterpartyIds) > 0 {
		for iNdEx := len(m.CounterpartyIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.CounterpartyIds[iNdEx])
			copy(dAtA[i:], m.CounterpartyIds[iNdEx])
			i = encodeVarintEvents(dAtA, i, uint64(len(m.CounterpartyIds[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.ProtocolId != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.ProtocolId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventCrossChainsUnpaused) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventCrossChainsUnpaused) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventCrossChainsUnpaused) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CounterpartyIds) > 0 {
		for iNdEx := len(m.CounterpartyIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.CounterpartyIds[iNdEx])
			copy(dAtA[i:], m.CounterpartyIds[iNdEx])
			i = encodeVarintEvents(dAtA, i, uint64(len(m.CounterpartyIds[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.ProtocolId != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.ProtocolId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintEvents(dAtA []byte, offset int, v uint64) int {
	offset -= sovEvents(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EventProtocolPaused) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProtocolId != 0 {
		n += 1 + sovEvents(uint64(m.ProtocolId))
	}
	return n
}

func (m *EventProtocolUnpaused) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProtocolId != 0 {
		n += 1 + sovEvents(uint64(m.ProtocolId))
	}
	return n
}

func (m *EventCrossChainsPaused) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProtocolId != 0 {
		n += 1 + sovEvents(uint64(m.ProtocolId))
	}
	if len(m.CounterpartyIds) > 0 {
		for _, s := range m.CounterpartyIds {
			l = len(s)
			n += 1 + l + sovEvents(uint64(l))
		}
	}
	return n
}

func (m *EventCrossChainsUnpaused) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProtocolId != 0 {
		n += 1 + sovEvents(uint64(m.ProtocolId))
	}
	if len(m.CounterpartyIds) > 0 {
		for _, s := range m.CounterpartyIds {
			l = len(s)
			n += 1 + l + sovEvents(uint64(l))
		}
	}
	return n
}

func sovEvents(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEvents(x uint64) (n int) {
	return sovEvents(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EventProtocolPaused) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventProtocolPaused: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventProtocolPaused: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProtocolId", wireType)
			}
			m.ProtocolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProtocolId |= core.ProtocolID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventProtocolUnpaused) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventProtocolUnpaused: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventProtocolUnpaused: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProtocolId", wireType)
			}
			m.ProtocolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProtocolId |= core.ProtocolID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventCrossChainsPaused) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventCrossChainsPaused: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventCrossChainsPaused: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProtocolId", wireType)
			}
			m.ProtocolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProtocolId |= core.ProtocolID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CounterpartyIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CounterpartyIds = append(m.CounterpartyIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventCrossChainsUnpaused) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventCrossChainsUnpaused: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventCrossChainsUnpaused: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProtocolId", wireType)
			}
			m.ProtocolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProtocolId |= core.ProtocolID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CounterpartyIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CounterpartyIds = append(m.CounterpartyIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvents(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEvents
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEvents
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEvents
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEvents        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvents          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEvents = fmt.Errorf("proto: unexpected end of group")
)
