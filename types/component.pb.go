// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: noble/orbiter/v1/component.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// AdapterParams represents the adapter components parameters.
type AdapterParams struct {
	// max_passthrough_payload_size is the maximum size of the passthrough
	// payload that can be send in a forwarding.
	MaxPassthroughPayloadSize uint32 `protobuf:"varint,1,opt,name=max_passthrough_payload_size,json=maxPassthroughPayloadSize,proto3" json:"max_passthrough_payload_size,omitempty"`
}

func (m *AdapterParams) Reset()         { *m = AdapterParams{} }
func (m *AdapterParams) String() string { return proto.CompactTextString(m) }
func (*AdapterParams) ProtoMessage()    {}
func (*AdapterParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_043c833eaa31f7ac, []int{0}
}
func (m *AdapterParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AdapterParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AdapterParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AdapterParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdapterParams.Merge(m, src)
}
func (m *AdapterParams) XXX_Size() int {
	return m.Size()
}
func (m *AdapterParams) XXX_DiscardUnknown() {
	xxx_messageInfo_AdapterParams.DiscardUnknown(m)
}

var xxx_messageInfo_AdapterParams proto.InternalMessageInfo

func (m *AdapterParams) GetMaxPassthroughPayloadSize() uint32 {
	if m != nil {
		return m.MaxPassthroughPayloadSize
	}
	return 0
}

func init() {
	proto.RegisterType((*AdapterParams)(nil), "noble.orbiter.v1.AdapterParams")
}

func init() { proto.RegisterFile("noble/orbiter/v1/component.proto", fileDescriptor_043c833eaa31f7ac) }

var fileDescriptor_043c833eaa31f7ac = []byte{
	// 203 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0xc8, 0xcb, 0x4f, 0xca,
	0x49, 0xd5, 0xcf, 0x2f, 0x4a, 0xca, 0x2c, 0x49, 0x2d, 0xd2, 0x2f, 0x33, 0xd4, 0x4f, 0xce, 0xcf,
	0x2d, 0xc8, 0xcf, 0x4b, 0xcd, 0x2b, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x12, 0x00, 0xab,
	0xd0, 0x83, 0xaa, 0xd0, 0x2b, 0x33, 0x94, 0x12, 0x4c, 0xcc, 0xcd, 0xcc, 0xcb, 0xd7, 0x07, 0x93,
	0x10, 0x45, 0x4a, 0xe1, 0x5c, 0xbc, 0x8e, 0x29, 0x89, 0x05, 0x25, 0xa9, 0x45, 0x01, 0x89, 0x45,
	0x89, 0xb9, 0xc5, 0x42, 0x6e, 0x5c, 0x32, 0xb9, 0x89, 0x15, 0xf1, 0x05, 0x89, 0xc5, 0xc5, 0x25,
	0x19, 0x45, 0xf9, 0xa5, 0xe9, 0x19, 0xf1, 0x05, 0x89, 0x95, 0x39, 0xf9, 0x89, 0x29, 0xf1, 0xc5,
	0x99, 0x55, 0xa9, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0xbc, 0x4e, 0xac, 0x2b, 0x9e, 0x6f, 0xd0, 0x62,
	0x0c, 0x92, 0xcc, 0x4d, 0xac, 0x08, 0x40, 0xa8, 0x0c, 0x80, 0x28, 0x0c, 0xce, 0xac, 0x4a, 0x75,
	0xd2, 0x3e, 0xf1, 0x48, 0x8e, 0xf1, 0xc2, 0x23, 0x39, 0xc6, 0x07, 0x8f, 0xe4, 0x18, 0x27, 0x3c,
	0x96, 0x63, 0xb8, 0xf0, 0x58, 0x8e, 0xe1, 0xc6, 0x63, 0x39, 0x86, 0x28, 0x41, 0x98, 0x8b, 0x52,
	0x52, 0xcb, 0xf4, 0x4b, 0x2a, 0x0b, 0x52, 0x8b, 0x93, 0xd8, 0xc0, 0x8e, 0x31, 0x06, 0x04, 0x00,
	0x00, 0xff, 0xff, 0xc1, 0x5f, 0x8e, 0x3f, 0xd5, 0x00, 0x00, 0x00,
}

func (m *AdapterParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdapterParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AdapterParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MaxPassthroughPayloadSize != 0 {
		i = encodeVarintComponent(dAtA, i, uint64(m.MaxPassthroughPayloadSize))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintComponent(dAtA []byte, offset int, v uint64) int {
	offset -= sovComponent(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AdapterParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MaxPassthroughPayloadSize != 0 {
		n += 1 + sovComponent(uint64(m.MaxPassthroughPayloadSize))
	}
	return n
}

func sovComponent(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozComponent(x uint64) (n int) {
	return sovComponent(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AdapterParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComponent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AdapterParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AdapterParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxPassthroughPayloadSize", wireType)
			}
			m.MaxPassthroughPayloadSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComponent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxPassthroughPayloadSize |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipComponent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthComponent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipComponent(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowComponent
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowComponent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowComponent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthComponent
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupComponent
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthComponent
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthComponent        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowComponent          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupComponent = fmt.Errorf("proto: unexpected end of group")
)
