// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: noble/orbiter/core/v1/orbiter.proto

package core

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	types "github.com/cosmos/cosmos-sdk/codec/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Action represents a pre-processing step to be executed on a transfer
// before routing to the destination counterparty.
//
// Actions contain an ID that specifies the type of action and attributes
// that provide action-specific configuration. The attributes field uses
// the Any type to allow for different action implementations while
// maintaining type safety through interface constraints.
type Action struct {
	// id specifies the type of action to be performed.
	// This determines how the attributes field should be interpreted.
	Id ActionID `protobuf:"varint,1,opt,name=id,proto3,enum=noble.orbiter.core.v1.ActionID" json:"id,omitempty"`
	// attributes contains the action-specific configuration data.
	// The actual type depends on the action ID and must implement
	// the `ActionAttributes` interface.
	Attributes *types.Any `protobuf:"bytes,2,opt,name=attributes,proto3" json:"attributes,omitempty"`
}

func (m *Action) Reset()         { *m = Action{} }
func (m *Action) String() string { return proto.CompactTextString(m) }
func (*Action) ProtoMessage()    {}
func (*Action) Descriptor() ([]byte, []int) {
	return fileDescriptor_24aab38bf890c9f2, []int{0}
}
func (m *Action) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Action) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Action.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Action) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Action.Merge(m, src)
}
func (m *Action) XXX_Size() int {
	return m.Size()
}
func (m *Action) XXX_DiscardUnknown() {
	xxx_messageInfo_Action.DiscardUnknown(m)
}

var xxx_messageInfo_Action proto.InternalMessageInfo

// Forwarding contains the information for a cross-chain forwarding.
type Forwarding struct {
	// protocol_id specifies the bridging protocol type to use
	// to route incoming funds to a destination chain.
	ProtocolId ProtocolID `protobuf:"varint,1,opt,name=protocol_id,json=protocolId,proto3,enum=noble.orbiter.core.v1.ProtocolID" json:"protocol_id,omitempty"`
	// attributes contains protocol-specific configuration data.
	// The actual type depends on the protocol ID and must implement
	// the `ForwardingAttributes` interface.
	Attributes *types.Any `protobuf:"bytes,2,opt,name=attributes,proto3" json:"attributes,omitempty"`
	// passthrough_payload allows to pass additional metadata
	// to the destination chain. This field is not interpreted by
	// the orbiter module.
	PassthroughPayload []byte `protobuf:"bytes,3,opt,name=passthrough_payload,json=passthroughPayload,proto3" json:"passthrough_payload,omitempty"`
}

func (m *Forwarding) Reset()         { *m = Forwarding{} }
func (m *Forwarding) String() string { return proto.CompactTextString(m) }
func (*Forwarding) ProtoMessage()    {}
func (*Forwarding) Descriptor() ([]byte, []int) {
	return fileDescriptor_24aab38bf890c9f2, []int{1}
}
func (m *Forwarding) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Forwarding) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Forwarding.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Forwarding) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Forwarding.Merge(m, src)
}
func (m *Forwarding) XXX_Size() int {
	return m.Size()
}
func (m *Forwarding) XXX_DiscardUnknown() {
	xxx_messageInfo_Forwarding.DiscardUnknown(m)
}

var xxx_messageInfo_Forwarding proto.InternalMessageInfo

// Payload represents the data the x/orbiter module
// requires to handle cross-chain packets.
type Payload struct {
	// pre_actions are a list of actions the orbiter module can interpret
	// and executes before completing the cross-chain routing.
	PreActions []*Action `protobuf:"bytes,1,rep,name=pre_actions,json=preActions,proto3" json:"pre_actions,omitempty"`
	// forwarding contains the required information to complete a cross-chain
	// routing through an orbiter-supported protocol.
	Forwarding *Forwarding `protobuf:"bytes,2,opt,name=forwarding,proto3" json:"forwarding,omitempty"`
}

func (m *Payload) Reset()         { *m = Payload{} }
func (m *Payload) String() string { return proto.CompactTextString(m) }
func (*Payload) ProtoMessage()    {}
func (*Payload) Descriptor() ([]byte, []int) {
	return fileDescriptor_24aab38bf890c9f2, []int{2}
}
func (m *Payload) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Payload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Payload.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Payload) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Payload.Merge(m, src)
}
func (m *Payload) XXX_Size() int {
	return m.Size()
}
func (m *Payload) XXX_DiscardUnknown() {
	xxx_messageInfo_Payload.DiscardUnknown(m)
}

var xxx_messageInfo_Payload proto.InternalMessageInfo

func (m *Payload) GetPreActions() []*Action {
	if m != nil {
		return m.PreActions
	}
	return nil
}

func (m *Payload) GetForwarding() *Forwarding {
	if m != nil {
		return m.Forwarding
	}
	return nil
}

// PayloadWrapper defines the expected JSON structure the module expect when receiving
// the payload from protocols encoding metadata as string. This wrapper is used to
// easily identify if the metadata containing the payload is correctly defined.
type PayloadWrapper struct {
	// orbiter represents the orbiter payload containing cross-chain
	// routing info and possibly pre routing actions.
	Orbiter *Payload `protobuf:"bytes,1,opt,name=orbiter,proto3" json:"orbiter,omitempty"`
}

func (m *PayloadWrapper) Reset()         { *m = PayloadWrapper{} }
func (m *PayloadWrapper) String() string { return proto.CompactTextString(m) }
func (*PayloadWrapper) ProtoMessage()    {}
func (*PayloadWrapper) Descriptor() ([]byte, []int) {
	return fileDescriptor_24aab38bf890c9f2, []int{3}
}
func (m *PayloadWrapper) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PayloadWrapper) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PayloadWrapper.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PayloadWrapper) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PayloadWrapper.Merge(m, src)
}
func (m *PayloadWrapper) XXX_Size() int {
	return m.Size()
}
func (m *PayloadWrapper) XXX_DiscardUnknown() {
	xxx_messageInfo_PayloadWrapper.DiscardUnknown(m)
}

var xxx_messageInfo_PayloadWrapper proto.InternalMessageInfo

func (m *PayloadWrapper) GetOrbiter() *Payload {
	if m != nil {
		return m.Orbiter
	}
	return nil
}

func init() {
	proto.RegisterType((*Action)(nil), "noble.orbiter.core.v1.Action")
	proto.RegisterType((*Forwarding)(nil), "noble.orbiter.core.v1.Forwarding")
	proto.RegisterType((*Payload)(nil), "noble.orbiter.core.v1.Payload")
	proto.RegisterType((*PayloadWrapper)(nil), "noble.orbiter.core.v1.PayloadWrapper")
}

func init() {
	proto.RegisterFile("noble/orbiter/core/v1/orbiter.proto", fileDescriptor_24aab38bf890c9f2)
}

var fileDescriptor_24aab38bf890c9f2 = []byte{
	// 435 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0x31, 0x6f, 0xd3, 0x40,
	0x14, 0xc7, 0x73, 0x29, 0x6a, 0xa5, 0x0b, 0xea, 0x70, 0x14, 0x94, 0x56, 0xe2, 0x6a, 0x42, 0x07,
	0x2f, 0xbd, 0xa3, 0x61, 0x41, 0x0c, 0x48, 0x89, 0x2a, 0xa4, 0x30, 0x55, 0x5e, 0x90, 0x3a, 0x10,
	0x9d, 0xe3, 0xab, 0x6b, 0xc9, 0xf8, 0x59, 0x77, 0x97, 0x20, 0x7f, 0x03, 0x06, 0x06, 0x76, 0x16,
	0x3e, 0x44, 0x3f, 0x04, 0xea, 0xd4, 0x91, 0x11, 0x25, 0x03, 0x5f, 0x03, 0xf9, 0xee, 0x9c, 0x46,
	0xc8, 0x41, 0x6c, 0x7e, 0xef, 0xfd, 0xff, 0x4f, 0xbf, 0xff, 0x3b, 0xe3, 0xe7, 0x05, 0xc4, 0xb9,
	0xe4, 0xa0, 0xe2, 0xcc, 0x48, 0xc5, 0x67, 0xa0, 0x24, 0x5f, 0x9c, 0x35, 0x35, 0x2b, 0x15, 0x18,
	0x20, 0x8f, 0xad, 0x88, 0x35, 0xcd, 0x5a, 0xc4, 0x16, 0x67, 0x47, 0x87, 0x33, 0xd0, 0x1f, 0x41,
	0x4f, 0xad, 0x88, 0xbb, 0xc2, 0x39, 0x8e, 0x0e, 0x52, 0x48, 0xc1, 0xf5, 0xeb, 0x2f, 0xdf, 0x3d,
	0x4c, 0x01, 0xd2, 0x5c, 0x72, 0x5b, 0xc5, 0xf3, 0x2b, 0x2e, 0x8a, 0xca, 0x8f, 0x68, 0x3b, 0x47,
	0x96, 0xb8, 0xf9, 0xe0, 0x1b, 0xc2, 0xbb, 0xa3, 0x99, 0xc9, 0xa0, 0x20, 0x1c, 0x77, 0xb3, 0xa4,
	0x8f, 0x02, 0x14, 0xee, 0x0f, 0x8f, 0x59, 0x2b, 0x1a, 0x73, 0xd2, 0xc9, 0x79, 0xd4, 0xcd, 0x12,
	0x72, 0x89, 0xb1, 0x30, 0x46, 0x65, 0xf1, 0xdc, 0x48, 0xdd, 0xef, 0x06, 0x28, 0xec, 0x0d, 0x0f,
	0x98, 0x63, 0x61, 0x0d, 0x0b, 0x1b, 0x15, 0xd5, 0xf8, 0xe4, 0xf6, 0xe6, 0x34, 0x68, 0xdf, 0x35,
	0x5a, 0x6f, 0x88, 0x36, 0xb6, 0xbd, 0x7e, 0xf0, 0xf9, 0xfb, 0x71, 0x67, 0xf0, 0x1b, 0x61, 0xfc,
	0x16, 0xd4, 0x27, 0xa1, 0x92, 0xac, 0x48, 0xc9, 0x18, 0xf7, 0xec, 0xda, 0x19, 0xe4, 0xd3, 0x35,
	0xea, 0xb3, 0x2d, 0xa8, 0x17, 0x5e, 0x39, 0x39, 0x8f, 0x70, 0xe3, 0x9a, 0x24, 0xe4, 0xc3, 0x7f,
	0x43, 0x87, 0xb7, 0x37, 0xa7, 0x27, 0x7f, 0x6f, 0xbd, 0xa7, 0x69, 0x07, 0x27, 0x1c, 0x3f, 0x2a,
	0x85, 0xd6, 0xe6, 0x5a, 0xc1, 0x3c, 0xbd, 0x9e, 0x96, 0xa2, 0xca, 0x41, 0x24, 0xfd, 0x9d, 0x00,
	0x85, 0x0f, 0x23, 0xb2, 0x31, 0xba, 0x70, 0x13, 0x9f, 0xf4, 0x0b, 0xc2, 0x7b, 0xbe, 0x43, 0xde,
	0xd4, 0x31, 0xe5, 0x54, 0xd8, 0xfb, 0xe8, 0x3e, 0x0a, 0x76, 0xc2, 0xde, 0xf0, 0xe9, 0x3f, 0x5f,
	0xa4, 0x8e, 0x28, 0xdd, 0xa7, 0x26, 0x23, 0x8c, 0xaf, 0xd6, 0x98, 0x3e, 0xe2, 0xb6, 0x2b, 0xdd,
	0xe7, 0x89, 0x36, 0x4c, 0x83, 0x77, 0x78, 0xdf, 0xd3, 0xbc, 0x57, 0xa2, 0x2c, 0xa5, 0x22, 0xaf,
	0xf0, 0x9e, 0xf7, 0xda, 0xbb, 0xf7, 0x86, 0x74, 0xdb, 0xdd, 0x9d, 0x2f, 0x6a, 0xe4, 0xe3, 0x17,
	0x3f, 0x96, 0x14, 0xdd, 0x2d, 0x29, 0xfa, 0xb5, 0xa4, 0xe8, 0xeb, 0x8a, 0x76, 0xee, 0x56, 0xb4,
	0xf3, 0x73, 0x45, 0x3b, 0x97, 0x4f, 0x1a, 0x6f, 0x22, 0x17, 0xdc, 0x54, 0xa5, 0xd4, 0xf6, 0x07,
	0x8d, 0x77, 0xed, 0x3b, 0xbc, 0xfc, 0x13, 0x00, 0x00, 0xff, 0xff, 0x5b, 0x47, 0xea, 0xc6, 0x45,
	0x03, 0x00, 0x00,
}

func (m *Action) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Action) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Action) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Attributes != nil {
		{
			size, err := m.Attributes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOrbiter(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintOrbiter(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Forwarding) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Forwarding) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Forwarding) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PassthroughPayload) > 0 {
		i -= len(m.PassthroughPayload)
		copy(dAtA[i:], m.PassthroughPayload)
		i = encodeVarintOrbiter(dAtA, i, uint64(len(m.PassthroughPayload)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Attributes != nil {
		{
			size, err := m.Attributes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOrbiter(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.ProtocolId != 0 {
		i = encodeVarintOrbiter(dAtA, i, uint64(m.ProtocolId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Payload) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Payload) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Payload) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Forwarding != nil {
		{
			size, err := m.Forwarding.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOrbiter(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.PreActions) > 0 {
		for iNdEx := len(m.PreActions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PreActions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintOrbiter(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *PayloadWrapper) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PayloadWrapper) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PayloadWrapper) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Orbiter != nil {
		{
			size, err := m.Orbiter.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOrbiter(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintOrbiter(dAtA []byte, offset int, v uint64) int {
	offset -= sovOrbiter(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Action) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovOrbiter(uint64(m.Id))
	}
	if m.Attributes != nil {
		l = m.Attributes.Size()
		n += 1 + l + sovOrbiter(uint64(l))
	}
	return n
}

func (m *Forwarding) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProtocolId != 0 {
		n += 1 + sovOrbiter(uint64(m.ProtocolId))
	}
	if m.Attributes != nil {
		l = m.Attributes.Size()
		n += 1 + l + sovOrbiter(uint64(l))
	}
	l = len(m.PassthroughPayload)
	if l > 0 {
		n += 1 + l + sovOrbiter(uint64(l))
	}
	return n
}

func (m *Payload) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PreActions) > 0 {
		for _, e := range m.PreActions {
			l = e.Size()
			n += 1 + l + sovOrbiter(uint64(l))
		}
	}
	if m.Forwarding != nil {
		l = m.Forwarding.Size()
		n += 1 + l + sovOrbiter(uint64(l))
	}
	return n
}

func (m *PayloadWrapper) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Orbiter != nil {
		l = m.Orbiter.Size()
		n += 1 + l + sovOrbiter(uint64(l))
	}
	return n
}

func sovOrbiter(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozOrbiter(x uint64) (n int) {
	return sovOrbiter(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Action) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrbiter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Action: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Action: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrbiter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= ActionID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrbiter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOrbiter
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOrbiter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Attributes == nil {
				m.Attributes = &types.Any{}
			}
			if err := m.Attributes.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOrbiter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOrbiter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Forwarding) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrbiter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Forwarding: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Forwarding: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProtocolId", wireType)
			}
			m.ProtocolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrbiter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProtocolId |= ProtocolID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrbiter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOrbiter
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOrbiter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Attributes == nil {
				m.Attributes = &types.Any{}
			}
			if err := m.Attributes.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PassthroughPayload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrbiter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOrbiter
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOrbiter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PassthroughPayload = append(m.PassthroughPayload[:0], dAtA[iNdEx:postIndex]...)
			if m.PassthroughPayload == nil {
				m.PassthroughPayload = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOrbiter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOrbiter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Payload) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrbiter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Payload: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Payload: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreActions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrbiter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOrbiter
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOrbiter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PreActions = append(m.PreActions, &Action{})
			if err := m.PreActions[len(m.PreActions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Forwarding", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrbiter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOrbiter
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOrbiter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Forwarding == nil {
				m.Forwarding = &Forwarding{}
			}
			if err := m.Forwarding.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOrbiter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOrbiter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PayloadWrapper) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrbiter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PayloadWrapper: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PayloadWrapper: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Orbiter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrbiter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOrbiter
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOrbiter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Orbiter == nil {
				m.Orbiter = &Payload{}
			}
			if err := m.Orbiter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOrbiter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOrbiter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipOrbiter(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowOrbiter
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOrbiter
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOrbiter
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthOrbiter
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupOrbiter
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthOrbiter
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthOrbiter        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowOrbiter          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupOrbiter = fmt.Errorf("proto: unexpected end of group")
)
