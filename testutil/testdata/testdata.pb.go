// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: testpb/testdata.proto

package testdata

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// TestForwardingAttr is a type created to test the proto marshaling/unmarshaling
// for the forwarding attributes.
type TestForwardingAttr struct {
	Planet string `protobuf:"bytes,1,opt,name=planet,proto3" json:"planet,omitempty"`
}

func (m *TestForwardingAttr) Reset()         { *m = TestForwardingAttr{} }
func (m *TestForwardingAttr) String() string { return proto.CompactTextString(m) }
func (*TestForwardingAttr) ProtoMessage()    {}
func (*TestForwardingAttr) Descriptor() ([]byte, []int) {
	return fileDescriptor_bc244d00904a39a7, []int{0}
}
func (m *TestForwardingAttr) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TestForwardingAttr) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TestForwardingAttr.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TestForwardingAttr) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestForwardingAttr.Merge(m, src)
}
func (m *TestForwardingAttr) XXX_Size() int {
	return m.Size()
}
func (m *TestForwardingAttr) XXX_DiscardUnknown() {
	xxx_messageInfo_TestForwardingAttr.DiscardUnknown(m)
}

var xxx_messageInfo_TestForwardingAttr proto.InternalMessageInfo

func (m *TestForwardingAttr) GetPlanet() string {
	if m != nil {
		return m.Planet
	}
	return ""
}

// TestActionAttr is a type created to test the proto marshaling/unmarshaling
// for the action attributes.
type TestActionAttr struct {
	Whatever string `protobuf:"bytes,1,opt,name=whatever,proto3" json:"whatever,omitempty"`
}

func (m *TestActionAttr) Reset()         { *m = TestActionAttr{} }
func (m *TestActionAttr) String() string { return proto.CompactTextString(m) }
func (*TestActionAttr) ProtoMessage()    {}
func (*TestActionAttr) Descriptor() ([]byte, []int) {
	return fileDescriptor_bc244d00904a39a7, []int{1}
}
func (m *TestActionAttr) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TestActionAttr) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TestActionAttr.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TestActionAttr) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestActionAttr.Merge(m, src)
}
func (m *TestActionAttr) XXX_Size() int {
	return m.Size()
}
func (m *TestActionAttr) XXX_DiscardUnknown() {
	xxx_messageInfo_TestActionAttr.DiscardUnknown(m)
}

var xxx_messageInfo_TestActionAttr proto.InternalMessageInfo

func (m *TestActionAttr) GetWhatever() string {
	if m != nil {
		return m.Whatever
	}
	return ""
}

func init() {
	proto.RegisterType((*TestForwardingAttr)(nil), "testpb.TestForwardingAttr")
	proto.RegisterType((*TestActionAttr)(nil), "testpb.TestActionAttr")
}

func init() { proto.RegisterFile("testpb/testdata.proto", fileDescriptor_bc244d00904a39a7) }

var fileDescriptor_bc244d00904a39a7 = []byte{
	// 233 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2d, 0x49, 0x2d, 0x2e,
	0x29, 0x48, 0xd2, 0x07, 0x51, 0x29, 0x89, 0x25, 0x89, 0x7a, 0x05, 0x45, 0xf9, 0x25, 0xf9, 0x42,
	0x6c, 0x10, 0x61, 0x29, 0x91, 0xf4, 0xfc, 0xf4, 0x7c, 0xb0, 0x90, 0x3e, 0x88, 0x05, 0x91, 0x95,
	0x92, 0x4c, 0xce, 0x2f, 0xce, 0xcd, 0x2f, 0x8e, 0x87, 0x48, 0x40, 0x38, 0x10, 0x29, 0xa5, 0x70,
	0x2e, 0xa1, 0x90, 0xd4, 0xe2, 0x12, 0xb7, 0xfc, 0xa2, 0xf2, 0xc4, 0xa2, 0x94, 0xcc, 0xbc, 0x74,
	0xc7, 0x92, 0x92, 0x22, 0x21, 0x31, 0x2e, 0xb6, 0x82, 0x9c, 0xc4, 0xbc, 0xd4, 0x12, 0x09, 0x46,
	0x05, 0x46, 0x0d, 0xce, 0x20, 0x28, 0xcf, 0x4a, 0xf3, 0xd4, 0x16, 0x5d, 0xd5, 0xbc, 0xfc, 0xa4,
	0x9c, 0x54, 0xbd, 0xfc, 0xa2, 0xa4, 0xcc, 0x92, 0xd4, 0x22, 0xbd, 0x32, 0x43, 0x3d, 0x54, 0xcd,
	0x99, 0x49, 0xa5, 0x25, 0xa9, 0xc5, 0x4a, 0xc1, 0x5c, 0x7c, 0x20, 0x83, 0x1d, 0x93, 0x4b, 0x32,
	0xf3, 0xf3, 0xc0, 0x86, 0x4a, 0x71, 0x71, 0x94, 0x67, 0x24, 0x96, 0xa4, 0x96, 0xa5, 0x16, 0x41,
	0x8d, 0x85, 0xf3, 0xad, 0x54, 0x4f, 0x6d, 0xd1, 0x55, 0xc4, 0x30, 0x18, 0xa1, 0x19, 0x62, 0xa8,
	0x93, 0xf6, 0x89, 0x47, 0x72, 0x8c, 0x17, 0x1e, 0xc9, 0x31, 0x3e, 0x78, 0x24, 0xc7, 0x38, 0xe1,
	0xb1, 0x1c, 0xc3, 0x85, 0xc7, 0x72, 0x0c, 0x37, 0x1e, 0xcb, 0x31, 0x44, 0x09, 0x82, 0x02, 0xa0,
	0xb4, 0x24, 0x33, 0x07, 0x1e, 0x32, 0x49, 0x6c, 0x60, 0x1f, 0x1a, 0x03, 0x02, 0x00, 0x00, 0xff,
	0xff, 0x0b, 0x6c, 0x06, 0x6f, 0x33, 0x01, 0x00, 0x00,
}

func (m *TestForwardingAttr) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TestForwardingAttr) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TestForwardingAttr) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Planet) > 0 {
		i -= len(m.Planet)
		copy(dAtA[i:], m.Planet)
		i = encodeVarintTestdata(dAtA, i, uint64(len(m.Planet)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TestActionAttr) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TestActionAttr) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TestActionAttr) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Whatever) > 0 {
		i -= len(m.Whatever)
		copy(dAtA[i:], m.Whatever)
		i = encodeVarintTestdata(dAtA, i, uint64(len(m.Whatever)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTestdata(dAtA []byte, offset int, v uint64) int {
	offset -= sovTestdata(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TestForwardingAttr) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Planet)
	if l > 0 {
		n += 1 + l + sovTestdata(uint64(l))
	}
	return n
}

func (m *TestActionAttr) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Whatever)
	if l > 0 {
		n += 1 + l + sovTestdata(uint64(l))
	}
	return n
}

func sovTestdata(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTestdata(x uint64) (n int) {
	return sovTestdata(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TestForwardingAttr) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTestdata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TestForwardingAttr: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TestForwardingAttr: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Planet", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestdata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTestdata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTestdata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Planet = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTestdata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTestdata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TestActionAttr) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTestdata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TestActionAttr: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TestActionAttr: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Whatever", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestdata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTestdata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTestdata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Whatever = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTestdata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTestdata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTestdata(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTestdata
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTestdata
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTestdata
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTestdata
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTestdata
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTestdata
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTestdata        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTestdata          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTestdata = fmt.Errorf("proto: unexpected end of group")
)
